
Timer_input_compare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001bc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000348  08000350  00001350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000348  08000348  00001350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000348  08000348  00001350  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000348  08000350  00001350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000348  08000348  00001348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800034c  0800034c  0000134c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001350  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004dd  00000000  00000000  0000137a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000168  00000000  00000000  00001857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  000019c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004d  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000273c  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ee2  00000000  00000000  000041c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a276  00000000  00000000  000050a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000f319  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c8  00000000  00000000  0000f35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0000f424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000330 	.word	0x08000330

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08000330 	.word	0x08000330

080001cc <main>:
#include "stm32l4xx.h"
#include "stm32l4xx_timer_driver.h"

int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
    timer2_pa5_output_compare();   // Configure TIM2 CH1 on PA5 for toggle output
 80001d0:	f000 f82c 	bl	800022c <timer2_pa5_output_compare>

    while(1)
 80001d4:	bf00      	nop
 80001d6:	e7fd      	b.n	80001d4 <main+0x8>

080001d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001d8:	480d      	ldr	r0, [pc, #52]	@ (8000210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e0:	480c      	ldr	r0, [pc, #48]	@ (8000214 <LoopForever+0x6>)
  ldr r1, =_edata
 80001e2:	490d      	ldr	r1, [pc, #52]	@ (8000218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e4:	4a0d      	ldr	r2, [pc, #52]	@ (800021c <LoopForever+0xe>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e8:	e002      	b.n	80001f0 <LoopCopyDataInit>

080001ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ee:	3304      	adds	r3, #4

080001f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f4:	d3f9      	bcc.n	80001ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000224 <LoopForever+0x16>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001fc:	e001      	b.n	8000202 <LoopFillZerobss>

080001fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000200:	3204      	adds	r2, #4

08000202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000204:	d3fb      	bcc.n	80001fe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000206:	f000 f86f 	bl	80002e8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800020a:	f7ff ffdf 	bl	80001cc <main>

0800020e <LoopForever>:

LoopForever:
  b LoopForever
 800020e:	e7fe      	b.n	800020e <LoopForever>
  ldr   r0, =_estack
 8000210:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000218:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800021c:	08000350 	.word	0x08000350
  ldr r2, =_sbss
 8000220:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000224:	2000001c 	.word	0x2000001c

08000228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000228:	e7fe      	b.n	8000228 <ADC1_2_IRQHandler>
	...

0800022c <timer2_pa5_output_compare>:
    TIM2->CR1 = CR1_CEN;         // Start timer
}


void timer2_pa5_output_compare(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= GPIOA_EN;            // Enable GPIOA clock
 8000230:	4b2c      	ldr	r3, [pc, #176]	@ (80002e4 <timer2_pa5_output_compare+0xb8>)
 8000232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000234:	4a2b      	ldr	r2, [pc, #172]	@ (80002e4 <timer2_pa5_output_compare+0xb8>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	64d3      	str	r3, [r2, #76]	@ 0x4c

    GPIOA->MODER &= ~(3U << 10);         // Clear PA5 mode bits
 800023c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000246:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800024a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 10);         // Set PA5 to alternate function
 800024c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000256:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800025a:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] &= ~(0xF << 20);       // Clear AFR for PA5
 800025c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000260:	6a1b      	ldr	r3, [r3, #32]
 8000262:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000266:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800026a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (1U << 20);        // AF1 = TIM2_CH1
 800026c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000270:	6a1b      	ldr	r3, [r3, #32]
 8000272:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800027a:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR1 |= TIM2EN;             // Enable TIM2 clock
 800027c:	4b19      	ldr	r3, [pc, #100]	@ (80002e4 <timer2_pa5_output_compare+0xb8>)
 800027e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000280:	4a18      	ldr	r2, [pc, #96]	@ (80002e4 <timer2_pa5_output_compare+0xb8>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	6593      	str	r3, [r2, #88]	@ 0x58

    TIM2->PSC = 4000 - 1;               // Prescaler: 16 MHz â†’ 1 kHz
 8000288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000290:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000 - 1;                // Auto-reload: 1000 ticks = 1 Hz
 8000292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000296:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800029a:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->CCMR1 &= ~(7U << 4);           // Clear channel 1 mode
 800029c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80002aa:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |=  (3U << 4);           // Set toggle mode on CH1
 80002ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002b6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80002ba:	6193      	str	r3, [r2, #24]

    TIM2->CCER |= (1U << 0);             // Enable channel 1 output
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c0:	6a1b      	ldr	r3, [r3, #32]
 80002c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6213      	str	r3, [r2, #32]

    TIM2->CNT = 0;                       // Reset counter
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d0:	2200      	movs	r2, #0
 80002d2:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->CR1 = CR1_CEN;                 // Enable TIM2
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d8:	2201      	movs	r2, #1
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000

080002e8 <__libc_init_array>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000320 <__libc_init_array+0x38>)
 80002ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000324 <__libc_init_array+0x3c>)
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	10a4      	asrs	r4, r4, #2
 80002f2:	2600      	movs	r6, #0
 80002f4:	42a6      	cmp	r6, r4
 80002f6:	d109      	bne.n	800030c <__libc_init_array+0x24>
 80002f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000328 <__libc_init_array+0x40>)
 80002fa:	4c0c      	ldr	r4, [pc, #48]	@ (800032c <__libc_init_array+0x44>)
 80002fc:	f000 f818 	bl	8000330 <_init>
 8000300:	1b64      	subs	r4, r4, r5
 8000302:	10a4      	asrs	r4, r4, #2
 8000304:	2600      	movs	r6, #0
 8000306:	42a6      	cmp	r6, r4
 8000308:	d105      	bne.n	8000316 <__libc_init_array+0x2e>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000310:	4798      	blx	r3
 8000312:	3601      	adds	r6, #1
 8000314:	e7ee      	b.n	80002f4 <__libc_init_array+0xc>
 8000316:	f855 3b04 	ldr.w	r3, [r5], #4
 800031a:	4798      	blx	r3
 800031c:	3601      	adds	r6, #1
 800031e:	e7f2      	b.n	8000306 <__libc_init_array+0x1e>
 8000320:	08000348 	.word	0x08000348
 8000324:	08000348 	.word	0x08000348
 8000328:	08000348 	.word	0x08000348
 800032c:	0800034c 	.word	0x0800034c

08000330 <_init>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr

0800033c <_fini>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr


stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000073c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080008c8  080008c8  000018c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008d4  080008d4  000018dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080008d4  080008d4  000018dc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080008d4  080008dc  000018dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008d4  080008d4  000018d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008d8  080008d8  000018d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000018dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000018dc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013f3  00000000  00000000  00001906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d5  00000000  00000000  00002cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  000030d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ee  00000000  00000000  00003220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023ef  00000000  00000000  0000330e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000189a  00000000  00000000  000056fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009d21  00000000  00000000  00006f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010cb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004a8  00000000  00000000  00010cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000111a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080008b0 	.word	0x080008b0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	080008b0 	.word	0x080008b0

080001cc <SPI2_GPIOInits>:
#include"stm32l4xx.h"
#include "stm32l4xx_gpio_driver.h"
#include "stm32l4xx_spi_driver.h"

void SPI2_GPIOInits(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
    GPIO_Handle_t SPIPins;
    SPIPins.pGPIOx = GPIOB;
 80001d2:	4b14      	ldr	r3, [pc, #80]	@ (8000224 <SPI2_GPIOInits+0x58>)
 80001d4:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001d6:	2302      	movs	r3, #2
 80001d8:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;   // AF5 = SPI2
 80001da:	2305      	movs	r3, #5
 80001dc:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001de:	2300      	movs	r3, #0
 80001e0:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001e2:	2300      	movs	r3, #0
 80001e4:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80001e6:	2303      	movs	r3, #3
 80001e8:	72bb      	strb	r3, [r7, #10]

    // NSS (PB12)
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001ea:	230c      	movs	r3, #12
 80001ec:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 f88d 	bl	8000310 <GPIO_Init>

    // SCK (PB13)
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f887 	bl	8000310 <GPIO_Init>

    // MISO (PB14)
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000202:	230e      	movs	r3, #14
 8000204:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f881 	bl	8000310 <GPIO_Init>

    // MOSI (PB15)
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800020e:	230f      	movs	r3, #15
 8000210:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f87b 	bl	8000310 <GPIO_Init>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	48000400 	.word	0x48000400

08000228 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b088      	sub	sp, #32
 800022c:	af00      	add	r7, sp, #0
    SPI_Handle_t SPI2Handle;
    SPI2Handle.pSPIx = SPI2;
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <SPI2_Inits+0x38>)
 8000230:	603b      	str	r3, [r7, #0]
    SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000232:	2301      	movs	r3, #1
 8000234:	713b      	strb	r3, [r7, #4]
    SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000236:	2301      	movs	r3, #1
 8000238:	717b      	strb	r3, [r7, #5]
    SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;  // ~10 MHz if APB1=80MHz
 800023a:	2302      	movs	r3, #2
 800023c:	71bb      	strb	r3, [r7, #6]
    SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800023e:	2300      	movs	r3, #0
 8000240:	71fb      	strb	r3, [r7, #7]
    SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000242:	2300      	movs	r3, #0
 8000244:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;  // software slave management
 800024a:	2301      	movs	r3, #1
 800024c:	72bb      	strb	r3, [r7, #10]

    SPI_Init(&SPI2Handle);
 800024e:	463b      	mov	r3, r7
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fa6d 	bl	8000730 <SPI_Init>
}
 8000256:	bf00      	nop
 8000258:	3720      	adds	r7, #32
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40003800 	.word	0x40003800

08000264 <main>:

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
    char testData[] = "HELLO_ESP32";
 800026a:	4a11      	ldr	r2, [pc, #68]	@ (80002b0 <main+0x4c>)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000270:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Init GPIO for SPI2
    SPI2_GPIOInits();
 8000274:	f7ff ffaa 	bl	80001cc <SPI2_GPIOInits>

    // Init SPI2 as master
    SPI2_Inits();
 8000278:	f7ff ffd6 	bl	8000228 <SPI2_Inits>

    // Enable SPI peripheral
    SPI_PeriClockControl(SPI2, ENABLE);
 800027c:	2101      	movs	r1, #1
 800027e:	480d      	ldr	r0, [pc, #52]	@ (80002b4 <main+0x50>)
 8000280:	f000 f9fe 	bl	8000680 <SPI_PeriClockControl>

    // Enable SSI (needed if using SSM)
    SPI_SSIConfig(SPI2, ENABLE);
 8000284:	2101      	movs	r1, #1
 8000286:	480b      	ldr	r0, [pc, #44]	@ (80002b4 <main+0x50>)
 8000288:	f000 fad3 	bl	8000832 <SPI_SSIConfig>

    while(1)
    {
        // Send data to ESP32
        SPI_SendData(SPI2, (uint8_t*)testData, sizeof(testData)-1);
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	220b      	movs	r2, #11
 8000290:	4619      	mov	r1, r3
 8000292:	4808      	ldr	r0, [pc, #32]	@ (80002b4 <main+0x50>)
 8000294:	f000 faaa 	bl	80007ec <SPI_SendData>

        // crude delay
        for(volatile int i = 0; i < 500000; i++);
 8000298:	2300      	movs	r3, #0
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	e002      	b.n	80002a4 <main+0x40>
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	4a04      	ldr	r2, [pc, #16]	@ (80002b8 <main+0x54>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	ddf8      	ble.n	800029e <main+0x3a>
        SPI_SendData(SPI2, (uint8_t*)testData, sizeof(testData)-1);
 80002ac:	e7ee      	b.n	800028c <main+0x28>
 80002ae:	bf00      	nop
 80002b0:	080008c8 	.word	0x080008c8
 80002b4:	40003800 	.word	0x40003800
 80002b8:	0007a11f 	.word	0x0007a11f

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	@ (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	@ (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	@ (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	@ (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 fabd 	bl	8000868 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002ee:	f7ff ffb9 	bl	8000264 <main>

080002f2 <LoopForever>:

LoopForever:
  b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000300:	080008dc 	.word	0x080008dc
  ldr r2, =_sbss
 8000304:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000308:	2000001c 	.word	0x2000001c

0800030c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC1_2_IRQHandler>
	...

08000310 <GPIO_Init>:

/* Initialization and de-initialization */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000310:	b480      	push	{r7}
 8000312:	b087      	sub	sp, #28
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	2b03      	cmp	r3, #3
 8000322:	d822      	bhi.n	800036a <GPIO_Init+0x5a>
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	461a      	mov	r2, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	791b      	ldrb	r3, [r3, #4]
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	fa02 f303 	lsl.w	r3, r2, r3
 8000334:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	791b      	ldrb	r3, [r3, #4]
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	2103      	movs	r1, #3
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	43db      	mvns	r3, r3
 800034a:	4619      	mov	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	400a      	ands	r2, r1
 8000352:	601a      	str	r2, [r3, #0]
			pGPIOHandle ->pGPIOx->MODER |= temp;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	6819      	ldr	r1, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	697a      	ldr	r2, [r7, #20]
 8000360:	430a      	orrs	r2, r1
 8000362:	601a      	str	r2, [r3, #0]
			temp=0;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]
 8000368:	e0e1      	b.n	800052e <GPIO_Init+0x21e>
		}
		else
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	795b      	ldrb	r3, [r3, #5]
 800036e:	461a      	mov	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	791b      	ldrb	r3, [r3, #4]
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	617b      	str	r3, [r7, #20]
					pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	2103      	movs	r1, #3
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	4619      	mov	r1, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	400a      	ands	r2, r1
 8000398:	601a      	str	r2, [r3, #0]
					pGPIOHandle ->pGPIOx->MODER |= temp;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	430a      	orrs	r2, r1
 80003a8:	601a      	str	r2, [r3, #0]
					temp=0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
			if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	795b      	ldrb	r3, [r3, #5]
 80003b2:	2b04      	cmp	r3, #4
 80003b4:	d117      	bne.n	80003e6 <GPIO_Init+0xd6>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80003b6:	4b47      	ldr	r3, [pc, #284]	@ (80004d4 <GPIO_Init+0x1c4>)
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	7912      	ldrb	r2, [r2, #4]
 80003be:	4611      	mov	r1, r2
 80003c0:	2201      	movs	r2, #1
 80003c2:	408a      	lsls	r2, r1
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a43      	ldr	r2, [pc, #268]	@ (80004d4 <GPIO_Init+0x1c4>)
 80003c8:	430b      	orrs	r3, r1
 80003ca:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003cc:	4b41      	ldr	r3, [pc, #260]	@ (80004d4 <GPIO_Init+0x1c4>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	7912      	ldrb	r2, [r2, #4]
 80003d4:	4611      	mov	r1, r2
 80003d6:	2201      	movs	r2, #1
 80003d8:	408a      	lsls	r2, r1
 80003da:	43d2      	mvns	r2, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a3d      	ldr	r2, [pc, #244]	@ (80004d4 <GPIO_Init+0x1c4>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	6093      	str	r3, [r2, #8]
 80003e4:	e035      	b.n	8000452 <GPIO_Init+0x142>
					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	795b      	ldrb	r3, [r3, #5]
 80003ea:	2b05      	cmp	r3, #5
 80003ec:	d117      	bne.n	800041e <GPIO_Init+0x10e>
					{
						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80003ee:	4b39      	ldr	r3, [pc, #228]	@ (80004d4 <GPIO_Init+0x1c4>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	7912      	ldrb	r2, [r2, #4]
 80003f6:	4611      	mov	r1, r2
 80003f8:	2201      	movs	r2, #1
 80003fa:	408a      	lsls	r2, r1
 80003fc:	4611      	mov	r1, r2
 80003fe:	4a35      	ldr	r2, [pc, #212]	@ (80004d4 <GPIO_Init+0x1c4>)
 8000400:	430b      	orrs	r3, r1
 8000402:	6093      	str	r3, [r2, #8]

						EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000404:	4b33      	ldr	r3, [pc, #204]	@ (80004d4 <GPIO_Init+0x1c4>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	7912      	ldrb	r2, [r2, #4]
 800040c:	4611      	mov	r1, r2
 800040e:	2201      	movs	r2, #1
 8000410:	408a      	lsls	r2, r1
 8000412:	43d2      	mvns	r2, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4a2f      	ldr	r2, [pc, #188]	@ (80004d4 <GPIO_Init+0x1c4>)
 8000418:	400b      	ands	r3, r1
 800041a:	60d3      	str	r3, [r2, #12]
 800041c:	e019      	b.n	8000452 <GPIO_Init+0x142>

					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	795b      	ldrb	r3, [r3, #5]
 8000422:	2b06      	cmp	r3, #6
 8000424:	d115      	bne.n	8000452 <GPIO_Init+0x142>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000426:	4b2b      	ldr	r3, [pc, #172]	@ (80004d4 <GPIO_Init+0x1c4>)
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	7912      	ldrb	r2, [r2, #4]
 800042e:	4611      	mov	r1, r2
 8000430:	2201      	movs	r2, #1
 8000432:	408a      	lsls	r2, r1
 8000434:	4611      	mov	r1, r2
 8000436:	4a27      	ldr	r2, [pc, #156]	@ (80004d4 <GPIO_Init+0x1c4>)
 8000438:	430b      	orrs	r3, r1
 800043a:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800043c:	4b25      	ldr	r3, [pc, #148]	@ (80004d4 <GPIO_Init+0x1c4>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	7912      	ldrb	r2, [r2, #4]
 8000444:	4611      	mov	r1, r2
 8000446:	2201      	movs	r2, #1
 8000448:	408a      	lsls	r2, r1
 800044a:	4611      	mov	r1, r2
 800044c:	4a21      	ldr	r2, [pc, #132]	@ (80004d4 <GPIO_Init+0x1c4>)
 800044e:	430b      	orrs	r3, r1
 8000450:	6093      	str	r3, [r2, #8]
					}
				 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	089b      	lsrs	r3, r3, #2
 8000458:	74fb      	strb	r3, [r7, #19]
				 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	f003 0303 	and.w	r3, r3, #3
 8000462:	74bb      	strb	r3, [r7, #18]
				 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800046c:	d042      	beq.n	80004f4 <GPIO_Init+0x1e4>
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a19      	ldr	r2, [pc, #100]	@ (80004d8 <GPIO_Init+0x1c8>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d02b      	beq.n	80004d0 <GPIO_Init+0x1c0>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a17      	ldr	r2, [pc, #92]	@ (80004dc <GPIO_Init+0x1cc>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d024      	beq.n	80004cc <GPIO_Init+0x1bc>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a16      	ldr	r2, [pc, #88]	@ (80004e0 <GPIO_Init+0x1d0>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d01d      	beq.n	80004c8 <GPIO_Init+0x1b8>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a14      	ldr	r2, [pc, #80]	@ (80004e4 <GPIO_Init+0x1d4>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d016      	beq.n	80004c4 <GPIO_Init+0x1b4>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a13      	ldr	r2, [pc, #76]	@ (80004e8 <GPIO_Init+0x1d8>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d00f      	beq.n	80004c0 <GPIO_Init+0x1b0>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a11      	ldr	r2, [pc, #68]	@ (80004ec <GPIO_Init+0x1dc>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d008      	beq.n	80004bc <GPIO_Init+0x1ac>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a10      	ldr	r2, [pc, #64]	@ (80004f0 <GPIO_Init+0x1e0>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d101      	bne.n	80004b8 <GPIO_Init+0x1a8>
 80004b4:	2307      	movs	r3, #7
 80004b6:	e01e      	b.n	80004f6 <GPIO_Init+0x1e6>
 80004b8:	2300      	movs	r3, #0
 80004ba:	e01c      	b.n	80004f6 <GPIO_Init+0x1e6>
 80004bc:	2306      	movs	r3, #6
 80004be:	e01a      	b.n	80004f6 <GPIO_Init+0x1e6>
 80004c0:	2305      	movs	r3, #5
 80004c2:	e018      	b.n	80004f6 <GPIO_Init+0x1e6>
 80004c4:	2304      	movs	r3, #4
 80004c6:	e016      	b.n	80004f6 <GPIO_Init+0x1e6>
 80004c8:	2303      	movs	r3, #3
 80004ca:	e014      	b.n	80004f6 <GPIO_Init+0x1e6>
 80004cc:	2302      	movs	r3, #2
 80004ce:	e012      	b.n	80004f6 <GPIO_Init+0x1e6>
 80004d0:	2301      	movs	r3, #1
 80004d2:	e010      	b.n	80004f6 <GPIO_Init+0x1e6>
 80004d4:	40010400 	.word	0x40010400
 80004d8:	48000400 	.word	0x48000400
 80004dc:	48000800 	.word	0x48000800
 80004e0:	48000c00 	.word	0x48000c00
 80004e4:	48001000 	.word	0x48001000
 80004e8:	48001400 	.word	0x48001400
 80004ec:	48001800 	.word	0x48001800
 80004f0:	48001c00 	.word	0x48001c00
 80004f4:	2300      	movs	r3, #0
 80004f6:	747b      	strb	r3, [r7, #17]
				 SYSCFG_PCLK_EN();
 80004f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000674 <GPIO_Init+0x364>)
 80004fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004fc:	4a5d      	ldr	r2, [pc, #372]	@ (8000674 <GPIO_Init+0x364>)
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6613      	str	r3, [r2, #96]	@ 0x60
				 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 8000504:	7c7a      	ldrb	r2, [r7, #17]
 8000506:	7cbb      	ldrb	r3, [r7, #18]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	fa02 f103 	lsl.w	r1, r2, r3
 800050e:	4a5a      	ldr	r2, [pc, #360]	@ (8000678 <GPIO_Init+0x368>)
 8000510:	7cfb      	ldrb	r3, [r7, #19]
 8000512:	3302      	adds	r3, #2
 8000514:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000518:	4b58      	ldr	r3, [pc, #352]	@ (800067c <GPIO_Init+0x36c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7912      	ldrb	r2, [r2, #4]
 8000520:	4611      	mov	r1, r2
 8000522:	2201      	movs	r2, #1
 8000524:	408a      	lsls	r2, r1
 8000526:	4611      	mov	r1, r2
 8000528:	4a54      	ldr	r2, [pc, #336]	@ (800067c <GPIO_Init+0x36c>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6013      	str	r3, [r2, #0]
		}

		temp=0;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	799b      	ldrb	r3, [r3, #6]
 8000536:	461a      	mov	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	791b      	ldrb	r3, [r3, #4]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	689a      	ldr	r2, [r3, #8]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	2103      	movs	r1, #3
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	400a      	ands	r2, r1
 8000560:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	6899      	ldr	r1, [r3, #8]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	430a      	orrs	r2, r1
 8000570:	609a      	str	r2, [r3, #8]
		temp=0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	79db      	ldrb	r3, [r3, #7]
 800057a:	461a      	mov	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	fa02 f303 	lsl.w	r3, r2, r3
 8000586:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68da      	ldr	r2, [r3, #12]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	2103      	movs	r1, #3
 8000596:	fa01 f303 	lsl.w	r3, r1, r3
 800059a:	43db      	mvns	r3, r3
 800059c:	4619      	mov	r1, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	400a      	ands	r2, r1
 80005a4:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68d9      	ldr	r1, [r3, #12]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	430a      	orrs	r2, r1
 80005b4:	60da      	str	r2, [r3, #12]
		temp=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7a1b      	ldrb	r3, [r3, #8]
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	4619      	mov	r1, r3
 80005d6:	2301      	movs	r3, #1
 80005d8:	408b      	lsls	r3, r1
 80005da:	43db      	mvns	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	400a      	ands	r2, r1
 80005e4:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6859      	ldr	r1, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	605a      	str	r2, [r3, #4]
		temp=0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	795b      	ldrb	r3, [r3, #5]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d132      	bne.n	8000668 <GPIO_Init+0x358>
		{
			uint32_t temp1 ,temp2;
			temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	08db      	lsrs	r3, r3, #3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	60fb      	str	r3, [r7, #12]
			temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	f003 0307 	and.w	r3, r3, #7
 8000614:	60bb      	str	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	3208      	adds	r2, #8
 800061e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	210f      	movs	r1, #15
 8000628:	fa01 f303 	lsl.w	r3, r1, r3
 800062c:	43db      	mvns	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4011      	ands	r1, r2
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	3208      	adds	r2, #8
 800063a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	3208      	adds	r2, #8
 8000646:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	7a5b      	ldrb	r3, [r3, #9]
 800064e:	4619      	mov	r1, r3
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	fa01 f303 	lsl.w	r3, r1, r3
 8000658:	4619      	mov	r1, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4311      	orrs	r1, r2
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	3208      	adds	r2, #8
 8000664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}




}
 8000668:	bf00      	nop
 800066a:	371c      	adds	r7, #28
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000
 8000678:	40010000 	.word	0x40010000
 800067c:	40010400 	.word	0x40010400

08000680 <SPI_PeriClockControl>:
/*
 *  Peripheral Clock configuration
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d120      	bne.n	80006d4 <SPI_PeriClockControl+0x54>
			{
				if(pSPIx == SPI1)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a22      	ldr	r2, [pc, #136]	@ (8000720 <SPI_PeriClockControl+0xa0>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d106      	bne.n	80006a8 <SPI_PeriClockControl+0x28>
				{
					SPI1_PCLK_EN();
 800069a:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 800069c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800069e:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 80006a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006a4:	6613      	str	r3, [r2, #96]	@ 0x60
							SPI3_PCLK_DI();
						}

			}

}
 80006a6:	e035      	b.n	8000714 <SPI_PeriClockControl+0x94>
				else if(pSPIx==SPI2)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000728 <SPI_PeriClockControl+0xa8>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d106      	bne.n	80006be <SPI_PeriClockControl+0x3e>
					SPI2_PCLK_EN();
 80006b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 80006b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ba:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80006bc:	e02a      	b.n	8000714 <SPI_PeriClockControl+0x94>
				else if(pSPIx==SPI3)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a1a      	ldr	r2, [pc, #104]	@ (800072c <SPI_PeriClockControl+0xac>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d126      	bne.n	8000714 <SPI_PeriClockControl+0x94>
					SPI3_PCLK_EN();
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ca:	4a16      	ldr	r2, [pc, #88]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 80006cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006d0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80006d2:	e01f      	b.n	8000714 <SPI_PeriClockControl+0x94>
				if(pSPIx == SPI1)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <SPI_PeriClockControl+0xa0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d106      	bne.n	80006ea <SPI_PeriClockControl+0x6a>
							SPI1_PCLK_DI();
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 80006de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006e0:	4a10      	ldr	r2, [pc, #64]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 80006e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006e6:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80006e8:	e014      	b.n	8000714 <SPI_PeriClockControl+0x94>
						else if(pSPIx==SPI2)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000728 <SPI_PeriClockControl+0xa8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d106      	bne.n	8000700 <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 80006f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80006fc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80006fe:	e009      	b.n	8000714 <SPI_PeriClockControl+0x94>
						else if(pSPIx==SPI3)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a0a      	ldr	r2, [pc, #40]	@ (800072c <SPI_PeriClockControl+0xac>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d105      	bne.n	8000714 <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 800070a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070c:	4a05      	ldr	r2, [pc, #20]	@ (8000724 <SPI_PeriClockControl+0xa4>)
 800070e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000712:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40013000 	.word	0x40013000
 8000724:	40021000 	.word	0x40021000
 8000728:	40003800 	.word	0x40003800
 800072c:	40003c00 	.word	0x40003c00

08000730 <SPI_Init>:
/*
 *  Init and De-init
 */

void SPI_Init(SPI_Handle_t *pSPIHANDLE)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	// Configure the SPI_CR1 Register
	uint32_t tempreg=0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]

			SPI_PeriClockControl(pSPIHANDLE->pSPIx, ENABLE);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff9c 	bl	8000680 <SPI_PeriClockControl>

			// Configure the device mode
			tempreg |=pSPIHANDLE->SPIConfig.SPI_DeviceMode<<2;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4313      	orrs	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]

			//Configure the Bus config
			if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_FD)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	795b      	ldrb	r3, [r3, #5]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d104      	bne.n	8000766 <SPI_Init+0x36>
			{
				//  BIDI mode should be cleared
				tempreg &=~(1<<15);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e014      	b.n	8000790 <SPI_Init+0x60>
			}
			else if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_HD)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	795b      	ldrb	r3, [r3, #5]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d104      	bne.n	8000778 <SPI_Init+0x48>
			{
				//  BIDI mode should be set
				tempreg |=(1<<15);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e00b      	b.n	8000790 <SPI_Init+0x60>
			}
			else if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	795b      	ldrb	r3, [r3, #5]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d107      	bne.n	8000790 <SPI_Init+0x60>
			{
				// BIDI mode should be cleared
				tempreg &=~(1<<15);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000786:	60fb      	str	r3, [r7, #12]

				// RXONLY bit must be set
				tempreg |=(1<<10);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800078e:	60fb      	str	r3, [r7, #12]
			}

			// Configure the SPI Serial Clock Speed(baud rate)
			tempreg |=pSPIHANDLE->SPIConfig.SPI_SclkSpeed<<3;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	799b      	ldrb	r3, [r3, #6]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	4313      	orrs	r3, r2
 800079a:	60fb      	str	r3, [r7, #12]

			// Configure the CPOL
			tempreg |=pSPIHANDLE->SPIConfig.SPI_CPOL<<1;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7a1b      	ldrb	r3, [r3, #8]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]

			// Configure the CPHA
			tempreg |=pSPIHANDLE->SPIConfig.SPI_CPHA<<0;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7a5b      	ldrb	r3, [r3, #9]
 80007ac:	461a      	mov	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]

			pSPIHANDLE->pSPIx->CR1 |=tempreg;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6819      	ldr	r1, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	430a      	orrs	r2, r1
 80007c2:	601a      	str	r2, [r3, #0]

			tempreg=0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]

			//// Configure the DFF
			tempreg |=pSPIHANDLE->SPIConfig.SPI_DFF<<8;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	79db      	ldrb	r3, [r3, #7]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]

			pSPIHANDLE->pSPIx->CR2 |=tempreg;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6859      	ldr	r1, [r3, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	430a      	orrs	r2, r1
 80007e2:	605a      	str	r2, [r3, #4]


}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SPI_SendData>:
/*
 *   Data Send and Receive
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer,uint32_t Len)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
	while(Len >0)
 80007f8:	e012      	b.n	8000820 <SPI_SendData+0x34>
	{
		// wait until TXE is set
		while(((pSPIx->SR >> 1)&1)==0);
 80007fa:	bf00      	nop
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f8      	beq.n	80007fc <SPI_SendData+0x10>

		// load the data in to the DR
		pSPIx->DR =*pTxBuffer;
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	60da      	str	r2, [r3, #12]
		Len--;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	607b      	str	r3, [r7, #4]
		pTxBuffer++;
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	3301      	adds	r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
	while(Len >0)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1e9      	bne.n	80007fa <SPI_SendData+0xe>
	}

}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <SPI_SSIConfig>:
		pSPIx->CR1 &=  ~(1 << 6);
	}
}

void  SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	460b      	mov	r3, r1
 800083c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800083e:	78fb      	ldrb	r3, [r7, #3]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d106      	bne.n	8000852 <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |=  (1 << 8);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &=  ~(1 << 8);
	}
}
 8000850:	e005      	b.n	800085e <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << 8);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	601a      	str	r2, [r3, #0]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <__libc_init_array>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	4d0d      	ldr	r5, [pc, #52]	@ (80008a0 <__libc_init_array+0x38>)
 800086c:	4c0d      	ldr	r4, [pc, #52]	@ (80008a4 <__libc_init_array+0x3c>)
 800086e:	1b64      	subs	r4, r4, r5
 8000870:	10a4      	asrs	r4, r4, #2
 8000872:	2600      	movs	r6, #0
 8000874:	42a6      	cmp	r6, r4
 8000876:	d109      	bne.n	800088c <__libc_init_array+0x24>
 8000878:	4d0b      	ldr	r5, [pc, #44]	@ (80008a8 <__libc_init_array+0x40>)
 800087a:	4c0c      	ldr	r4, [pc, #48]	@ (80008ac <__libc_init_array+0x44>)
 800087c:	f000 f818 	bl	80008b0 <_init>
 8000880:	1b64      	subs	r4, r4, r5
 8000882:	10a4      	asrs	r4, r4, #2
 8000884:	2600      	movs	r6, #0
 8000886:	42a6      	cmp	r6, r4
 8000888:	d105      	bne.n	8000896 <__libc_init_array+0x2e>
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000890:	4798      	blx	r3
 8000892:	3601      	adds	r6, #1
 8000894:	e7ee      	b.n	8000874 <__libc_init_array+0xc>
 8000896:	f855 3b04 	ldr.w	r3, [r5], #4
 800089a:	4798      	blx	r3
 800089c:	3601      	adds	r6, #1
 800089e:	e7f2      	b.n	8000886 <__libc_init_array+0x1e>
 80008a0:	080008d4 	.word	0x080008d4
 80008a4:	080008d4 	.word	0x080008d4
 80008a8:	080008d4 	.word	0x080008d4
 80008ac:	080008d8 	.word	0x080008d8

080008b0 <_init>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	bf00      	nop
 80008b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b6:	bc08      	pop	{r3}
 80008b8:	469e      	mov	lr, r3
 80008ba:	4770      	bx	lr

080008bc <_fini>:
 80008bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008be:	bf00      	nop
 80008c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c2:	bc08      	pop	{r3}
 80008c4:	469e      	mov	lr, r3
 80008c6:	4770      	bx	lr


ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001994  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001b24  08001b24  00002b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b6c  08001b6c  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001b6c  08001b6c  00002b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b74  08001b74  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b74  08001b74  00002b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b78  08001b78  00002b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001b7c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003050  2**0
                  CONTENTS
 10 .bss          0000018c  20000050  20000050  00003050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  00003050  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001d82  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000784  00000000  00000000  00004dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00005580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000125  00000000  00000000  00005720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003136  00000000  00000000  00005845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002d80  00000000  00000000  0000897b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b162  00000000  00000000  0000b6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001685d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b90  00000000  00000000  000168a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00017430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001b0c 	.word	0x08001b0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	08001b0c 	.word	0x08001b0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_frsub>:
 80005f8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80005fc:	e002      	b.n	8000604 <__addsf3>
 80005fe:	bf00      	nop

08000600 <__aeabi_fsub>:
 8000600:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000604 <__addsf3>:
 8000604:	0042      	lsls	r2, r0, #1
 8000606:	bf1f      	itttt	ne
 8000608:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800060c:	ea92 0f03 	teqne	r2, r3
 8000610:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000614:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000618:	d06a      	beq.n	80006f0 <__addsf3+0xec>
 800061a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800061e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000622:	bfc1      	itttt	gt
 8000624:	18d2      	addgt	r2, r2, r3
 8000626:	4041      	eorgt	r1, r0
 8000628:	4048      	eorgt	r0, r1
 800062a:	4041      	eorgt	r1, r0
 800062c:	bfb8      	it	lt
 800062e:	425b      	neglt	r3, r3
 8000630:	2b19      	cmp	r3, #25
 8000632:	bf88      	it	hi
 8000634:	4770      	bxhi	lr
 8000636:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800063a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800063e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800064a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800064e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000652:	bf18      	it	ne
 8000654:	4249      	negne	r1, r1
 8000656:	ea92 0f03 	teq	r2, r3
 800065a:	d03f      	beq.n	80006dc <__addsf3+0xd8>
 800065c:	f1a2 0201 	sub.w	r2, r2, #1
 8000660:	fa41 fc03 	asr.w	ip, r1, r3
 8000664:	eb10 000c 	adds.w	r0, r0, ip
 8000668:	f1c3 0320 	rsb	r3, r3, #32
 800066c:	fa01 f103 	lsl.w	r1, r1, r3
 8000670:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000674:	d502      	bpl.n	800067c <__addsf3+0x78>
 8000676:	4249      	negs	r1, r1
 8000678:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800067c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000680:	d313      	bcc.n	80006aa <__addsf3+0xa6>
 8000682:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000686:	d306      	bcc.n	8000696 <__addsf3+0x92>
 8000688:	0840      	lsrs	r0, r0, #1
 800068a:	ea4f 0131 	mov.w	r1, r1, rrx
 800068e:	f102 0201 	add.w	r2, r2, #1
 8000692:	2afe      	cmp	r2, #254	@ 0xfe
 8000694:	d251      	bcs.n	800073a <__addsf3+0x136>
 8000696:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800069a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800069e:	bf08      	it	eq
 80006a0:	f020 0001 	biceq.w	r0, r0, #1
 80006a4:	ea40 0003 	orr.w	r0, r0, r3
 80006a8:	4770      	bx	lr
 80006aa:	0049      	lsls	r1, r1, #1
 80006ac:	eb40 0000 	adc.w	r0, r0, r0
 80006b0:	3a01      	subs	r2, #1
 80006b2:	bf28      	it	cs
 80006b4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80006b8:	d2ed      	bcs.n	8000696 <__addsf3+0x92>
 80006ba:	fab0 fc80 	clz	ip, r0
 80006be:	f1ac 0c08 	sub.w	ip, ip, #8
 80006c2:	ebb2 020c 	subs.w	r2, r2, ip
 80006c6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ca:	bfaa      	itet	ge
 80006cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006d0:	4252      	neglt	r2, r2
 80006d2:	4318      	orrge	r0, r3
 80006d4:	bfbc      	itt	lt
 80006d6:	40d0      	lsrlt	r0, r2
 80006d8:	4318      	orrlt	r0, r3
 80006da:	4770      	bx	lr
 80006dc:	f092 0f00 	teq	r2, #0
 80006e0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80006e4:	bf06      	itte	eq
 80006e6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80006ea:	3201      	addeq	r2, #1
 80006ec:	3b01      	subne	r3, #1
 80006ee:	e7b5      	b.n	800065c <__addsf3+0x58>
 80006f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f8:	bf18      	it	ne
 80006fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006fe:	d021      	beq.n	8000744 <__addsf3+0x140>
 8000700:	ea92 0f03 	teq	r2, r3
 8000704:	d004      	beq.n	8000710 <__addsf3+0x10c>
 8000706:	f092 0f00 	teq	r2, #0
 800070a:	bf08      	it	eq
 800070c:	4608      	moveq	r0, r1
 800070e:	4770      	bx	lr
 8000710:	ea90 0f01 	teq	r0, r1
 8000714:	bf1c      	itt	ne
 8000716:	2000      	movne	r0, #0
 8000718:	4770      	bxne	lr
 800071a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800071e:	d104      	bne.n	800072a <__addsf3+0x126>
 8000720:	0040      	lsls	r0, r0, #1
 8000722:	bf28      	it	cs
 8000724:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000728:	4770      	bx	lr
 800072a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800072e:	bf3c      	itt	cc
 8000730:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000734:	4770      	bxcc	lr
 8000736:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800073a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800073e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000742:	4770      	bx	lr
 8000744:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000748:	bf16      	itet	ne
 800074a:	4608      	movne	r0, r1
 800074c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000750:	4601      	movne	r1, r0
 8000752:	0242      	lsls	r2, r0, #9
 8000754:	bf06      	itte	eq
 8000756:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800075a:	ea90 0f01 	teqeq	r0, r1
 800075e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000762:	4770      	bx	lr

08000764 <__aeabi_ui2f>:
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	e004      	b.n	8000774 <__aeabi_i2f+0x8>
 800076a:	bf00      	nop

0800076c <__aeabi_i2f>:
 800076c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000770:	bf48      	it	mi
 8000772:	4240      	negmi	r0, r0
 8000774:	ea5f 0c00 	movs.w	ip, r0
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000780:	4601      	mov	r1, r0
 8000782:	f04f 0000 	mov.w	r0, #0
 8000786:	e01c      	b.n	80007c2 <__aeabi_l2f+0x2a>

08000788 <__aeabi_ul2f>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	e00a      	b.n	80007ac <__aeabi_l2f+0x14>
 8000796:	bf00      	nop

08000798 <__aeabi_l2f>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__aeabi_l2f+0x14>
 80007a6:	4240      	negs	r0, r0
 80007a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ac:	ea5f 0c01 	movs.w	ip, r1
 80007b0:	bf02      	ittt	eq
 80007b2:	4684      	moveq	ip, r0
 80007b4:	4601      	moveq	r1, r0
 80007b6:	2000      	moveq	r0, #0
 80007b8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80007bc:	bf08      	it	eq
 80007be:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80007c6:	fabc f28c 	clz	r2, ip
 80007ca:	3a08      	subs	r2, #8
 80007cc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007d0:	db10      	blt.n	80007f4 <__aeabi_l2f+0x5c>
 80007d2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007d6:	4463      	add	r3, ip
 80007d8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007e4:	fa20 f202 	lsr.w	r2, r0, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	f020 0001 	biceq.w	r0, r0, #1
 80007f2:	4770      	bx	lr
 80007f4:	f102 0220 	add.w	r2, r2, #32
 80007f8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007fc:	f1c2 0220 	rsb	r2, r2, #32
 8000800:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000804:	fa21 f202 	lsr.w	r2, r1, r2
 8000808:	eb43 0002 	adc.w	r0, r3, r2
 800080c:	bf08      	it	eq
 800080e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000812:	4770      	bx	lr

08000814 <USART2_Init>:


USART_Handle_t usart2_handle;

void USART2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000818:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <USART2_Init+0x3c>)
 800081a:	4a0e      	ldr	r2, [pc, #56]	@ (8000854 <USART2_Init+0x40>)
 800081c:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <USART2_Init+0x3c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000824:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000826:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <USART2_Init+0x3c>)
 8000828:	2200      	movs	r2, #0
 800082a:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <USART2_Init+0x3c>)
 800082e:	2202      	movs	r2, #2
 8000830:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000832:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <USART2_Init+0x3c>)
 8000834:	2200      	movs	r2, #0
 8000836:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <USART2_Init+0x3c>)
 800083a:	2200      	movs	r2, #0
 800083c:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <USART2_Init+0x3c>)
 8000840:	2200      	movs	r2, #0
 8000842:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000844:	4802      	ldr	r0, [pc, #8]	@ (8000850 <USART2_Init+0x3c>)
 8000846:	f000 fbc7 	bl	8000fd8 <USART_Init>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000006c 	.word	0x2000006c
 8000854:	40004400 	.word	0x40004400

08000858 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart2_gpio;
	memset(&usart2_gpio,0,sizeof(usart2_gpio));
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	220c      	movs	r2, #12
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fd81 	bl	800136c <memset>

	usart2_gpio.pGPIOx = GPIOA;
 800086a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800086e:	607b      	str	r3, [r7, #4]
	usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000870:	2302      	movs	r3, #2
 8000872:	727b      	strb	r3, [r7, #9]
	usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000874:	2300      	movs	r3, #0
 8000876:	733b      	strb	r3, [r7, #12]
	usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000878:	2301      	movs	r3, #1
 800087a:	72fb      	strb	r3, [r7, #11]
	usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800087c:	2302      	movs	r3, #2
 800087e:	72bb      	strb	r3, [r7, #10]
	usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000880:	2307      	movs	r3, #7
 8000882:	737b      	strb	r3, [r7, #13]

	usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;  // TX
 8000884:	2302      	movs	r3, #2
 8000886:	723b      	strb	r3, [r7, #8]
	GPIOA_PCLK_EN();
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <USART2_GPIOInit+0x58>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088c:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <USART2_GPIOInit+0x58>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIO_Init(&usart2_gpio);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f95e 	bl	8000b58 <GPIO_Init>

	usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;  // RX
 800089c:	2303      	movs	r3, #3
 800089e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart2_gpio);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f958 	bl	8000b58 <GPIO_Init>
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000

080008b4 <delay>:

void delay(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 250000 ; i ++);
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	e002      	b.n	80008c6 <delay+0x12>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <delay+0x28>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d9f8      	bls.n	80008c0 <delay+0xc>
}
 80008ce:	bf00      	nop
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	0003d08f 	.word	0x0003d08f

080008e0 <main>:

int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
	char msg[30];
    float adc_val;

    USART2_GPIOInit();
 80008e6:	f7ff ffb7 	bl	8000858 <USART2_GPIOInit>
    USART2_Init();
 80008ea:	f7ff ff93 	bl	8000814 <USART2_Init>
    USART_PeripheralControl(USART2, ENABLE);
 80008ee:	2101      	movs	r1, #1
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <main+0x58>)
 80008f2:	f000 fc3c 	bl	800116e <USART_PeripheralControl>
    adc_init();
 80008f6:	f000 f897 	bl	8000a28 <adc_init>

    while (1)
    {
        adc_val = adc_read();
 80008fa:	f000 f91b 	bl	8000b34 <adc_read>
 80008fe:	4603      	mov	r3, r0
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff2f 	bl	8000764 <__aeabi_ui2f>
 8000906:	4603      	mov	r3, r0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24

        sprintf(msg,"ADC-Value: %.2f\r\n",adc_val);
 800090a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800090c:	f7ff fe1c 	bl	8000548 <__aeabi_f2d>
 8000910:	4602      	mov	r2, r0
 8000912:	460b      	mov	r3, r1
 8000914:	1d38      	adds	r0, r7, #4
 8000916:	4909      	ldr	r1, [pc, #36]	@ (800093c <main+0x5c>)
 8000918:	f000 fd06 	bl	8001328 <siprintf>
        USART_SendData(&usart2_handle, (uint8_t*) msg, strlen(msg));
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fc56 	bl	80001d0 <strlen>
 8000924:	4602      	mov	r2, r0
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <main+0x60>)
 800092c:	f000 fbd1 	bl	80010d2 <USART_SendData>

        delay();
 8000930:	f7ff ffc0 	bl	80008b4 <delay>
        adc_val = adc_read();
 8000934:	bf00      	nop
 8000936:	e7e0      	b.n	80008fa <main+0x1a>
 8000938:	40004400 	.word	0x40004400
 800093c:	08001b24 	.word	0x08001b24
 8000940:	2000006c 	.word	0x2000006c

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	@ (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	@ (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f000 fd12 	bl	800139c <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20018000 	.word	0x20018000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	20000090 	.word	0x20000090
 80009ac:	200001e0 	.word	0x200001e0

080009b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b0:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490d      	ldr	r1, [pc, #52]	@ (80009f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0d      	ldr	r2, [pc, #52]	@ (80009f4 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0a      	ldr	r4, [pc, #40]	@ (80009fc <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80009de:	f000 fce3 	bl	80013a8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80009e2:	f7ff ff7d 	bl	80008e0 <main>

080009e6 <LoopForever>:

LoopForever:
  b LoopForever
 80009e6:	e7fe      	b.n	80009e6 <LoopForever>
  ldr   r0, =_estack
 80009e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80009f4:	08001b7c 	.word	0x08001b7c
  ldr r2, =_sbss
 80009f8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80009fc:	200001dc 	.word	0x200001dc

08000a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_2_IRQHandler>

08000a02 <delay1>:
#include "stm32l4xx.h"


void delay1(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
    // Short delay
	for (volatile int i = 0; i < 1000; i++);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	e002      	b.n	8000a14 <delay1+0x12>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3301      	adds	r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a1a:	dbf8      	blt.n	8000a0e <delay1+0xc>
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <adc_init>:

void adc_init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    // --- Step 1: Enable peripheral clocks ---
    GPIOA_PCLK_EN();                       // GPIOA clock
 8000a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b28 <adc_init+0x100>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a30:	4a3d      	ldr	r2, [pc, #244]	@ (8000b28 <adc_init+0x100>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;     // ADC1 clock
 8000a38:	4b3b      	ldr	r3, [pc, #236]	@ (8000b28 <adc_init+0x100>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3c:	4a3a      	ldr	r2, [pc, #232]	@ (8000b28 <adc_init+0x100>)
 8000a3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a42:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // --- Step 2: Configure PA0 as ADC input (channel 5) ---
    GPIOA->MODER |= (3U << (0 * 2));       // Analog mode
 8000a44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a4e:	f043 0303 	orr.w	r3, r3, #3
 8000a52:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (0 * 2));      // No pull-up/pull-down
 8000a54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a5e:	f023 0303 	bic.w	r3, r3, #3
 8000a62:	60d3      	str	r3, [r2, #12]
    GPIOA->ASCR  |= (1U << 0);             // Enable analog switch
 8000a64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // --- Step 3: Set ADC common clock ---
    ADCOM->CCR &= ~ADC_CCR_CKMODE;
 8000a74:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <adc_init+0x104>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	4a2c      	ldr	r2, [pc, #176]	@ (8000b2c <adc_init+0x104>)
 8000a7a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000a7e:	6093      	str	r3, [r2, #8]
    ADCOM->CCR |= ADC_CCR_CKMODE_DIV1;     // Clock = HCLK / 1
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <adc_init+0x104>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	4a29      	ldr	r2, [pc, #164]	@ (8000b2c <adc_init+0x104>)
 8000a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a8a:	6093      	str	r3, [r2, #8]

    // --- Step 4: Power up ADC ---
    ADC1->CR &= ~ADC_CR_DEEPPWD;           // Disable deep power-down
 8000a8c:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <adc_init+0x108>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	4a27      	ldr	r2, [pc, #156]	@ (8000b30 <adc_init+0x108>)
 8000a92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000a96:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN;           // Enable voltage regulator
 8000a98:	4b25      	ldr	r3, [pc, #148]	@ (8000b30 <adc_init+0x108>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4a24      	ldr	r2, [pc, #144]	@ (8000b30 <adc_init+0x108>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6093      	str	r3, [r2, #8]
    delay1();                              // Wait for regulator
 8000aa4:	f7ff ffad 	bl	8000a02 <delay1>

    // --- Step 5: Calibrate ADC ---
    ADC1->CR |= ADC_CR_ADCAL;
 8000aa8:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <adc_init+0x108>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	4a20      	ldr	r2, [pc, #128]	@ (8000b30 <adc_init+0x108>)
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ab2:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL);       // Wait until calibration ends
 8000ab4:	bf00      	nop
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <adc_init+0x108>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	dbfb      	blt.n	8000ab6 <adc_init+0x8e>

    // --- Step 6: Configure sampling time for channel 5 ---
    ADC1->SMPR1 &= ~(0x7U << (5 * 3));
 8000abe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <adc_init+0x108>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <adc_init+0x108>)
 8000ac4:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 8000ac8:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |=  (0x2U << (5 * 3));     // 12.5 ADC cycles
 8000aca:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <adc_init+0x108>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a18      	ldr	r2, [pc, #96]	@ (8000b30 <adc_init+0x108>)
 8000ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ad4:	6153      	str	r3, [r2, #20]

    // --- Step 7: Configure sequence (1 conversion, channel 5) ---
    ADC1->SQR1 &= ~ADC_SQR1_L;             // Sequence length = 1
 8000ad6:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <adc_init+0x108>)
 8000ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ada:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <adc_init+0x108>)
 8000adc:	f023 030f 	bic.w	r3, r3, #15
 8000ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ADC1->SQR1 &= ~(0x1FU << 6U);          // Clear SQ1
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <adc_init+0x108>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <adc_init+0x108>)
 8000ae8:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8000aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ADC1->SQR1 |=  (5U << 6U);             // SQ1 = channel 5
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <adc_init+0x108>)
 8000af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000af2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <adc_init+0x108>)
 8000af4:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8000af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // --- Step 8: Enable ADC ---
    ADC1->ISR |= ADC_ISR_ADRDY;            // Clear ready flag
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <adc_init+0x108>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a0c      	ldr	r2, [pc, #48]	@ (8000b30 <adc_init+0x108>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6013      	str	r3, [r2, #0]
    ADC1->CR  |= ADC_CR_ADEN;              // Enable ADC
 8000b06:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <adc_init+0x108>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	4a09      	ldr	r2, [pc, #36]	@ (8000b30 <adc_init+0x108>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY));  // Wait until ADC is ready
 8000b12:	bf00      	nop
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <adc_init+0x108>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f9      	beq.n	8000b14 <adc_init+0xec>
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	50040300 	.word	0x50040300
 8000b30:	50040000 	.word	0x50040000

08000b34 <adc_read>:
    ADC1->CFGR |= (1 << 13);   // Continuous conversion mode
    ADC1->CR   |= ADC_CR_ADSTART; // Start conversion
}

uint32_t adc_read(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
    while (!(ADC1->ISR & ADC_ISR_EOC)); // Wait for conversion to complete
 8000b38:	bf00      	nop
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <adc_read+0x20>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f9      	beq.n	8000b3a <adc_read+0x6>
    return ADC1->DR;                    // Return data register value
 8000b46:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <adc_read+0x20>)
 8000b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	50040000 	.word	0x50040000

08000b58 <GPIO_Init>:

/* Initialization and de-initialization */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	795b      	ldrb	r3, [r3, #5]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d822      	bhi.n	8000bb2 <GPIO_Init+0x5a>
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	795b      	ldrb	r3, [r3, #5]
 8000b70:	461a      	mov	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	791b      	ldrb	r3, [r3, #4]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	791b      	ldrb	r3, [r3, #4]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	4619      	mov	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	400a      	ands	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]
			pGPIOHandle ->pGPIOx->MODER |= temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6819      	ldr	r1, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
			temp=0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e0e1      	b.n	8000d76 <GPIO_Init+0x21e>
		}
		else
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	795b      	ldrb	r3, [r3, #5]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	791b      	ldrb	r3, [r3, #4]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
					pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	4619      	mov	r1, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	400a      	ands	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]
					pGPIOHandle ->pGPIOx->MODER |= temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6819      	ldr	r1, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]
					temp=0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
			if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	795b      	ldrb	r3, [r3, #5]
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d117      	bne.n	8000c2e <GPIO_Init+0xd6>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000bfe:	4b47      	ldr	r3, [pc, #284]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	7912      	ldrb	r2, [r2, #4]
 8000c06:	4611      	mov	r1, r2
 8000c08:	2201      	movs	r2, #1
 8000c0a:	408a      	lsls	r2, r1
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4a43      	ldr	r2, [pc, #268]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c10:	430b      	orrs	r3, r1
 8000c12:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c14:	4b41      	ldr	r3, [pc, #260]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	7912      	ldrb	r2, [r2, #4]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	2201      	movs	r2, #1
 8000c20:	408a      	lsls	r2, r1
 8000c22:	43d2      	mvns	r2, r2
 8000c24:	4611      	mov	r1, r2
 8000c26:	4a3d      	ldr	r2, [pc, #244]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c28:	400b      	ands	r3, r1
 8000c2a:	6093      	str	r3, [r2, #8]
 8000c2c:	e035      	b.n	8000c9a <GPIO_Init+0x142>
					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	795b      	ldrb	r3, [r3, #5]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d117      	bne.n	8000c66 <GPIO_Init+0x10e>
					{
						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000c36:	4b39      	ldr	r3, [pc, #228]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	7912      	ldrb	r2, [r2, #4]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	2201      	movs	r2, #1
 8000c42:	408a      	lsls	r2, r1
 8000c44:	4611      	mov	r1, r2
 8000c46:	4a35      	ldr	r2, [pc, #212]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	6093      	str	r3, [r2, #8]

						EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c4c:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	7912      	ldrb	r2, [r2, #4]
 8000c54:	4611      	mov	r1, r2
 8000c56:	2201      	movs	r2, #1
 8000c58:	408a      	lsls	r2, r1
 8000c5a:	43d2      	mvns	r2, r2
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c60:	400b      	ands	r3, r1
 8000c62:	60d3      	str	r3, [r2, #12]
 8000c64:	e019      	b.n	8000c9a <GPIO_Init+0x142>

					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	795b      	ldrb	r3, [r3, #5]
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d115      	bne.n	8000c9a <GPIO_Init+0x142>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	7912      	ldrb	r2, [r2, #4]
 8000c76:	4611      	mov	r1, r2
 8000c78:	2201      	movs	r2, #1
 8000c7a:	408a      	lsls	r2, r1
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c80:	430b      	orrs	r3, r1
 8000c82:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000c84:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	7912      	ldrb	r2, [r2, #4]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	2201      	movs	r2, #1
 8000c90:	408a      	lsls	r2, r1
 8000c92:	4611      	mov	r1, r2
 8000c94:	4a21      	ldr	r2, [pc, #132]	@ (8000d1c <GPIO_Init+0x1c4>)
 8000c96:	430b      	orrs	r3, r1
 8000c98:	6093      	str	r3, [r2, #8]
					}
				 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	791b      	ldrb	r3, [r3, #4]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	74fb      	strb	r3, [r7, #19]
				 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	791b      	ldrb	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	74bb      	strb	r3, [r7, #18]
				 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cb4:	d042      	beq.n	8000d3c <GPIO_Init+0x1e4>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a19      	ldr	r2, [pc, #100]	@ (8000d20 <GPIO_Init+0x1c8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d02b      	beq.n	8000d18 <GPIO_Init+0x1c0>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <GPIO_Init+0x1cc>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d024      	beq.n	8000d14 <GPIO_Init+0x1bc>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a16      	ldr	r2, [pc, #88]	@ (8000d28 <GPIO_Init+0x1d0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d01d      	beq.n	8000d10 <GPIO_Init+0x1b8>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <GPIO_Init+0x1d4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d016      	beq.n	8000d0c <GPIO_Init+0x1b4>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a13      	ldr	r2, [pc, #76]	@ (8000d30 <GPIO_Init+0x1d8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d00f      	beq.n	8000d08 <GPIO_Init+0x1b0>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a11      	ldr	r2, [pc, #68]	@ (8000d34 <GPIO_Init+0x1dc>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d008      	beq.n	8000d04 <GPIO_Init+0x1ac>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <GPIO_Init+0x1e0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d101      	bne.n	8000d00 <GPIO_Init+0x1a8>
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	e01e      	b.n	8000d3e <GPIO_Init+0x1e6>
 8000d00:	2300      	movs	r3, #0
 8000d02:	e01c      	b.n	8000d3e <GPIO_Init+0x1e6>
 8000d04:	2306      	movs	r3, #6
 8000d06:	e01a      	b.n	8000d3e <GPIO_Init+0x1e6>
 8000d08:	2305      	movs	r3, #5
 8000d0a:	e018      	b.n	8000d3e <GPIO_Init+0x1e6>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e016      	b.n	8000d3e <GPIO_Init+0x1e6>
 8000d10:	2303      	movs	r3, #3
 8000d12:	e014      	b.n	8000d3e <GPIO_Init+0x1e6>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e012      	b.n	8000d3e <GPIO_Init+0x1e6>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e010      	b.n	8000d3e <GPIO_Init+0x1e6>
 8000d1c:	40010400 	.word	0x40010400
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	48001000 	.word	0x48001000
 8000d30:	48001400 	.word	0x48001400
 8000d34:	48001800 	.word	0x48001800
 8000d38:	48001c00 	.word	0x48001c00
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	747b      	strb	r3, [r7, #17]
				 SYSCFG_PCLK_EN();
 8000d40:	4b5e      	ldr	r3, [pc, #376]	@ (8000ebc <GPIO_Init+0x364>)
 8000d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d44:	4a5d      	ldr	r2, [pc, #372]	@ (8000ebc <GPIO_Init+0x364>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6613      	str	r3, [r2, #96]	@ 0x60
				 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 8000d4c:	7c7a      	ldrb	r2, [r7, #17]
 8000d4e:	7cbb      	ldrb	r3, [r7, #18]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	fa02 f103 	lsl.w	r1, r2, r3
 8000d56:	4a5a      	ldr	r2, [pc, #360]	@ (8000ec0 <GPIO_Init+0x368>)
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000d60:	4b58      	ldr	r3, [pc, #352]	@ (8000ec4 <GPIO_Init+0x36c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	7912      	ldrb	r2, [r2, #4]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	408a      	lsls	r2, r1
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4a54      	ldr	r2, [pc, #336]	@ (8000ec4 <GPIO_Init+0x36c>)
 8000d72:	430b      	orrs	r3, r1
 8000d74:	6013      	str	r3, [r2, #0]
		}

		temp=0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	799b      	ldrb	r3, [r3, #6]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	791b      	ldrb	r3, [r3, #4]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	791b      	ldrb	r3, [r3, #4]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2103      	movs	r1, #3
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	4619      	mov	r1, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	400a      	ands	r2, r1
 8000da8:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6899      	ldr	r1, [r3, #8]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	430a      	orrs	r2, r1
 8000db8:	609a      	str	r2, [r3, #8]
		temp=0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	79db      	ldrb	r3, [r3, #7]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	791b      	ldrb	r3, [r3, #4]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2103      	movs	r1, #3
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	4619      	mov	r1, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	400a      	ands	r2, r1
 8000dec:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68d9      	ldr	r1, [r3, #12]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	60da      	str	r2, [r3, #12]
		temp=0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7a1b      	ldrb	r3, [r3, #8]
 8000e06:	461a      	mov	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	791b      	ldrb	r3, [r3, #4]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	2301      	movs	r3, #1
 8000e20:	408b      	lsls	r3, r1
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4619      	mov	r1, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	400a      	ands	r2, r1
 8000e2c:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6859      	ldr	r1, [r3, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	605a      	str	r2, [r3, #4]
		temp=0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	795b      	ldrb	r3, [r3, #5]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d132      	bne.n	8000eb0 <GPIO_Init+0x358>
		{
			uint32_t temp1 ,temp2;
			temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	791b      	ldrb	r3, [r3, #4]
 8000e4e:	08db      	lsrs	r3, r3, #3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	60fb      	str	r3, [r7, #12]
			temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	791b      	ldrb	r3, [r3, #4]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	60bb      	str	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	3208      	adds	r2, #8
 8000e66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	210f      	movs	r1, #15
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4619      	mov	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4011      	ands	r1, r2
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	3208      	adds	r2, #8
 8000e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7a5b      	ldrb	r3, [r3, #9]
 8000e96:	4619      	mov	r1, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4311      	orrs	r1, r2
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}




}
 8000eb0:	bf00      	nop
 8000eb2:	371c      	adds	r7, #28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	40010400 	.word	0x40010400

08000ec8 <USART_PeriClockControl>:
#include"stm32l4xx_usart_driver.h"


void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d136      	bne.n	8000f48 <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a38      	ldr	r2, [pc, #224]	@ (8000fc0 <USART_PeriClockControl+0xf8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d106      	bne.n	8000ef0 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000ee2:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee6:	4a37      	ldr	r2, [pc, #220]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eec:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000eee:	e061      	b.n	8000fb4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a35      	ldr	r2, [pc, #212]	@ (8000fc8 <USART_PeriClockControl+0x100>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d106      	bne.n	8000f06 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000ef8:	4b32      	ldr	r3, [pc, #200]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efc:	4a31      	ldr	r2, [pc, #196]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f02:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f04:	e056      	b.n	8000fb4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a30      	ldr	r2, [pc, #192]	@ (8000fcc <USART_PeriClockControl+0x104>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d106      	bne.n	8000f1c <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f12:	4a2c      	ldr	r2, [pc, #176]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f18:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f1a:	e04b      	b.n	8000fb4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000fd0 <USART_PeriClockControl+0x108>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d106      	bne.n	8000f32 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000f24:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f28:	4a26      	ldr	r2, [pc, #152]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f2e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f30:	e040      	b.n	8000fb4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a27      	ldr	r2, [pc, #156]	@ (8000fd4 <USART_PeriClockControl+0x10c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d13c      	bne.n	8000fb4 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 8000f3a:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3e:	4a21      	ldr	r2, [pc, #132]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f44:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f46:	e035      	b.n	8000fb4 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc0 <USART_PeriClockControl+0xf8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d106      	bne.n	8000f5e <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000f50:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f54:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f5a:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000f5c:	e02a      	b.n	8000fb4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a19      	ldr	r2, [pc, #100]	@ (8000fc8 <USART_PeriClockControl+0x100>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d106      	bne.n	8000f74 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	4a16      	ldr	r2, [pc, #88]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000f70:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f72:	e01f      	b.n	8000fb4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a15      	ldr	r2, [pc, #84]	@ (8000fcc <USART_PeriClockControl+0x104>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d106      	bne.n	8000f8a <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f80:	4a10      	ldr	r2, [pc, #64]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f86:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f88:	e014      	b.n	8000fb4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a10      	ldr	r2, [pc, #64]	@ (8000fd0 <USART_PeriClockControl+0x108>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d106      	bne.n	8000fa0 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000f98:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000f9c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f9e:	e009      	b.n	8000fb4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd4 <USART_PeriClockControl+0x10c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d105      	bne.n	8000fb4 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fac:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <USART_PeriClockControl+0xfc>)
 8000fae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000fb2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	40004800 	.word	0x40004800
 8000fd0:	40004c00 	.word	0x40004c00
 8000fd4:	40005000 	.word	0x40005000

08000fd8 <USART_Init>:
}

*/

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]

		 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff6c 	bl	8000ec8 <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d104      	bne.n	8001002 <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	e010      	b.n	8001024 <USART_Init+0x4c>
		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	791b      	ldrb	r3, [r3, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d104      	bne.n	8001014 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e007      	b.n	8001024 <USART_Init+0x4c>

		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d103      	bne.n	8001024 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f043 030c 	orr.w	r3, r3, #12
 8001022:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7b5b      	ldrb	r3, [r3, #13]
 8001028:	031b      	lsls	r3, r3, #12
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7b9b      	ldrb	r3, [r3, #14]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d104      	bne.n	8001042 <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e00b      	b.n	800105a <USART_Init+0x82>

		}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7b9b      	ldrb	r3, [r3, #14]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d107      	bne.n	800105a <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001050:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001058:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	601a      	str	r2, [r3, #0]
		tempreg=0;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7b1b      	ldrb	r3, [r3, #12]
 800106a:	031b      	lsls	r3, r3, #12
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	605a      	str	r2, [r3, #4]

		tempreg=0;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7bdb      	ldrb	r3, [r3, #15]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d104      	bne.n	8001090 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e014      	b.n	80010ba <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7bdb      	ldrb	r3, [r3, #15]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d104      	bne.n	80010a2 <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e00b      	b.n	80010ba <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7bdb      	ldrb	r3, [r3, #15]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d107      	bne.n	80010ba <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010b0:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b8:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X23;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2223      	movs	r2, #35	@ 0x23
 80010c8:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e031      	b.n	8001148 <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80010e4:	bf00      	nop
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2180      	movs	r1, #128	@ 0x80
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f859 	bl	80011a4 <USART_GetFlagStatus>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f6      	beq.n	80010e6 <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	7b5b      	ldrb	r3, [r3, #13]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d118      	bne.n	8001132 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	7b9b      	ldrb	r3, [r3, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d106      	bne.n	800112a <USART_SendData+0x58>
			{
				pTxBuffer++;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	3301      	adds	r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3301      	adds	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	e00b      	b.n	8001142 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3301      	adds	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	e007      	b.n	8001142 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	3301      	adds	r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3c9      	bcc.n	80010e4 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8001150:	bf00      	nop
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2140      	movs	r1, #64	@ 0x40
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f823 	bl	80011a4 <USART_GetFlagStatus>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f6      	beq.n	8001152 <USART_SendData+0x80>
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <USART_PeripheralControl>:
}



void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d106      	bne.n	800118e <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	601a      	str	r2, [r3, #0]
	}else{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 800118c:	e005      	b.n	800119a <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 0201 	bic.w	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69da      	ldr	r2, [r3, #28]
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <sbrk_aligned>:
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	4e0f      	ldr	r6, [pc, #60]	@ (800120c <sbrk_aligned+0x40>)
 80011d0:	460c      	mov	r4, r1
 80011d2:	6831      	ldr	r1, [r6, #0]
 80011d4:	4605      	mov	r5, r0
 80011d6:	b911      	cbnz	r1, 80011de <sbrk_aligned+0x12>
 80011d8:	f000 f8d0 	bl	800137c <_sbrk_r>
 80011dc:	6030      	str	r0, [r6, #0]
 80011de:	4621      	mov	r1, r4
 80011e0:	4628      	mov	r0, r5
 80011e2:	f000 f8cb 	bl	800137c <_sbrk_r>
 80011e6:	1c43      	adds	r3, r0, #1
 80011e8:	d103      	bne.n	80011f2 <sbrk_aligned+0x26>
 80011ea:	f04f 34ff 	mov.w	r4, #4294967295
 80011ee:	4620      	mov	r0, r4
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
 80011f2:	1cc4      	adds	r4, r0, #3
 80011f4:	f024 0403 	bic.w	r4, r4, #3
 80011f8:	42a0      	cmp	r0, r4
 80011fa:	d0f8      	beq.n	80011ee <sbrk_aligned+0x22>
 80011fc:	1a21      	subs	r1, r4, r0
 80011fe:	4628      	mov	r0, r5
 8001200:	f000 f8bc 	bl	800137c <_sbrk_r>
 8001204:	3001      	adds	r0, #1
 8001206:	d1f2      	bne.n	80011ee <sbrk_aligned+0x22>
 8001208:	e7ef      	b.n	80011ea <sbrk_aligned+0x1e>
 800120a:	bf00      	nop
 800120c:	20000094 	.word	0x20000094

08001210 <_malloc_r>:
 8001210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001214:	1ccd      	adds	r5, r1, #3
 8001216:	f025 0503 	bic.w	r5, r5, #3
 800121a:	3508      	adds	r5, #8
 800121c:	2d0c      	cmp	r5, #12
 800121e:	bf38      	it	cc
 8001220:	250c      	movcc	r5, #12
 8001222:	2d00      	cmp	r5, #0
 8001224:	4606      	mov	r6, r0
 8001226:	db01      	blt.n	800122c <_malloc_r+0x1c>
 8001228:	42a9      	cmp	r1, r5
 800122a:	d904      	bls.n	8001236 <_malloc_r+0x26>
 800122c:	230c      	movs	r3, #12
 800122e:	6033      	str	r3, [r6, #0]
 8001230:	2000      	movs	r0, #0
 8001232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800130c <_malloc_r+0xfc>
 800123a:	f000 f869 	bl	8001310 <__malloc_lock>
 800123e:	f8d8 3000 	ldr.w	r3, [r8]
 8001242:	461c      	mov	r4, r3
 8001244:	bb44      	cbnz	r4, 8001298 <_malloc_r+0x88>
 8001246:	4629      	mov	r1, r5
 8001248:	4630      	mov	r0, r6
 800124a:	f7ff ffbf 	bl	80011cc <sbrk_aligned>
 800124e:	1c43      	adds	r3, r0, #1
 8001250:	4604      	mov	r4, r0
 8001252:	d158      	bne.n	8001306 <_malloc_r+0xf6>
 8001254:	f8d8 4000 	ldr.w	r4, [r8]
 8001258:	4627      	mov	r7, r4
 800125a:	2f00      	cmp	r7, #0
 800125c:	d143      	bne.n	80012e6 <_malloc_r+0xd6>
 800125e:	2c00      	cmp	r4, #0
 8001260:	d04b      	beq.n	80012fa <_malloc_r+0xea>
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	4639      	mov	r1, r7
 8001266:	4630      	mov	r0, r6
 8001268:	eb04 0903 	add.w	r9, r4, r3
 800126c:	f000 f886 	bl	800137c <_sbrk_r>
 8001270:	4581      	cmp	r9, r0
 8001272:	d142      	bne.n	80012fa <_malloc_r+0xea>
 8001274:	6821      	ldr	r1, [r4, #0]
 8001276:	1a6d      	subs	r5, r5, r1
 8001278:	4629      	mov	r1, r5
 800127a:	4630      	mov	r0, r6
 800127c:	f7ff ffa6 	bl	80011cc <sbrk_aligned>
 8001280:	3001      	adds	r0, #1
 8001282:	d03a      	beq.n	80012fa <_malloc_r+0xea>
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	442b      	add	r3, r5
 8001288:	6023      	str	r3, [r4, #0]
 800128a:	f8d8 3000 	ldr.w	r3, [r8]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	bb62      	cbnz	r2, 80012ec <_malloc_r+0xdc>
 8001292:	f8c8 7000 	str.w	r7, [r8]
 8001296:	e00f      	b.n	80012b8 <_malloc_r+0xa8>
 8001298:	6822      	ldr	r2, [r4, #0]
 800129a:	1b52      	subs	r2, r2, r5
 800129c:	d420      	bmi.n	80012e0 <_malloc_r+0xd0>
 800129e:	2a0b      	cmp	r2, #11
 80012a0:	d917      	bls.n	80012d2 <_malloc_r+0xc2>
 80012a2:	1961      	adds	r1, r4, r5
 80012a4:	42a3      	cmp	r3, r4
 80012a6:	6025      	str	r5, [r4, #0]
 80012a8:	bf18      	it	ne
 80012aa:	6059      	strne	r1, [r3, #4]
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	bf08      	it	eq
 80012b0:	f8c8 1000 	streq.w	r1, [r8]
 80012b4:	5162      	str	r2, [r4, r5]
 80012b6:	604b      	str	r3, [r1, #4]
 80012b8:	4630      	mov	r0, r6
 80012ba:	f000 f82f 	bl	800131c <__malloc_unlock>
 80012be:	f104 000b 	add.w	r0, r4, #11
 80012c2:	1d23      	adds	r3, r4, #4
 80012c4:	f020 0007 	bic.w	r0, r0, #7
 80012c8:	1ac2      	subs	r2, r0, r3
 80012ca:	bf1c      	itt	ne
 80012cc:	1a1b      	subne	r3, r3, r0
 80012ce:	50a3      	strne	r3, [r4, r2]
 80012d0:	e7af      	b.n	8001232 <_malloc_r+0x22>
 80012d2:	6862      	ldr	r2, [r4, #4]
 80012d4:	42a3      	cmp	r3, r4
 80012d6:	bf0c      	ite	eq
 80012d8:	f8c8 2000 	streq.w	r2, [r8]
 80012dc:	605a      	strne	r2, [r3, #4]
 80012de:	e7eb      	b.n	80012b8 <_malloc_r+0xa8>
 80012e0:	4623      	mov	r3, r4
 80012e2:	6864      	ldr	r4, [r4, #4]
 80012e4:	e7ae      	b.n	8001244 <_malloc_r+0x34>
 80012e6:	463c      	mov	r4, r7
 80012e8:	687f      	ldr	r7, [r7, #4]
 80012ea:	e7b6      	b.n	800125a <_malloc_r+0x4a>
 80012ec:	461a      	mov	r2, r3
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	42a3      	cmp	r3, r4
 80012f2:	d1fb      	bne.n	80012ec <_malloc_r+0xdc>
 80012f4:	2300      	movs	r3, #0
 80012f6:	6053      	str	r3, [r2, #4]
 80012f8:	e7de      	b.n	80012b8 <_malloc_r+0xa8>
 80012fa:	230c      	movs	r3, #12
 80012fc:	6033      	str	r3, [r6, #0]
 80012fe:	4630      	mov	r0, r6
 8001300:	f000 f80c 	bl	800131c <__malloc_unlock>
 8001304:	e794      	b.n	8001230 <_malloc_r+0x20>
 8001306:	6005      	str	r5, [r0, #0]
 8001308:	e7d6      	b.n	80012b8 <_malloc_r+0xa8>
 800130a:	bf00      	nop
 800130c:	20000098 	.word	0x20000098

08001310 <__malloc_lock>:
 8001310:	4801      	ldr	r0, [pc, #4]	@ (8001318 <__malloc_lock+0x8>)
 8001312:	f000 b86d 	b.w	80013f0 <__retarget_lock_acquire_recursive>
 8001316:	bf00      	nop
 8001318:	200001d8 	.word	0x200001d8

0800131c <__malloc_unlock>:
 800131c:	4801      	ldr	r0, [pc, #4]	@ (8001324 <__malloc_unlock+0x8>)
 800131e:	f000 b868 	b.w	80013f2 <__retarget_lock_release_recursive>
 8001322:	bf00      	nop
 8001324:	200001d8 	.word	0x200001d8

08001328 <siprintf>:
 8001328:	b40e      	push	{r1, r2, r3}
 800132a:	b510      	push	{r4, lr}
 800132c:	b09d      	sub	sp, #116	@ 0x74
 800132e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001330:	9002      	str	r0, [sp, #8]
 8001332:	9006      	str	r0, [sp, #24]
 8001334:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001338:	480a      	ldr	r0, [pc, #40]	@ (8001364 <siprintf+0x3c>)
 800133a:	9107      	str	r1, [sp, #28]
 800133c:	9104      	str	r1, [sp, #16]
 800133e:	490a      	ldr	r1, [pc, #40]	@ (8001368 <siprintf+0x40>)
 8001340:	f853 2b04 	ldr.w	r2, [r3], #4
 8001344:	9105      	str	r1, [sp, #20]
 8001346:	2400      	movs	r4, #0
 8001348:	a902      	add	r1, sp, #8
 800134a:	6800      	ldr	r0, [r0, #0]
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001350:	f000 f904 	bl	800155c <_svfiprintf_r>
 8001354:	9b02      	ldr	r3, [sp, #8]
 8001356:	701c      	strb	r4, [r3, #0]
 8001358:	b01d      	add	sp, #116	@ 0x74
 800135a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800135e:	b003      	add	sp, #12
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000
 8001368:	ffff0208 	.word	0xffff0208

0800136c <memset>:
 800136c:	4402      	add	r2, r0
 800136e:	4603      	mov	r3, r0
 8001370:	4293      	cmp	r3, r2
 8001372:	d100      	bne.n	8001376 <memset+0xa>
 8001374:	4770      	bx	lr
 8001376:	f803 1b01 	strb.w	r1, [r3], #1
 800137a:	e7f9      	b.n	8001370 <memset+0x4>

0800137c <_sbrk_r>:
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	4d06      	ldr	r5, [pc, #24]	@ (8001398 <_sbrk_r+0x1c>)
 8001380:	2300      	movs	r3, #0
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	602b      	str	r3, [r5, #0]
 8001388:	f7ff fadc 	bl	8000944 <_sbrk>
 800138c:	1c43      	adds	r3, r0, #1
 800138e:	d102      	bne.n	8001396 <_sbrk_r+0x1a>
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	b103      	cbz	r3, 8001396 <_sbrk_r+0x1a>
 8001394:	6023      	str	r3, [r4, #0]
 8001396:	bd38      	pop	{r3, r4, r5, pc}
 8001398:	200001d4 	.word	0x200001d4

0800139c <__errno>:
 800139c:	4b01      	ldr	r3, [pc, #4]	@ (80013a4 <__errno+0x8>)
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000

080013a8 <__libc_init_array>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	4d0d      	ldr	r5, [pc, #52]	@ (80013e0 <__libc_init_array+0x38>)
 80013ac:	4c0d      	ldr	r4, [pc, #52]	@ (80013e4 <__libc_init_array+0x3c>)
 80013ae:	1b64      	subs	r4, r4, r5
 80013b0:	10a4      	asrs	r4, r4, #2
 80013b2:	2600      	movs	r6, #0
 80013b4:	42a6      	cmp	r6, r4
 80013b6:	d109      	bne.n	80013cc <__libc_init_array+0x24>
 80013b8:	4d0b      	ldr	r5, [pc, #44]	@ (80013e8 <__libc_init_array+0x40>)
 80013ba:	4c0c      	ldr	r4, [pc, #48]	@ (80013ec <__libc_init_array+0x44>)
 80013bc:	f000 fba6 	bl	8001b0c <_init>
 80013c0:	1b64      	subs	r4, r4, r5
 80013c2:	10a4      	asrs	r4, r4, #2
 80013c4:	2600      	movs	r6, #0
 80013c6:	42a6      	cmp	r6, r4
 80013c8:	d105      	bne.n	80013d6 <__libc_init_array+0x2e>
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d0:	4798      	blx	r3
 80013d2:	3601      	adds	r6, #1
 80013d4:	e7ee      	b.n	80013b4 <__libc_init_array+0xc>
 80013d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013da:	4798      	blx	r3
 80013dc:	3601      	adds	r6, #1
 80013de:	e7f2      	b.n	80013c6 <__libc_init_array+0x1e>
 80013e0:	08001b74 	.word	0x08001b74
 80013e4:	08001b74 	.word	0x08001b74
 80013e8:	08001b74 	.word	0x08001b74
 80013ec:	08001b78 	.word	0x08001b78

080013f0 <__retarget_lock_acquire_recursive>:
 80013f0:	4770      	bx	lr

080013f2 <__retarget_lock_release_recursive>:
 80013f2:	4770      	bx	lr

080013f4 <memcpy>:
 80013f4:	440a      	add	r2, r1
 80013f6:	4291      	cmp	r1, r2
 80013f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80013fc:	d100      	bne.n	8001400 <memcpy+0xc>
 80013fe:	4770      	bx	lr
 8001400:	b510      	push	{r4, lr}
 8001402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800140a:	4291      	cmp	r1, r2
 800140c:	d1f9      	bne.n	8001402 <memcpy+0xe>
 800140e:	bd10      	pop	{r4, pc}

08001410 <_free_r>:
 8001410:	b538      	push	{r3, r4, r5, lr}
 8001412:	4605      	mov	r5, r0
 8001414:	2900      	cmp	r1, #0
 8001416:	d041      	beq.n	800149c <_free_r+0x8c>
 8001418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800141c:	1f0c      	subs	r4, r1, #4
 800141e:	2b00      	cmp	r3, #0
 8001420:	bfb8      	it	lt
 8001422:	18e4      	addlt	r4, r4, r3
 8001424:	f7ff ff74 	bl	8001310 <__malloc_lock>
 8001428:	4a1d      	ldr	r2, [pc, #116]	@ (80014a0 <_free_r+0x90>)
 800142a:	6813      	ldr	r3, [r2, #0]
 800142c:	b933      	cbnz	r3, 800143c <_free_r+0x2c>
 800142e:	6063      	str	r3, [r4, #4]
 8001430:	6014      	str	r4, [r2, #0]
 8001432:	4628      	mov	r0, r5
 8001434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001438:	f7ff bf70 	b.w	800131c <__malloc_unlock>
 800143c:	42a3      	cmp	r3, r4
 800143e:	d908      	bls.n	8001452 <_free_r+0x42>
 8001440:	6820      	ldr	r0, [r4, #0]
 8001442:	1821      	adds	r1, r4, r0
 8001444:	428b      	cmp	r3, r1
 8001446:	bf01      	itttt	eq
 8001448:	6819      	ldreq	r1, [r3, #0]
 800144a:	685b      	ldreq	r3, [r3, #4]
 800144c:	1809      	addeq	r1, r1, r0
 800144e:	6021      	streq	r1, [r4, #0]
 8001450:	e7ed      	b.n	800142e <_free_r+0x1e>
 8001452:	461a      	mov	r2, r3
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	b10b      	cbz	r3, 800145c <_free_r+0x4c>
 8001458:	42a3      	cmp	r3, r4
 800145a:	d9fa      	bls.n	8001452 <_free_r+0x42>
 800145c:	6811      	ldr	r1, [r2, #0]
 800145e:	1850      	adds	r0, r2, r1
 8001460:	42a0      	cmp	r0, r4
 8001462:	d10b      	bne.n	800147c <_free_r+0x6c>
 8001464:	6820      	ldr	r0, [r4, #0]
 8001466:	4401      	add	r1, r0
 8001468:	1850      	adds	r0, r2, r1
 800146a:	4283      	cmp	r3, r0
 800146c:	6011      	str	r1, [r2, #0]
 800146e:	d1e0      	bne.n	8001432 <_free_r+0x22>
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	6053      	str	r3, [r2, #4]
 8001476:	4408      	add	r0, r1
 8001478:	6010      	str	r0, [r2, #0]
 800147a:	e7da      	b.n	8001432 <_free_r+0x22>
 800147c:	d902      	bls.n	8001484 <_free_r+0x74>
 800147e:	230c      	movs	r3, #12
 8001480:	602b      	str	r3, [r5, #0]
 8001482:	e7d6      	b.n	8001432 <_free_r+0x22>
 8001484:	6820      	ldr	r0, [r4, #0]
 8001486:	1821      	adds	r1, r4, r0
 8001488:	428b      	cmp	r3, r1
 800148a:	bf04      	itt	eq
 800148c:	6819      	ldreq	r1, [r3, #0]
 800148e:	685b      	ldreq	r3, [r3, #4]
 8001490:	6063      	str	r3, [r4, #4]
 8001492:	bf04      	itt	eq
 8001494:	1809      	addeq	r1, r1, r0
 8001496:	6021      	streq	r1, [r4, #0]
 8001498:	6054      	str	r4, [r2, #4]
 800149a:	e7ca      	b.n	8001432 <_free_r+0x22>
 800149c:	bd38      	pop	{r3, r4, r5, pc}
 800149e:	bf00      	nop
 80014a0:	20000098 	.word	0x20000098

080014a4 <__ssputs_r>:
 80014a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014a8:	688e      	ldr	r6, [r1, #8]
 80014aa:	461f      	mov	r7, r3
 80014ac:	42be      	cmp	r6, r7
 80014ae:	680b      	ldr	r3, [r1, #0]
 80014b0:	4682      	mov	sl, r0
 80014b2:	460c      	mov	r4, r1
 80014b4:	4690      	mov	r8, r2
 80014b6:	d82d      	bhi.n	8001514 <__ssputs_r+0x70>
 80014b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80014bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80014c0:	d026      	beq.n	8001510 <__ssputs_r+0x6c>
 80014c2:	6965      	ldr	r5, [r4, #20]
 80014c4:	6909      	ldr	r1, [r1, #16]
 80014c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80014ca:	eba3 0901 	sub.w	r9, r3, r1
 80014ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80014d2:	1c7b      	adds	r3, r7, #1
 80014d4:	444b      	add	r3, r9
 80014d6:	106d      	asrs	r5, r5, #1
 80014d8:	429d      	cmp	r5, r3
 80014da:	bf38      	it	cc
 80014dc:	461d      	movcc	r5, r3
 80014de:	0553      	lsls	r3, r2, #21
 80014e0:	d527      	bpl.n	8001532 <__ssputs_r+0x8e>
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7ff fe94 	bl	8001210 <_malloc_r>
 80014e8:	4606      	mov	r6, r0
 80014ea:	b360      	cbz	r0, 8001546 <__ssputs_r+0xa2>
 80014ec:	6921      	ldr	r1, [r4, #16]
 80014ee:	464a      	mov	r2, r9
 80014f0:	f7ff ff80 	bl	80013f4 <memcpy>
 80014f4:	89a3      	ldrh	r3, [r4, #12]
 80014f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80014fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014fe:	81a3      	strh	r3, [r4, #12]
 8001500:	6126      	str	r6, [r4, #16]
 8001502:	6165      	str	r5, [r4, #20]
 8001504:	444e      	add	r6, r9
 8001506:	eba5 0509 	sub.w	r5, r5, r9
 800150a:	6026      	str	r6, [r4, #0]
 800150c:	60a5      	str	r5, [r4, #8]
 800150e:	463e      	mov	r6, r7
 8001510:	42be      	cmp	r6, r7
 8001512:	d900      	bls.n	8001516 <__ssputs_r+0x72>
 8001514:	463e      	mov	r6, r7
 8001516:	6820      	ldr	r0, [r4, #0]
 8001518:	4632      	mov	r2, r6
 800151a:	4641      	mov	r1, r8
 800151c:	f000 faa6 	bl	8001a6c <memmove>
 8001520:	68a3      	ldr	r3, [r4, #8]
 8001522:	1b9b      	subs	r3, r3, r6
 8001524:	60a3      	str	r3, [r4, #8]
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	4433      	add	r3, r6
 800152a:	6023      	str	r3, [r4, #0]
 800152c:	2000      	movs	r0, #0
 800152e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001532:	462a      	mov	r2, r5
 8001534:	f000 fab4 	bl	8001aa0 <_realloc_r>
 8001538:	4606      	mov	r6, r0
 800153a:	2800      	cmp	r0, #0
 800153c:	d1e0      	bne.n	8001500 <__ssputs_r+0x5c>
 800153e:	6921      	ldr	r1, [r4, #16]
 8001540:	4650      	mov	r0, sl
 8001542:	f7ff ff65 	bl	8001410 <_free_r>
 8001546:	230c      	movs	r3, #12
 8001548:	f8ca 3000 	str.w	r3, [sl]
 800154c:	89a3      	ldrh	r3, [r4, #12]
 800154e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001552:	81a3      	strh	r3, [r4, #12]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	e7e9      	b.n	800152e <__ssputs_r+0x8a>
	...

0800155c <_svfiprintf_r>:
 800155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001560:	4698      	mov	r8, r3
 8001562:	898b      	ldrh	r3, [r1, #12]
 8001564:	061b      	lsls	r3, r3, #24
 8001566:	b09d      	sub	sp, #116	@ 0x74
 8001568:	4607      	mov	r7, r0
 800156a:	460d      	mov	r5, r1
 800156c:	4614      	mov	r4, r2
 800156e:	d510      	bpl.n	8001592 <_svfiprintf_r+0x36>
 8001570:	690b      	ldr	r3, [r1, #16]
 8001572:	b973      	cbnz	r3, 8001592 <_svfiprintf_r+0x36>
 8001574:	2140      	movs	r1, #64	@ 0x40
 8001576:	f7ff fe4b 	bl	8001210 <_malloc_r>
 800157a:	6028      	str	r0, [r5, #0]
 800157c:	6128      	str	r0, [r5, #16]
 800157e:	b930      	cbnz	r0, 800158e <_svfiprintf_r+0x32>
 8001580:	230c      	movs	r3, #12
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	b01d      	add	sp, #116	@ 0x74
 800158a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800158e:	2340      	movs	r3, #64	@ 0x40
 8001590:	616b      	str	r3, [r5, #20]
 8001592:	2300      	movs	r3, #0
 8001594:	9309      	str	r3, [sp, #36]	@ 0x24
 8001596:	2320      	movs	r3, #32
 8001598:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800159c:	f8cd 800c 	str.w	r8, [sp, #12]
 80015a0:	2330      	movs	r3, #48	@ 0x30
 80015a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001740 <_svfiprintf_r+0x1e4>
 80015a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80015aa:	f04f 0901 	mov.w	r9, #1
 80015ae:	4623      	mov	r3, r4
 80015b0:	469a      	mov	sl, r3
 80015b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015b6:	b10a      	cbz	r2, 80015bc <_svfiprintf_r+0x60>
 80015b8:	2a25      	cmp	r2, #37	@ 0x25
 80015ba:	d1f9      	bne.n	80015b0 <_svfiprintf_r+0x54>
 80015bc:	ebba 0b04 	subs.w	fp, sl, r4
 80015c0:	d00b      	beq.n	80015da <_svfiprintf_r+0x7e>
 80015c2:	465b      	mov	r3, fp
 80015c4:	4622      	mov	r2, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	4638      	mov	r0, r7
 80015ca:	f7ff ff6b 	bl	80014a4 <__ssputs_r>
 80015ce:	3001      	adds	r0, #1
 80015d0:	f000 80a7 	beq.w	8001722 <_svfiprintf_r+0x1c6>
 80015d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80015d6:	445a      	add	r2, fp
 80015d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80015da:	f89a 3000 	ldrb.w	r3, [sl]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 809f 	beq.w	8001722 <_svfiprintf_r+0x1c6>
 80015e4:	2300      	movs	r3, #0
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015ee:	f10a 0a01 	add.w	sl, sl, #1
 80015f2:	9304      	str	r3, [sp, #16]
 80015f4:	9307      	str	r3, [sp, #28]
 80015f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80015fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80015fc:	4654      	mov	r4, sl
 80015fe:	2205      	movs	r2, #5
 8001600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001604:	484e      	ldr	r0, [pc, #312]	@ (8001740 <_svfiprintf_r+0x1e4>)
 8001606:	f7fe fdeb 	bl	80001e0 <memchr>
 800160a:	9a04      	ldr	r2, [sp, #16]
 800160c:	b9d8      	cbnz	r0, 8001646 <_svfiprintf_r+0xea>
 800160e:	06d0      	lsls	r0, r2, #27
 8001610:	bf44      	itt	mi
 8001612:	2320      	movmi	r3, #32
 8001614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001618:	0711      	lsls	r1, r2, #28
 800161a:	bf44      	itt	mi
 800161c:	232b      	movmi	r3, #43	@ 0x2b
 800161e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001622:	f89a 3000 	ldrb.w	r3, [sl]
 8001626:	2b2a      	cmp	r3, #42	@ 0x2a
 8001628:	d015      	beq.n	8001656 <_svfiprintf_r+0xfa>
 800162a:	9a07      	ldr	r2, [sp, #28]
 800162c:	4654      	mov	r4, sl
 800162e:	2000      	movs	r0, #0
 8001630:	f04f 0c0a 	mov.w	ip, #10
 8001634:	4621      	mov	r1, r4
 8001636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800163a:	3b30      	subs	r3, #48	@ 0x30
 800163c:	2b09      	cmp	r3, #9
 800163e:	d94b      	bls.n	80016d8 <_svfiprintf_r+0x17c>
 8001640:	b1b0      	cbz	r0, 8001670 <_svfiprintf_r+0x114>
 8001642:	9207      	str	r2, [sp, #28]
 8001644:	e014      	b.n	8001670 <_svfiprintf_r+0x114>
 8001646:	eba0 0308 	sub.w	r3, r0, r8
 800164a:	fa09 f303 	lsl.w	r3, r9, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	9304      	str	r3, [sp, #16]
 8001652:	46a2      	mov	sl, r4
 8001654:	e7d2      	b.n	80015fc <_svfiprintf_r+0xa0>
 8001656:	9b03      	ldr	r3, [sp, #12]
 8001658:	1d19      	adds	r1, r3, #4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	9103      	str	r1, [sp, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	bfbb      	ittet	lt
 8001662:	425b      	neglt	r3, r3
 8001664:	f042 0202 	orrlt.w	r2, r2, #2
 8001668:	9307      	strge	r3, [sp, #28]
 800166a:	9307      	strlt	r3, [sp, #28]
 800166c:	bfb8      	it	lt
 800166e:	9204      	strlt	r2, [sp, #16]
 8001670:	7823      	ldrb	r3, [r4, #0]
 8001672:	2b2e      	cmp	r3, #46	@ 0x2e
 8001674:	d10a      	bne.n	800168c <_svfiprintf_r+0x130>
 8001676:	7863      	ldrb	r3, [r4, #1]
 8001678:	2b2a      	cmp	r3, #42	@ 0x2a
 800167a:	d132      	bne.n	80016e2 <_svfiprintf_r+0x186>
 800167c:	9b03      	ldr	r3, [sp, #12]
 800167e:	1d1a      	adds	r2, r3, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	9203      	str	r2, [sp, #12]
 8001684:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001688:	3402      	adds	r4, #2
 800168a:	9305      	str	r3, [sp, #20]
 800168c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001744 <_svfiprintf_r+0x1e8>
 8001690:	7821      	ldrb	r1, [r4, #0]
 8001692:	2203      	movs	r2, #3
 8001694:	4650      	mov	r0, sl
 8001696:	f7fe fda3 	bl	80001e0 <memchr>
 800169a:	b138      	cbz	r0, 80016ac <_svfiprintf_r+0x150>
 800169c:	9b04      	ldr	r3, [sp, #16]
 800169e:	eba0 000a 	sub.w	r0, r0, sl
 80016a2:	2240      	movs	r2, #64	@ 0x40
 80016a4:	4082      	lsls	r2, r0
 80016a6:	4313      	orrs	r3, r2
 80016a8:	3401      	adds	r4, #1
 80016aa:	9304      	str	r3, [sp, #16]
 80016ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016b0:	4825      	ldr	r0, [pc, #148]	@ (8001748 <_svfiprintf_r+0x1ec>)
 80016b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80016b6:	2206      	movs	r2, #6
 80016b8:	f7fe fd92 	bl	80001e0 <memchr>
 80016bc:	2800      	cmp	r0, #0
 80016be:	d036      	beq.n	800172e <_svfiprintf_r+0x1d2>
 80016c0:	4b22      	ldr	r3, [pc, #136]	@ (800174c <_svfiprintf_r+0x1f0>)
 80016c2:	bb1b      	cbnz	r3, 800170c <_svfiprintf_r+0x1b0>
 80016c4:	9b03      	ldr	r3, [sp, #12]
 80016c6:	3307      	adds	r3, #7
 80016c8:	f023 0307 	bic.w	r3, r3, #7
 80016cc:	3308      	adds	r3, #8
 80016ce:	9303      	str	r3, [sp, #12]
 80016d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80016d2:	4433      	add	r3, r6
 80016d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80016d6:	e76a      	b.n	80015ae <_svfiprintf_r+0x52>
 80016d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80016dc:	460c      	mov	r4, r1
 80016de:	2001      	movs	r0, #1
 80016e0:	e7a8      	b.n	8001634 <_svfiprintf_r+0xd8>
 80016e2:	2300      	movs	r3, #0
 80016e4:	3401      	adds	r4, #1
 80016e6:	9305      	str	r3, [sp, #20]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 0c0a 	mov.w	ip, #10
 80016ee:	4620      	mov	r0, r4
 80016f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016f4:	3a30      	subs	r2, #48	@ 0x30
 80016f6:	2a09      	cmp	r2, #9
 80016f8:	d903      	bls.n	8001702 <_svfiprintf_r+0x1a6>
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0c6      	beq.n	800168c <_svfiprintf_r+0x130>
 80016fe:	9105      	str	r1, [sp, #20]
 8001700:	e7c4      	b.n	800168c <_svfiprintf_r+0x130>
 8001702:	fb0c 2101 	mla	r1, ip, r1, r2
 8001706:	4604      	mov	r4, r0
 8001708:	2301      	movs	r3, #1
 800170a:	e7f0      	b.n	80016ee <_svfiprintf_r+0x192>
 800170c:	ab03      	add	r3, sp, #12
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	462a      	mov	r2, r5
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <_svfiprintf_r+0x1f4>)
 8001714:	a904      	add	r1, sp, #16
 8001716:	4638      	mov	r0, r7
 8001718:	f3af 8000 	nop.w
 800171c:	1c42      	adds	r2, r0, #1
 800171e:	4606      	mov	r6, r0
 8001720:	d1d6      	bne.n	80016d0 <_svfiprintf_r+0x174>
 8001722:	89ab      	ldrh	r3, [r5, #12]
 8001724:	065b      	lsls	r3, r3, #25
 8001726:	f53f af2d 	bmi.w	8001584 <_svfiprintf_r+0x28>
 800172a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800172c:	e72c      	b.n	8001588 <_svfiprintf_r+0x2c>
 800172e:	ab03      	add	r3, sp, #12
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	462a      	mov	r2, r5
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <_svfiprintf_r+0x1f4>)
 8001736:	a904      	add	r1, sp, #16
 8001738:	4638      	mov	r0, r7
 800173a:	f000 f879 	bl	8001830 <_printf_i>
 800173e:	e7ed      	b.n	800171c <_svfiprintf_r+0x1c0>
 8001740:	08001b36 	.word	0x08001b36
 8001744:	08001b3c 	.word	0x08001b3c
 8001748:	08001b40 	.word	0x08001b40
 800174c:	00000000 	.word	0x00000000
 8001750:	080014a5 	.word	0x080014a5

08001754 <_printf_common>:
 8001754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001758:	4616      	mov	r6, r2
 800175a:	4698      	mov	r8, r3
 800175c:	688a      	ldr	r2, [r1, #8]
 800175e:	690b      	ldr	r3, [r1, #16]
 8001760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001764:	4293      	cmp	r3, r2
 8001766:	bfb8      	it	lt
 8001768:	4613      	movlt	r3, r2
 800176a:	6033      	str	r3, [r6, #0]
 800176c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001770:	4607      	mov	r7, r0
 8001772:	460c      	mov	r4, r1
 8001774:	b10a      	cbz	r2, 800177a <_printf_common+0x26>
 8001776:	3301      	adds	r3, #1
 8001778:	6033      	str	r3, [r6, #0]
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	0699      	lsls	r1, r3, #26
 800177e:	bf42      	ittt	mi
 8001780:	6833      	ldrmi	r3, [r6, #0]
 8001782:	3302      	addmi	r3, #2
 8001784:	6033      	strmi	r3, [r6, #0]
 8001786:	6825      	ldr	r5, [r4, #0]
 8001788:	f015 0506 	ands.w	r5, r5, #6
 800178c:	d106      	bne.n	800179c <_printf_common+0x48>
 800178e:	f104 0a19 	add.w	sl, r4, #25
 8001792:	68e3      	ldr	r3, [r4, #12]
 8001794:	6832      	ldr	r2, [r6, #0]
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	42ab      	cmp	r3, r5
 800179a:	dc26      	bgt.n	80017ea <_printf_common+0x96>
 800179c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80017a0:	6822      	ldr	r2, [r4, #0]
 80017a2:	3b00      	subs	r3, #0
 80017a4:	bf18      	it	ne
 80017a6:	2301      	movne	r3, #1
 80017a8:	0692      	lsls	r2, r2, #26
 80017aa:	d42b      	bmi.n	8001804 <_printf_common+0xb0>
 80017ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80017b0:	4641      	mov	r1, r8
 80017b2:	4638      	mov	r0, r7
 80017b4:	47c8      	blx	r9
 80017b6:	3001      	adds	r0, #1
 80017b8:	d01e      	beq.n	80017f8 <_printf_common+0xa4>
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	6922      	ldr	r2, [r4, #16]
 80017be:	f003 0306 	and.w	r3, r3, #6
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf02      	ittt	eq
 80017c6:	68e5      	ldreq	r5, [r4, #12]
 80017c8:	6833      	ldreq	r3, [r6, #0]
 80017ca:	1aed      	subeq	r5, r5, r3
 80017cc:	68a3      	ldr	r3, [r4, #8]
 80017ce:	bf0c      	ite	eq
 80017d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017d4:	2500      	movne	r5, #0
 80017d6:	4293      	cmp	r3, r2
 80017d8:	bfc4      	itt	gt
 80017da:	1a9b      	subgt	r3, r3, r2
 80017dc:	18ed      	addgt	r5, r5, r3
 80017de:	2600      	movs	r6, #0
 80017e0:	341a      	adds	r4, #26
 80017e2:	42b5      	cmp	r5, r6
 80017e4:	d11a      	bne.n	800181c <_printf_common+0xc8>
 80017e6:	2000      	movs	r0, #0
 80017e8:	e008      	b.n	80017fc <_printf_common+0xa8>
 80017ea:	2301      	movs	r3, #1
 80017ec:	4652      	mov	r2, sl
 80017ee:	4641      	mov	r1, r8
 80017f0:	4638      	mov	r0, r7
 80017f2:	47c8      	blx	r9
 80017f4:	3001      	adds	r0, #1
 80017f6:	d103      	bne.n	8001800 <_printf_common+0xac>
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001800:	3501      	adds	r5, #1
 8001802:	e7c6      	b.n	8001792 <_printf_common+0x3e>
 8001804:	18e1      	adds	r1, r4, r3
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	2030      	movs	r0, #48	@ 0x30
 800180a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800180e:	4422      	add	r2, r4
 8001810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001818:	3302      	adds	r3, #2
 800181a:	e7c7      	b.n	80017ac <_printf_common+0x58>
 800181c:	2301      	movs	r3, #1
 800181e:	4622      	mov	r2, r4
 8001820:	4641      	mov	r1, r8
 8001822:	4638      	mov	r0, r7
 8001824:	47c8      	blx	r9
 8001826:	3001      	adds	r0, #1
 8001828:	d0e6      	beq.n	80017f8 <_printf_common+0xa4>
 800182a:	3601      	adds	r6, #1
 800182c:	e7d9      	b.n	80017e2 <_printf_common+0x8e>
	...

08001830 <_printf_i>:
 8001830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001834:	7e0f      	ldrb	r7, [r1, #24]
 8001836:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001838:	2f78      	cmp	r7, #120	@ 0x78
 800183a:	4691      	mov	r9, r2
 800183c:	4680      	mov	r8, r0
 800183e:	460c      	mov	r4, r1
 8001840:	469a      	mov	sl, r3
 8001842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001846:	d807      	bhi.n	8001858 <_printf_i+0x28>
 8001848:	2f62      	cmp	r7, #98	@ 0x62
 800184a:	d80a      	bhi.n	8001862 <_printf_i+0x32>
 800184c:	2f00      	cmp	r7, #0
 800184e:	f000 80d1 	beq.w	80019f4 <_printf_i+0x1c4>
 8001852:	2f58      	cmp	r7, #88	@ 0x58
 8001854:	f000 80b8 	beq.w	80019c8 <_printf_i+0x198>
 8001858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800185c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001860:	e03a      	b.n	80018d8 <_printf_i+0xa8>
 8001862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001866:	2b15      	cmp	r3, #21
 8001868:	d8f6      	bhi.n	8001858 <_printf_i+0x28>
 800186a:	a101      	add	r1, pc, #4	@ (adr r1, 8001870 <_printf_i+0x40>)
 800186c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001870:	080018c9 	.word	0x080018c9
 8001874:	080018dd 	.word	0x080018dd
 8001878:	08001859 	.word	0x08001859
 800187c:	08001859 	.word	0x08001859
 8001880:	08001859 	.word	0x08001859
 8001884:	08001859 	.word	0x08001859
 8001888:	080018dd 	.word	0x080018dd
 800188c:	08001859 	.word	0x08001859
 8001890:	08001859 	.word	0x08001859
 8001894:	08001859 	.word	0x08001859
 8001898:	08001859 	.word	0x08001859
 800189c:	080019db 	.word	0x080019db
 80018a0:	08001907 	.word	0x08001907
 80018a4:	08001995 	.word	0x08001995
 80018a8:	08001859 	.word	0x08001859
 80018ac:	08001859 	.word	0x08001859
 80018b0:	080019fd 	.word	0x080019fd
 80018b4:	08001859 	.word	0x08001859
 80018b8:	08001907 	.word	0x08001907
 80018bc:	08001859 	.word	0x08001859
 80018c0:	08001859 	.word	0x08001859
 80018c4:	0800199d 	.word	0x0800199d
 80018c8:	6833      	ldr	r3, [r6, #0]
 80018ca:	1d1a      	adds	r2, r3, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6032      	str	r2, [r6, #0]
 80018d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80018d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80018d8:	2301      	movs	r3, #1
 80018da:	e09c      	b.n	8001a16 <_printf_i+0x1e6>
 80018dc:	6833      	ldr	r3, [r6, #0]
 80018de:	6820      	ldr	r0, [r4, #0]
 80018e0:	1d19      	adds	r1, r3, #4
 80018e2:	6031      	str	r1, [r6, #0]
 80018e4:	0606      	lsls	r6, r0, #24
 80018e6:	d501      	bpl.n	80018ec <_printf_i+0xbc>
 80018e8:	681d      	ldr	r5, [r3, #0]
 80018ea:	e003      	b.n	80018f4 <_printf_i+0xc4>
 80018ec:	0645      	lsls	r5, r0, #25
 80018ee:	d5fb      	bpl.n	80018e8 <_printf_i+0xb8>
 80018f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80018f4:	2d00      	cmp	r5, #0
 80018f6:	da03      	bge.n	8001900 <_printf_i+0xd0>
 80018f8:	232d      	movs	r3, #45	@ 0x2d
 80018fa:	426d      	negs	r5, r5
 80018fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001900:	4858      	ldr	r0, [pc, #352]	@ (8001a64 <_printf_i+0x234>)
 8001902:	230a      	movs	r3, #10
 8001904:	e011      	b.n	800192a <_printf_i+0xfa>
 8001906:	6821      	ldr	r1, [r4, #0]
 8001908:	6833      	ldr	r3, [r6, #0]
 800190a:	0608      	lsls	r0, r1, #24
 800190c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001910:	d402      	bmi.n	8001918 <_printf_i+0xe8>
 8001912:	0649      	lsls	r1, r1, #25
 8001914:	bf48      	it	mi
 8001916:	b2ad      	uxthmi	r5, r5
 8001918:	2f6f      	cmp	r7, #111	@ 0x6f
 800191a:	4852      	ldr	r0, [pc, #328]	@ (8001a64 <_printf_i+0x234>)
 800191c:	6033      	str	r3, [r6, #0]
 800191e:	bf14      	ite	ne
 8001920:	230a      	movne	r3, #10
 8001922:	2308      	moveq	r3, #8
 8001924:	2100      	movs	r1, #0
 8001926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800192a:	6866      	ldr	r6, [r4, #4]
 800192c:	60a6      	str	r6, [r4, #8]
 800192e:	2e00      	cmp	r6, #0
 8001930:	db05      	blt.n	800193e <_printf_i+0x10e>
 8001932:	6821      	ldr	r1, [r4, #0]
 8001934:	432e      	orrs	r6, r5
 8001936:	f021 0104 	bic.w	r1, r1, #4
 800193a:	6021      	str	r1, [r4, #0]
 800193c:	d04b      	beq.n	80019d6 <_printf_i+0x1a6>
 800193e:	4616      	mov	r6, r2
 8001940:	fbb5 f1f3 	udiv	r1, r5, r3
 8001944:	fb03 5711 	mls	r7, r3, r1, r5
 8001948:	5dc7      	ldrb	r7, [r0, r7]
 800194a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800194e:	462f      	mov	r7, r5
 8001950:	42bb      	cmp	r3, r7
 8001952:	460d      	mov	r5, r1
 8001954:	d9f4      	bls.n	8001940 <_printf_i+0x110>
 8001956:	2b08      	cmp	r3, #8
 8001958:	d10b      	bne.n	8001972 <_printf_i+0x142>
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	07df      	lsls	r7, r3, #31
 800195e:	d508      	bpl.n	8001972 <_printf_i+0x142>
 8001960:	6923      	ldr	r3, [r4, #16]
 8001962:	6861      	ldr	r1, [r4, #4]
 8001964:	4299      	cmp	r1, r3
 8001966:	bfde      	ittt	le
 8001968:	2330      	movle	r3, #48	@ 0x30
 800196a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800196e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001972:	1b92      	subs	r2, r2, r6
 8001974:	6122      	str	r2, [r4, #16]
 8001976:	f8cd a000 	str.w	sl, [sp]
 800197a:	464b      	mov	r3, r9
 800197c:	aa03      	add	r2, sp, #12
 800197e:	4621      	mov	r1, r4
 8001980:	4640      	mov	r0, r8
 8001982:	f7ff fee7 	bl	8001754 <_printf_common>
 8001986:	3001      	adds	r0, #1
 8001988:	d14a      	bne.n	8001a20 <_printf_i+0x1f0>
 800198a:	f04f 30ff 	mov.w	r0, #4294967295
 800198e:	b004      	add	sp, #16
 8001990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	6023      	str	r3, [r4, #0]
 800199c:	4832      	ldr	r0, [pc, #200]	@ (8001a68 <_printf_i+0x238>)
 800199e:	2778      	movs	r7, #120	@ 0x78
 80019a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	6831      	ldr	r1, [r6, #0]
 80019a8:	061f      	lsls	r7, r3, #24
 80019aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80019ae:	d402      	bmi.n	80019b6 <_printf_i+0x186>
 80019b0:	065f      	lsls	r7, r3, #25
 80019b2:	bf48      	it	mi
 80019b4:	b2ad      	uxthmi	r5, r5
 80019b6:	6031      	str	r1, [r6, #0]
 80019b8:	07d9      	lsls	r1, r3, #31
 80019ba:	bf44      	itt	mi
 80019bc:	f043 0320 	orrmi.w	r3, r3, #32
 80019c0:	6023      	strmi	r3, [r4, #0]
 80019c2:	b11d      	cbz	r5, 80019cc <_printf_i+0x19c>
 80019c4:	2310      	movs	r3, #16
 80019c6:	e7ad      	b.n	8001924 <_printf_i+0xf4>
 80019c8:	4826      	ldr	r0, [pc, #152]	@ (8001a64 <_printf_i+0x234>)
 80019ca:	e7e9      	b.n	80019a0 <_printf_i+0x170>
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	f023 0320 	bic.w	r3, r3, #32
 80019d2:	6023      	str	r3, [r4, #0]
 80019d4:	e7f6      	b.n	80019c4 <_printf_i+0x194>
 80019d6:	4616      	mov	r6, r2
 80019d8:	e7bd      	b.n	8001956 <_printf_i+0x126>
 80019da:	6833      	ldr	r3, [r6, #0]
 80019dc:	6825      	ldr	r5, [r4, #0]
 80019de:	6961      	ldr	r1, [r4, #20]
 80019e0:	1d18      	adds	r0, r3, #4
 80019e2:	6030      	str	r0, [r6, #0]
 80019e4:	062e      	lsls	r6, r5, #24
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	d501      	bpl.n	80019ee <_printf_i+0x1be>
 80019ea:	6019      	str	r1, [r3, #0]
 80019ec:	e002      	b.n	80019f4 <_printf_i+0x1c4>
 80019ee:	0668      	lsls	r0, r5, #25
 80019f0:	d5fb      	bpl.n	80019ea <_printf_i+0x1ba>
 80019f2:	8019      	strh	r1, [r3, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	6123      	str	r3, [r4, #16]
 80019f8:	4616      	mov	r6, r2
 80019fa:	e7bc      	b.n	8001976 <_printf_i+0x146>
 80019fc:	6833      	ldr	r3, [r6, #0]
 80019fe:	1d1a      	adds	r2, r3, #4
 8001a00:	6032      	str	r2, [r6, #0]
 8001a02:	681e      	ldr	r6, [r3, #0]
 8001a04:	6862      	ldr	r2, [r4, #4]
 8001a06:	2100      	movs	r1, #0
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f7fe fbe9 	bl	80001e0 <memchr>
 8001a0e:	b108      	cbz	r0, 8001a14 <_printf_i+0x1e4>
 8001a10:	1b80      	subs	r0, r0, r6
 8001a12:	6060      	str	r0, [r4, #4]
 8001a14:	6863      	ldr	r3, [r4, #4]
 8001a16:	6123      	str	r3, [r4, #16]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a1e:	e7aa      	b.n	8001976 <_printf_i+0x146>
 8001a20:	6923      	ldr	r3, [r4, #16]
 8001a22:	4632      	mov	r2, r6
 8001a24:	4649      	mov	r1, r9
 8001a26:	4640      	mov	r0, r8
 8001a28:	47d0      	blx	sl
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	d0ad      	beq.n	800198a <_printf_i+0x15a>
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	079b      	lsls	r3, r3, #30
 8001a32:	d413      	bmi.n	8001a5c <_printf_i+0x22c>
 8001a34:	68e0      	ldr	r0, [r4, #12]
 8001a36:	9b03      	ldr	r3, [sp, #12]
 8001a38:	4298      	cmp	r0, r3
 8001a3a:	bfb8      	it	lt
 8001a3c:	4618      	movlt	r0, r3
 8001a3e:	e7a6      	b.n	800198e <_printf_i+0x15e>
 8001a40:	2301      	movs	r3, #1
 8001a42:	4632      	mov	r2, r6
 8001a44:	4649      	mov	r1, r9
 8001a46:	4640      	mov	r0, r8
 8001a48:	47d0      	blx	sl
 8001a4a:	3001      	adds	r0, #1
 8001a4c:	d09d      	beq.n	800198a <_printf_i+0x15a>
 8001a4e:	3501      	adds	r5, #1
 8001a50:	68e3      	ldr	r3, [r4, #12]
 8001a52:	9903      	ldr	r1, [sp, #12]
 8001a54:	1a5b      	subs	r3, r3, r1
 8001a56:	42ab      	cmp	r3, r5
 8001a58:	dcf2      	bgt.n	8001a40 <_printf_i+0x210>
 8001a5a:	e7eb      	b.n	8001a34 <_printf_i+0x204>
 8001a5c:	2500      	movs	r5, #0
 8001a5e:	f104 0619 	add.w	r6, r4, #25
 8001a62:	e7f5      	b.n	8001a50 <_printf_i+0x220>
 8001a64:	08001b47 	.word	0x08001b47
 8001a68:	08001b58 	.word	0x08001b58

08001a6c <memmove>:
 8001a6c:	4288      	cmp	r0, r1
 8001a6e:	b510      	push	{r4, lr}
 8001a70:	eb01 0402 	add.w	r4, r1, r2
 8001a74:	d902      	bls.n	8001a7c <memmove+0x10>
 8001a76:	4284      	cmp	r4, r0
 8001a78:	4623      	mov	r3, r4
 8001a7a:	d807      	bhi.n	8001a8c <memmove+0x20>
 8001a7c:	1e43      	subs	r3, r0, #1
 8001a7e:	42a1      	cmp	r1, r4
 8001a80:	d008      	beq.n	8001a94 <memmove+0x28>
 8001a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a8a:	e7f8      	b.n	8001a7e <memmove+0x12>
 8001a8c:	4402      	add	r2, r0
 8001a8e:	4601      	mov	r1, r0
 8001a90:	428a      	cmp	r2, r1
 8001a92:	d100      	bne.n	8001a96 <memmove+0x2a>
 8001a94:	bd10      	pop	{r4, pc}
 8001a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001a9e:	e7f7      	b.n	8001a90 <memmove+0x24>

08001aa0 <_realloc_r>:
 8001aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa4:	4607      	mov	r7, r0
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	b921      	cbnz	r1, 8001ab6 <_realloc_r+0x16>
 8001aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	f7ff bbad 	b.w	8001210 <_malloc_r>
 8001ab6:	b92a      	cbnz	r2, 8001ac4 <_realloc_r+0x24>
 8001ab8:	f7ff fcaa 	bl	8001410 <_free_r>
 8001abc:	4625      	mov	r5, r4
 8001abe:	4628      	mov	r0, r5
 8001ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ac4:	f000 f81a 	bl	8001afc <_malloc_usable_size_r>
 8001ac8:	4284      	cmp	r4, r0
 8001aca:	4606      	mov	r6, r0
 8001acc:	d802      	bhi.n	8001ad4 <_realloc_r+0x34>
 8001ace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001ad2:	d8f4      	bhi.n	8001abe <_realloc_r+0x1e>
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	4638      	mov	r0, r7
 8001ad8:	f7ff fb9a 	bl	8001210 <_malloc_r>
 8001adc:	4680      	mov	r8, r0
 8001ade:	b908      	cbnz	r0, 8001ae4 <_realloc_r+0x44>
 8001ae0:	4645      	mov	r5, r8
 8001ae2:	e7ec      	b.n	8001abe <_realloc_r+0x1e>
 8001ae4:	42b4      	cmp	r4, r6
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	4629      	mov	r1, r5
 8001aea:	bf28      	it	cs
 8001aec:	4632      	movcs	r2, r6
 8001aee:	f7ff fc81 	bl	80013f4 <memcpy>
 8001af2:	4629      	mov	r1, r5
 8001af4:	4638      	mov	r0, r7
 8001af6:	f7ff fc8b 	bl	8001410 <_free_r>
 8001afa:	e7f1      	b.n	8001ae0 <_realloc_r+0x40>

08001afc <_malloc_usable_size_r>:
 8001afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b00:	1f18      	subs	r0, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bfbc      	itt	lt
 8001b06:	580b      	ldrlt	r3, [r1, r0]
 8001b08:	18c0      	addlt	r0, r0, r3
 8001b0a:	4770      	bx	lr

08001b0c <_init>:
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	bf00      	nop
 8001b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b12:	bc08      	pop	{r3}
 8001b14:	469e      	mov	lr, r3
 8001b16:	4770      	bx	lr

08001b18 <_fini>:
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	bf00      	nop
 8001b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1e:	bc08      	pop	{r3}
 8001b20:	469e      	mov	lr, r3
 8001b22:	4770      	bx	lr

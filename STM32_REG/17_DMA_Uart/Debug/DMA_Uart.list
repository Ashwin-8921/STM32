
DMA_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800153c  0800153c  0000253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800155c  0800155c  00003090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800155c  0800155c  0000255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001564  08001564  00003090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001564  08001564  00002564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001568  08001568  00002568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800156c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003090  2**0
                  CONTENTS
 10 .bss          00000190  20000090  20000090  00003090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00003090  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001fd3  00000000  00000000  000030ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000816  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  000058a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000185  00000000  00000000  00005ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000381c  00000000  00000000  00005c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002bc0  00000000  00000000  00009469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c8dc  00000000  00000000  0000c029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00018905  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e04  00000000  00000000  00018948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0001974c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000090 	.word	0x20000090
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001524 	.word	0x08001524

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000094 	.word	0x20000094
 80001c8:	08001524 	.word	0x08001524

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <USART2_Init>:

USART_Handle_t usart2_handle;   // USART2 handle structure

// USART2 peripheral setup
void USART2_Init(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;                                 // Select USART2
 80001e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000218 <USART2_Init+0x3c>)
 80001e2:	4a0e      	ldr	r2, [pc, #56]	@ (800021c <USART2_Init+0x40>)
 80001e4:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;  // Baud = 115200
 80001e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000218 <USART2_Init+0x3c>)
 80001e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001ec:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE; // No HW flow ctrl
 80001ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000218 <USART2_Init+0x3c>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;        // Enable TX + RX
 80001f4:	4b08      	ldr	r3, [pc, #32]	@ (8000218 <USART2_Init+0x3c>)
 80001f6:	2202      	movs	r2, #2
 80001f8:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1; // 1 stop bit
 80001fa:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <USART2_Init+0x3c>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS; // 8-bit data
 8000200:	4b05      	ldr	r3, [pc, #20]	@ (8000218 <USART2_Init+0x3c>)
 8000202:	2200      	movs	r2, #0
 8000204:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE; // No parity
 8000206:	4b04      	ldr	r3, [pc, #16]	@ (8000218 <USART2_Init+0x3c>)
 8000208:	2200      	movs	r2, #0
 800020a:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);                                     // Apply config
 800020c:	4802      	ldr	r0, [pc, #8]	@ (8000218 <USART2_Init+0x3c>)
 800020e:	f000 fc02 	bl	8000a16 <USART_Init>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	200000ac 	.word	0x200000ac
 800021c:	40004400 	.word	0x40004400

08000220 <USART2_GPIOInit>:

// GPIO config for USART2: PA2 (TX) & PA3 (RX)
void USART2_GPIOInit(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart2_gpio;
	memset(&usart2_gpio,0,sizeof(usart2_gpio));                     // Clear struct
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	220c      	movs	r2, #12
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fec9 	bl	8000fc4 <memset>

	usart2_gpio.pGPIOx = GPIOA;                                      // Use Port A
 8000232:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000236:	607b      	str	r3, [r7, #4]
	usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;       // Alternate function
 8000238:	2302      	movs	r3, #2
 800023a:	727b      	strb	r3, [r7, #9]
	usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;     // Push-pull
 800023c:	2300      	movs	r3, #0
 800023e:	733b      	strb	r3, [r7, #12]
	usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;    // Pull-up
 8000240:	2301      	movs	r3, #1
 8000242:	72fb      	strb	r3, [r7, #11]
	usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;      // Fast speed
 8000244:	2302      	movs	r3, #2
 8000246:	72bb      	strb	r3, [r7, #10]
	usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;               // AF7 = USART2
 8000248:	2307      	movs	r3, #7
 800024a:	737b      	strb	r3, [r7, #13]

	GPIOA_PCLK_EN();                                                 // Enable Port A clock
 800024c:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <USART2_GPIOInit+0x58>)
 800024e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000250:	4a09      	ldr	r2, [pc, #36]	@ (8000278 <USART2_GPIOInit+0x58>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	64d3      	str	r3, [r2, #76]	@ 0x4c

	usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;       // PA2 as TX
 8000258:	2302      	movs	r3, #2
 800025a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart2_gpio);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f97e 	bl	8000560 <GPIO_Init>

	usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;       // PA3 as RX
 8000264:	2303      	movs	r3, #3
 8000266:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart2_gpio);
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f978 	bl	8000560 <GPIO_Init>
}
 8000270:	bf00      	nop
 8000272:	3710      	adds	r7, #16
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40021000 	.word	0x40021000

0800027c <delay>:

// Simple delay loop
void delay()
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<500000;i++);
 8000282:	2300      	movs	r3, #0
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	e002      	b.n	800028e <delay+0x12>
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3301      	adds	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a04      	ldr	r2, [pc, #16]	@ (80002a4 <delay+0x28>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d9f8      	bls.n	8000288 <delay+0xc>
}
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	0007a11f 	.word	0x0007a11f

080002a8 <__io_putchar>:

// Redirect printf() to USART2
int __io_putchar(int ch)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	USART_SendData(&usart2_handle, (uint8_t*)&ch, 1);  // Send one char
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2201      	movs	r2, #1
 80002b4:	4619      	mov	r1, r3
 80002b6:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <__io_putchar+0x20>)
 80002b8:	f000 fc2a 	bl	8000b10 <USART_SendData>
	return(ch);
 80002bc:	687b      	ldr	r3, [r7, #4]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200000ac 	.word	0x200000ac

080002cc <uart2_dma_tx_init>:

// DMA setup for USART2 TX
void uart2_dma_tx_init(void)
{
 80002cc:	b598      	push	{r3, r4, r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1<<0);                         // Enable DMA1 clock
 80002d0:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <uart2_dma_tx_init+0x70>)
 80002d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002d4:	4a19      	ldr	r2, [pc, #100]	@ (800033c <uart2_dma_tx_init+0x70>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6493      	str	r3, [r2, #72]	@ 0x48

    DMA1_CSELR->CSELR &= ~(0xF << (4*(7-1)));       // Reset CH7 mapping
 80002dc:	4b18      	ldr	r3, [pc, #96]	@ (8000340 <uart2_dma_tx_init+0x74>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a17      	ldr	r2, [pc, #92]	@ (8000340 <uart2_dma_tx_init+0x74>)
 80002e2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80002e6:	6013      	str	r3, [r2, #0]
    DMA1_CSELR->CSELR |=  (0x02000000);             // Map CH7 → USART2_TX
 80002e8:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <uart2_dma_tx_init+0x74>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a14      	ldr	r2, [pc, #80]	@ (8000340 <uart2_dma_tx_init+0x74>)
 80002ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002f2:	6013      	str	r3, [r2, #0]

    DMA1_Channel7->CCR &= ~(1<<0);                  // Disable CH7 before config
 80002f4:	4b13      	ldr	r3, [pc, #76]	@ (8000344 <uart2_dma_tx_init+0x78>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a12      	ldr	r2, [pc, #72]	@ (8000344 <uart2_dma_tx_init+0x78>)
 80002fa:	f023 0301 	bic.w	r3, r3, #1
 80002fe:	6013      	str	r3, [r2, #0]
    DMA1_Channel7->CPAR  = (uint32_t)&USART2->TDR;  // Peripheral = USART2->TDR
 8000300:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <uart2_dma_tx_init+0x78>)
 8000302:	4a11      	ldr	r2, [pc, #68]	@ (8000348 <uart2_dma_tx_init+0x7c>)
 8000304:	609a      	str	r2, [r3, #8]
    DMA1_Channel7->CMAR  = (uint32_t)tx_buffer;     // Memory source = tx_buffer
 8000306:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <uart2_dma_tx_init+0x78>)
 8000308:	4a10      	ldr	r2, [pc, #64]	@ (800034c <uart2_dma_tx_init+0x80>)
 800030a:	60da      	str	r2, [r3, #12]
    DMA1_Channel7->CNDTR = strlen((char*)tx_buffer); // Transfer length
 800030c:	4c0d      	ldr	r4, [pc, #52]	@ (8000344 <uart2_dma_tx_init+0x78>)
 800030e:	480f      	ldr	r0, [pc, #60]	@ (800034c <uart2_dma_tx_init+0x80>)
 8000310:	f7ff ff5c 	bl	80001cc <strlen>
 8000314:	4603      	mov	r3, r0
 8000316:	6063      	str	r3, [r4, #4]
    DMA1_Channel7->CCR   = (1<<4)|(1<<7)|(1<<13);   // DIR=mem→periph, MINC=1, high priority
 8000318:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <uart2_dma_tx_init+0x78>)
 800031a:	f242 0290 	movw	r2, #8336	@ 0x2090
 800031e:	601a      	str	r2, [r3, #0]

    USART2->CR3 |= (1<<7);                          // Enable USART2 DMA TX
 8000320:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <uart2_dma_tx_init+0x84>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <uart2_dma_tx_init+0x84>)
 8000326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800032a:	6093      	str	r3, [r2, #8]

    DMA1_Channel7->CCR |= (1<<0);                   // Enable CH7
 800032c:	4b05      	ldr	r3, [pc, #20]	@ (8000344 <uart2_dma_tx_init+0x78>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a04      	ldr	r2, [pc, #16]	@ (8000344 <uart2_dma_tx_init+0x78>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6013      	str	r3, [r2, #0]
}
 8000338:	bf00      	nop
 800033a:	bd98      	pop	{r3, r4, r7, pc}
 800033c:	40021000 	.word	0x40021000
 8000340:	400200a8 	.word	0x400200a8
 8000344:	40020080 	.word	0x40020080
 8000348:	40004428 	.word	0x40004428
 800034c:	20000000 	.word	0x20000000
 8000350:	40004400 	.word	0x40004400

08000354 <main>:

int main()
{
 8000354:	b598      	push	{r3, r4, r7, lr}
 8000356:	af00      	add	r7, sp, #0
	USART2_GPIOInit();                              // Setup USART2 pins
 8000358:	f7ff ff62 	bl	8000220 <USART2_GPIOInit>
	USART2_Init();                                  // Init USART2 peripheral
 800035c:	f7ff ff3e 	bl	80001dc <USART2_Init>
	USART_PeripheralControl(USART2, ENABLE);        // Enable USART2
 8000360:	2101      	movs	r1, #1
 8000362:	4815      	ldr	r0, [pc, #84]	@ (80003b8 <main+0x64>)
 8000364:	f000 fb3c 	bl	80009e0 <USART_PeripheralControl>
	printf("Hello World\r\n");                      // Send msg via USART2
 8000368:	4814      	ldr	r0, [pc, #80]	@ (80003bc <main+0x68>)
 800036a:	f000 fd4b 	bl	8000e04 <puts>
	uart2_dma_tx_init();                            // Start DMA transfer
 800036e:	f7ff ffad 	bl	80002cc <uart2_dma_tx_init>

	while(1)
	{
	    while((DMA1_Channel7->CNDTR) != 0);         // Wait until DMA transfer done
 8000372:	bf00      	nop
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <main+0x6c>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1fb      	bne.n	8000374 <main+0x20>

	    DMA1_Channel7->CCR &= ~(1<<0);              // Disable CH7
 800037c:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <main+0x6c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a0f      	ldr	r2, [pc, #60]	@ (80003c0 <main+0x6c>)
 8000382:	f023 0301 	bic.w	r3, r3, #1
 8000386:	6013      	str	r3, [r2, #0]
	    strcpy((char*)tx_buffer, "DMA TX AGAIN\r\n"); // Update buffer
 8000388:	4a0e      	ldr	r2, [pc, #56]	@ (80003c4 <main+0x70>)
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <main+0x74>)
 800038c:	4614      	mov	r4, r2
 800038e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000390:	c407      	stmia	r4!, {r0, r1, r2}
 8000392:	8023      	strh	r3, [r4, #0]
 8000394:	3402      	adds	r4, #2
 8000396:	0c1b      	lsrs	r3, r3, #16
 8000398:	7023      	strb	r3, [r4, #0]
	    DMA1_Channel7->CNDTR = strlen((char*)tx_buffer); // Reload transfer count
 800039a:	4c09      	ldr	r4, [pc, #36]	@ (80003c0 <main+0x6c>)
 800039c:	4809      	ldr	r0, [pc, #36]	@ (80003c4 <main+0x70>)
 800039e:	f7ff ff15 	bl	80001cc <strlen>
 80003a2:	4603      	mov	r3, r0
 80003a4:	6063      	str	r3, [r4, #4]
	    DMA1_Channel7->CCR |= (1<<0);               // Restart DMA
 80003a6:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <main+0x6c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a05      	ldr	r2, [pc, #20]	@ (80003c0 <main+0x6c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6013      	str	r3, [r2, #0]
	    delay();                                    // Small wait
 80003b2:	f7ff ff63 	bl	800027c <delay>
	    while((DMA1_Channel7->CNDTR) != 0);         // Wait until DMA transfer done
 80003b6:	e7dc      	b.n	8000372 <main+0x1e>
 80003b8:	40004400 	.word	0x40004400
 80003bc:	0800153c 	.word	0x0800153c
 80003c0:	40020080 	.word	0x40020080
 80003c4:	20000000 	.word	0x20000000
 80003c8:	0800154c 	.word	0x0800154c

080003cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	e00a      	b.n	80003f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003de:	f3af 8000 	nop.w
 80003e2:	4601      	mov	r1, r0
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	60ba      	str	r2, [r7, #8]
 80003ea:	b2ca      	uxtb	r2, r1
 80003ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	3301      	adds	r3, #1
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	dbf0      	blt.n	80003de <_read+0x12>
  }

  return len;
 80003fc:	687b      	ldr	r3, [r7, #4]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b086      	sub	sp, #24
 800040a:	af00      	add	r7, sp, #0
 800040c:	60f8      	str	r0, [r7, #12]
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
 8000416:	e009      	b.n	800042c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	1c5a      	adds	r2, r3, #1
 800041c:	60ba      	str	r2, [r7, #8]
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff41 	bl	80002a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	3301      	adds	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	dbf1      	blt.n	8000418 <_write+0x12>
  }
  return len;
 8000434:	687b      	ldr	r3, [r7, #4]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <_close>:

int _close(int file)
{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800044a:	4618      	mov	r0, r3
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000464:	605a      	str	r2, [r3, #4]
  return 0;
 8000466:	2300      	movs	r3, #0
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr

08000472 <_isatty>:

int _isatty(int file)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800047a:	2301      	movs	r3, #1
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000486:	b480      	push	{r7}
 8000488:	b085      	sub	sp, #20
 800048a:	af00      	add	r7, sp, #0
 800048c:	60f8      	str	r0, [r7, #12]
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
	...

080004a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a8:	4a14      	ldr	r2, [pc, #80]	@ (80004fc <_sbrk+0x5c>)
 80004aa:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <_sbrk+0x60>)
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b4:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <_sbrk+0x64>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004bc:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <_sbrk+0x64>)
 80004be:	4a12      	ldr	r2, [pc, #72]	@ (8000508 <_sbrk+0x68>)
 80004c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	693a      	ldr	r2, [r7, #16]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d207      	bcs.n	80004e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d0:	f000 fdc6 	bl	8001060 <__errno>
 80004d4:	4603      	mov	r3, r0
 80004d6:	220c      	movs	r2, #12
 80004d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	e009      	b.n	80004f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <_sbrk+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004e6:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a05      	ldr	r2, [pc, #20]	@ (8000504 <_sbrk+0x64>)
 80004f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f2:	68fb      	ldr	r3, [r7, #12]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20018000 	.word	0x20018000
 8000500:	00000400 	.word	0x00000400
 8000504:	200000d0 	.word	0x200000d0
 8000508:	20000220 	.word	0x20000220

0800050c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800050c:	480d      	ldr	r0, [pc, #52]	@ (8000544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000510:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	@ (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	@ (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	@ (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800053a:	f000 fd97 	bl	800106c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800053e:	f7ff ff09 	bl	8000354 <main>

08000542 <LoopForever>:

LoopForever:
  b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   r0, =_estack
 8000544:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000550:	0800156c 	.word	0x0800156c
  ldr r2, =_sbss
 8000554:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000558:	20000220 	.word	0x20000220

0800055c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC1_2_IRQHandler>
	...

08000560 <GPIO_Init>:

/* Initialization and de-initialization */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000560:	b480      	push	{r7}
 8000562:	b087      	sub	sp, #28
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d822      	bhi.n	80005ba <GPIO_Init+0x5a>
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	2103      	movs	r1, #3
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	43db      	mvns	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	400a      	ands	r2, r1
 80005a2:	601a      	str	r2, [r3, #0]
			pGPIOHandle ->pGPIOx->MODER |= temp;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6819      	ldr	r1, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	430a      	orrs	r2, r1
 80005b2:	601a      	str	r2, [r3, #0]
			temp=0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	e0e1      	b.n	800077e <GPIO_Init+0x21e>
		}
		else
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
					pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	2103      	movs	r1, #3
 80005da:	fa01 f303 	lsl.w	r3, r1, r3
 80005de:	43db      	mvns	r3, r3
 80005e0:	4619      	mov	r1, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	400a      	ands	r2, r1
 80005e8:	601a      	str	r2, [r3, #0]
					pGPIOHandle ->pGPIOx->MODER |= temp;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]
					temp=0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
			if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	795b      	ldrb	r3, [r3, #5]
 8000602:	2b04      	cmp	r3, #4
 8000604:	d117      	bne.n	8000636 <GPIO_Init+0xd6>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000606:	4b47      	ldr	r3, [pc, #284]	@ (8000724 <GPIO_Init+0x1c4>)
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4611      	mov	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	408a      	lsls	r2, r1
 8000614:	4611      	mov	r1, r2
 8000616:	4a43      	ldr	r2, [pc, #268]	@ (8000724 <GPIO_Init+0x1c4>)
 8000618:	430b      	orrs	r3, r1
 800061a:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061c:	4b41      	ldr	r3, [pc, #260]	@ (8000724 <GPIO_Init+0x1c4>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	43d2      	mvns	r2, r2
 800062c:	4611      	mov	r1, r2
 800062e:	4a3d      	ldr	r2, [pc, #244]	@ (8000724 <GPIO_Init+0x1c4>)
 8000630:	400b      	ands	r3, r1
 8000632:	6093      	str	r3, [r2, #8]
 8000634:	e035      	b.n	80006a2 <GPIO_Init+0x142>
					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	795b      	ldrb	r3, [r3, #5]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d117      	bne.n	800066e <GPIO_Init+0x10e>
					{
						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800063e:	4b39      	ldr	r3, [pc, #228]	@ (8000724 <GPIO_Init+0x1c4>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	7912      	ldrb	r2, [r2, #4]
 8000646:	4611      	mov	r1, r2
 8000648:	2201      	movs	r2, #1
 800064a:	408a      	lsls	r2, r1
 800064c:	4611      	mov	r1, r2
 800064e:	4a35      	ldr	r2, [pc, #212]	@ (8000724 <GPIO_Init+0x1c4>)
 8000650:	430b      	orrs	r3, r1
 8000652:	6093      	str	r3, [r2, #8]

						EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000654:	4b33      	ldr	r3, [pc, #204]	@ (8000724 <GPIO_Init+0x1c4>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	7912      	ldrb	r2, [r2, #4]
 800065c:	4611      	mov	r1, r2
 800065e:	2201      	movs	r2, #1
 8000660:	408a      	lsls	r2, r1
 8000662:	43d2      	mvns	r2, r2
 8000664:	4611      	mov	r1, r2
 8000666:	4a2f      	ldr	r2, [pc, #188]	@ (8000724 <GPIO_Init+0x1c4>)
 8000668:	400b      	ands	r3, r1
 800066a:	60d3      	str	r3, [r2, #12]
 800066c:	e019      	b.n	80006a2 <GPIO_Init+0x142>

					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	795b      	ldrb	r3, [r3, #5]
 8000672:	2b06      	cmp	r3, #6
 8000674:	d115      	bne.n	80006a2 <GPIO_Init+0x142>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000676:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <GPIO_Init+0x1c4>)
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	7912      	ldrb	r2, [r2, #4]
 800067e:	4611      	mov	r1, r2
 8000680:	2201      	movs	r2, #1
 8000682:	408a      	lsls	r2, r1
 8000684:	4611      	mov	r1, r2
 8000686:	4a27      	ldr	r2, [pc, #156]	@ (8000724 <GPIO_Init+0x1c4>)
 8000688:	430b      	orrs	r3, r1
 800068a:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800068c:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <GPIO_Init+0x1c4>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7912      	ldrb	r2, [r2, #4]
 8000694:	4611      	mov	r1, r2
 8000696:	2201      	movs	r2, #1
 8000698:	408a      	lsls	r2, r1
 800069a:	4611      	mov	r1, r2
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <GPIO_Init+0x1c4>)
 800069e:	430b      	orrs	r3, r1
 80006a0:	6093      	str	r3, [r2, #8]
					}
				 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	089b      	lsrs	r3, r3, #2
 80006a8:	74fb      	strb	r3, [r7, #19]
				 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	f003 0303 	and.w	r3, r3, #3
 80006b2:	74bb      	strb	r3, [r7, #18]
				 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80006bc:	d042      	beq.n	8000744 <GPIO_Init+0x1e4>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a19      	ldr	r2, [pc, #100]	@ (8000728 <GPIO_Init+0x1c8>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d02b      	beq.n	8000720 <GPIO_Init+0x1c0>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a17      	ldr	r2, [pc, #92]	@ (800072c <GPIO_Init+0x1cc>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d024      	beq.n	800071c <GPIO_Init+0x1bc>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a16      	ldr	r2, [pc, #88]	@ (8000730 <GPIO_Init+0x1d0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d01d      	beq.n	8000718 <GPIO_Init+0x1b8>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <GPIO_Init+0x1d4>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d016      	beq.n	8000714 <GPIO_Init+0x1b4>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a13      	ldr	r2, [pc, #76]	@ (8000738 <GPIO_Init+0x1d8>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d00f      	beq.n	8000710 <GPIO_Init+0x1b0>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a11      	ldr	r2, [pc, #68]	@ (800073c <GPIO_Init+0x1dc>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d008      	beq.n	800070c <GPIO_Init+0x1ac>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <GPIO_Init+0x1e0>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d101      	bne.n	8000708 <GPIO_Init+0x1a8>
 8000704:	2307      	movs	r3, #7
 8000706:	e01e      	b.n	8000746 <GPIO_Init+0x1e6>
 8000708:	2300      	movs	r3, #0
 800070a:	e01c      	b.n	8000746 <GPIO_Init+0x1e6>
 800070c:	2306      	movs	r3, #6
 800070e:	e01a      	b.n	8000746 <GPIO_Init+0x1e6>
 8000710:	2305      	movs	r3, #5
 8000712:	e018      	b.n	8000746 <GPIO_Init+0x1e6>
 8000714:	2304      	movs	r3, #4
 8000716:	e016      	b.n	8000746 <GPIO_Init+0x1e6>
 8000718:	2303      	movs	r3, #3
 800071a:	e014      	b.n	8000746 <GPIO_Init+0x1e6>
 800071c:	2302      	movs	r3, #2
 800071e:	e012      	b.n	8000746 <GPIO_Init+0x1e6>
 8000720:	2301      	movs	r3, #1
 8000722:	e010      	b.n	8000746 <GPIO_Init+0x1e6>
 8000724:	40010400 	.word	0x40010400
 8000728:	48000400 	.word	0x48000400
 800072c:	48000800 	.word	0x48000800
 8000730:	48000c00 	.word	0x48000c00
 8000734:	48001000 	.word	0x48001000
 8000738:	48001400 	.word	0x48001400
 800073c:	48001800 	.word	0x48001800
 8000740:	48001c00 	.word	0x48001c00
 8000744:	2300      	movs	r3, #0
 8000746:	747b      	strb	r3, [r7, #17]
				 SYSCFG_PCLK_EN();
 8000748:	4b5e      	ldr	r3, [pc, #376]	@ (80008c4 <GPIO_Init+0x364>)
 800074a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800074c:	4a5d      	ldr	r2, [pc, #372]	@ (80008c4 <GPIO_Init+0x364>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6613      	str	r3, [r2, #96]	@ 0x60
				 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 8000754:	7c7a      	ldrb	r2, [r7, #17]
 8000756:	7cbb      	ldrb	r3, [r7, #18]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	fa02 f103 	lsl.w	r1, r2, r3
 800075e:	4a5a      	ldr	r2, [pc, #360]	@ (80008c8 <GPIO_Init+0x368>)
 8000760:	7cfb      	ldrb	r3, [r7, #19]
 8000762:	3302      	adds	r3, #2
 8000764:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000768:	4b58      	ldr	r3, [pc, #352]	@ (80008cc <GPIO_Init+0x36c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	7912      	ldrb	r2, [r2, #4]
 8000770:	4611      	mov	r1, r2
 8000772:	2201      	movs	r2, #1
 8000774:	408a      	lsls	r2, r1
 8000776:	4611      	mov	r1, r2
 8000778:	4a54      	ldr	r2, [pc, #336]	@ (80008cc <GPIO_Init+0x36c>)
 800077a:	430b      	orrs	r3, r1
 800077c:	6013      	str	r3, [r2, #0]
		}

		temp=0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	799b      	ldrb	r3, [r3, #6]
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	689a      	ldr	r2, [r3, #8]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	2103      	movs	r1, #3
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	4619      	mov	r1, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	400a      	ands	r2, r1
 80007b0:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6899      	ldr	r1, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	430a      	orrs	r2, r1
 80007c0:	609a      	str	r2, [r3, #8]
		temp=0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	79db      	ldrb	r3, [r3, #7]
 80007ca:	461a      	mov	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	2103      	movs	r1, #3
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43db      	mvns	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	400a      	ands	r2, r1
 80007f4:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	68d9      	ldr	r1, [r3, #12]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	430a      	orrs	r2, r1
 8000804:	60da      	str	r2, [r3, #12]
		temp=0;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7a1b      	ldrb	r3, [r3, #8]
 800080e:	461a      	mov	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	4619      	mov	r1, r3
 8000826:	2301      	movs	r3, #1
 8000828:	408b      	lsls	r3, r1
 800082a:	43db      	mvns	r3, r3
 800082c:	4619      	mov	r1, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	400a      	ands	r2, r1
 8000834:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6859      	ldr	r1, [r3, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	430a      	orrs	r2, r1
 8000844:	605a      	str	r2, [r3, #4]
		temp=0;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d132      	bne.n	80008b8 <GPIO_Init+0x358>
		{
			uint32_t temp1 ,temp2;
			temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	08db      	lsrs	r3, r3, #3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	60fb      	str	r3, [r7, #12]
			temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	f003 0307 	and.w	r3, r3, #7
 8000864:	60bb      	str	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	3208      	adds	r2, #8
 800086e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	210f      	movs	r1, #15
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	4619      	mov	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4011      	ands	r1, r2
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	3208      	adds	r2, #8
 800088a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	3208      	adds	r2, #8
 8000896:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7a5b      	ldrb	r3, [r3, #9]
 800089e:	4619      	mov	r1, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4311      	orrs	r1, r2
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	3208      	adds	r2, #8
 80008b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}




}
 80008b8:	bf00      	nop
 80008ba:	371c      	adds	r7, #28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010000 	.word	0x40010000
 80008cc:	40010400 	.word	0x40010400

080008d0 <USART_PeriClockControl>:
/*
 *  Peripheral Clock Control
 */

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d136      	bne.n	8000950 <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a38      	ldr	r2, [pc, #224]	@ (80009c8 <USART_PeriClockControl+0xf8>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d106      	bne.n	80008f8 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 80008ea:	4b38      	ldr	r3, [pc, #224]	@ (80009cc <USART_PeriClockControl+0xfc>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ee:	4a37      	ldr	r2, [pc, #220]	@ (80009cc <USART_PeriClockControl+0xfc>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f4:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 80008f6:	e061      	b.n	80009bc <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a35      	ldr	r2, [pc, #212]	@ (80009d0 <USART_PeriClockControl+0x100>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d106      	bne.n	800090e <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000900:	4b32      	ldr	r3, [pc, #200]	@ (80009cc <USART_PeriClockControl+0xfc>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000904:	4a31      	ldr	r2, [pc, #196]	@ (80009cc <USART_PeriClockControl+0xfc>)
 8000906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800090c:	e056      	b.n	80009bc <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a30      	ldr	r2, [pc, #192]	@ (80009d4 <USART_PeriClockControl+0x104>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d106      	bne.n	8000924 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000916:	4b2d      	ldr	r3, [pc, #180]	@ (80009cc <USART_PeriClockControl+0xfc>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091a:	4a2c      	ldr	r2, [pc, #176]	@ (80009cc <USART_PeriClockControl+0xfc>)
 800091c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000920:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000922:	e04b      	b.n	80009bc <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a2c      	ldr	r2, [pc, #176]	@ (80009d8 <USART_PeriClockControl+0x108>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d106      	bne.n	800093a <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 800092c:	4b27      	ldr	r3, [pc, #156]	@ (80009cc <USART_PeriClockControl+0xfc>)
 800092e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000930:	4a26      	ldr	r2, [pc, #152]	@ (80009cc <USART_PeriClockControl+0xfc>)
 8000932:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000936:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000938:	e040      	b.n	80009bc <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a27      	ldr	r2, [pc, #156]	@ (80009dc <USART_PeriClockControl+0x10c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d13c      	bne.n	80009bc <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 8000942:	4b22      	ldr	r3, [pc, #136]	@ (80009cc <USART_PeriClockControl+0xfc>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	4a21      	ldr	r2, [pc, #132]	@ (80009cc <USART_PeriClockControl+0xfc>)
 8000948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800094c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800094e:	e035      	b.n	80009bc <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a1d      	ldr	r2, [pc, #116]	@ (80009c8 <USART_PeriClockControl+0xf8>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d106      	bne.n	8000966 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000958:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <USART_PeriClockControl+0xfc>)
 800095a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095c:	4a1b      	ldr	r2, [pc, #108]	@ (80009cc <USART_PeriClockControl+0xfc>)
 800095e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000962:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000964:	e02a      	b.n	80009bc <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <USART_PeriClockControl+0x100>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d106      	bne.n	800097c <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 800096e:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <USART_PeriClockControl+0xfc>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000972:	4a16      	ldr	r2, [pc, #88]	@ (80009cc <USART_PeriClockControl+0xfc>)
 8000974:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000978:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800097a:	e01f      	b.n	80009bc <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a15      	ldr	r2, [pc, #84]	@ (80009d4 <USART_PeriClockControl+0x104>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d106      	bne.n	8000992 <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <USART_PeriClockControl+0xfc>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000988:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <USART_PeriClockControl+0xfc>)
 800098a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800098e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000990:	e014      	b.n	80009bc <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <USART_PeriClockControl+0x108>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d106      	bne.n	80009a8 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <USART_PeriClockControl+0xfc>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	4a0b      	ldr	r2, [pc, #44]	@ (80009cc <USART_PeriClockControl+0xfc>)
 80009a0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80009a4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80009a6:	e009      	b.n	80009bc <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a0c      	ldr	r2, [pc, #48]	@ (80009dc <USART_PeriClockControl+0x10c>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d105      	bne.n	80009bc <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <USART_PeriClockControl+0xfc>)
 80009b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b4:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <USART_PeriClockControl+0xfc>)
 80009b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80009ba:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40013800 	.word	0x40013800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40004800 	.word	0x40004800
 80009d8:	40004c00 	.word	0x40004c00
 80009dc:	40005000 	.word	0x40005000

080009e0 <USART_PeripheralControl>:


// Enables or disables the USART peripheral

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d106      	bne.n	8000a00 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);  // Set UE bit to enable USART
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f043 0201 	orr.w	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE); // Clear UE bit to disable USART
	}
}
 80009fe:	e005      	b.n	8000a0c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE); // Clear UE bit to disable USART
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f023 0201 	bic.w	r2, r3, #1
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <USART_Init>:
 */



void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]

    // 1. Enable peripheral clock for the given USART
    USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2101      	movs	r1, #1
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff51 	bl	80008d0 <USART_PeriClockControl>

    // 2. Configure USART mode (TX, RX, or both)
    if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	791b      	ldrb	r3, [r3, #4]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d104      	bne.n	8000a40 <USART_Init+0x2a>
    {
        tempreg |= (1 << USART_CR1_RE);   // Enable Receiver
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e010      	b.n	8000a62 <USART_Init+0x4c>
    }
    else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d104      	bne.n	8000a52 <USART_Init+0x3c>
    {
        tempreg |= (1 << USART_CR1_TE);   // Enable Transmitter
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	e007      	b.n	8000a62 <USART_Init+0x4c>
    }
    else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	791b      	ldrb	r3, [r3, #4]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d103      	bne.n	8000a62 <USART_Init+0x4c>
    {
        tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE)); // Enable both TX & RX
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f043 030c 	orr.w	r3, r3, #12
 8000a60:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure word length
    tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7b5b      	ldrb	r3, [r3, #13]
 8000a66:	031b      	lsls	r3, r3, #12
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]

    // 4. Configure parity control
    if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7b9b      	ldrb	r3, [r3, #14]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d104      	bne.n	8000a80 <USART_Init+0x6a>
    {
        tempreg |= (1 << USART_CR1_PCE);  // Enable Even parity
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	e00b      	b.n	8000a98 <USART_Init+0x82>
    }
    else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7b9b      	ldrb	r3, [r3, #14]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d107      	bne.n	8000a98 <USART_Init+0x82>
    {
        tempreg |= (1 << USART_CR1_PCE);  // Enable Parity
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a8e:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << USART_CR1_PS);   // Select Odd parity
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a96:	60fb      	str	r3, [r7, #12]
    }

    // Load CR1 register
    pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	601a      	str	r2, [r3, #0]

    // 5. Configure stop bits
    tempreg = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
    tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7b1b      	ldrb	r3, [r3, #12]
 8000aa8:	031b      	lsls	r3, r3, #12
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
    pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	605a      	str	r2, [r3, #4]

    // 6. Configure hardware flow control
    tempreg = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
    if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7bdb      	ldrb	r3, [r3, #15]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d104      	bne.n	8000ace <USART_Init+0xb8>
    {
        tempreg |= (1 << USART_CR3_CTSE); // Enable CTS
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e014      	b.n	8000af8 <USART_Init+0xe2>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7bdb      	ldrb	r3, [r3, #15]
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d104      	bne.n	8000ae0 <USART_Init+0xca>
    {
        tempreg |= (1 << USART_CR3_RTSE); // Enable RTS
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e00b      	b.n	8000af8 <USART_Init+0xe2>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7bdb      	ldrb	r3, [r3, #15]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d107      	bne.n	8000af8 <USART_Init+0xe2>
    {
        tempreg |= (1 << USART_CR3_CTSE); // Enable CTS
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aee:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << USART_CR3_RTSE); // Enable RTS
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af6:	60fb      	str	r3, [r7, #12]
    }

    // Load CR3 register
    pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	609a      	str	r2, [r3, #8]

    // 7. Configure baud rate
    pUSARTHandle->pUSARTx->BRR = 0x23;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2223      	movs	r2, #35	@ 0x23
 8000b06:	60da      	str	r2, [r3, #12]
   // USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <USART_SendData>:
/*
 *  UART Send Data
 */

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
    uint16_t *pdata;

    // Loop through all bytes to be transmitted
    for (uint32_t i = 0; i < Len; i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e031      	b.n	8000b86 <USART_SendData+0x76>
    {
        // 1. Wait until TXE (Transmit Data Register Empty) flag is set
        while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000b22:	bf00      	nop
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2180      	movs	r1, #128	@ 0x80
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f83e 	bl	8000bac <USART_GetFlagStatus>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f6      	beq.n	8000b24 <USART_SendData+0x14>

        // 2. Check word length
        if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	7b5b      	ldrb	r3, [r3, #13]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d118      	bne.n	8000b70 <USART_SendData+0x60>
        {
            // If 9-bit data frame
            pdata = (uint16_t*) pTxBuffer;
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	613b      	str	r3, [r7, #16]
            pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF); // Send 9 bits
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28

            // If parity is disabled → 9 bits used (2 bytes), so move buffer by 2
            if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	7b9b      	ldrb	r3, [r3, #14]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d106      	bne.n	8000b68 <USART_SendData+0x58>
            {
                pTxBuffer++;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
                pTxBuffer++;
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	3301      	adds	r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	e00b      	b.n	8000b80 <USART_SendData+0x70>
            }
            else
            {
                // If parity enabled , 8 data bits + 1 parity bit, so move buffer by 1
                pTxBuffer++;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	e007      	b.n	8000b80 <USART_SendData+0x70>
            }
        }
        else
        {
            // If 8-bit data frame
            pUSARTHandle->pUSARTx->TDR = (*pTxBuffer & (uint8_t)0xFF); // Send 8 bits
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	629a      	str	r2, [r3, #40]	@ 0x28
            pTxBuffer++;  // Move to next byte
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < Len; i++)
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	3301      	adds	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d3c9      	bcc.n	8000b22 <USART_SendData+0x12>
        }
    }

    // 3. Wait for TC (Transmission Complete) flag before returning
    while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000b8e:	bf00      	nop
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2140      	movs	r1, #64	@ 0x40
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f808 	bl	8000bac <USART_GetFlagStatus>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f6      	beq.n	8000b90 <USART_SendData+0x80>
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <USART_GetFlagStatus>:
}


// Checks the status of a given USART flag
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69da      	ldr	r2, [r3, #28]
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <std>:
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	b510      	push	{r4, lr}
 8000bd8:	4604      	mov	r4, r0
 8000bda:	e9c0 3300 	strd	r3, r3, [r0]
 8000bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000be2:	6083      	str	r3, [r0, #8]
 8000be4:	8181      	strh	r1, [r0, #12]
 8000be6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000be8:	81c2      	strh	r2, [r0, #14]
 8000bea:	6183      	str	r3, [r0, #24]
 8000bec:	4619      	mov	r1, r3
 8000bee:	2208      	movs	r2, #8
 8000bf0:	305c      	adds	r0, #92	@ 0x5c
 8000bf2:	f000 f9e7 	bl	8000fc4 <memset>
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <std+0x58>)
 8000bf8:	6263      	str	r3, [r4, #36]	@ 0x24
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <std+0x5c>)
 8000bfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <std+0x60>)
 8000c00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <std+0x64>)
 8000c04:	6323      	str	r3, [r4, #48]	@ 0x30
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <std+0x68>)
 8000c08:	6224      	str	r4, [r4, #32]
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	d006      	beq.n	8000c1c <std+0x48>
 8000c0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000c12:	4294      	cmp	r4, r2
 8000c14:	d002      	beq.n	8000c1c <std+0x48>
 8000c16:	33d0      	adds	r3, #208	@ 0xd0
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	d105      	bne.n	8000c28 <std+0x54>
 8000c1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c24:	f000 ba46 	b.w	80010b4 <__retarget_lock_init_recursive>
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08000e15 	.word	0x08000e15
 8000c30:	08000e37 	.word	0x08000e37
 8000c34:	08000e6f 	.word	0x08000e6f
 8000c38:	08000e93 	.word	0x08000e93
 8000c3c:	200000d4 	.word	0x200000d4

08000c40 <stdio_exit_handler>:
 8000c40:	4a02      	ldr	r2, [pc, #8]	@ (8000c4c <stdio_exit_handler+0xc>)
 8000c42:	4903      	ldr	r1, [pc, #12]	@ (8000c50 <stdio_exit_handler+0x10>)
 8000c44:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <stdio_exit_handler+0x14>)
 8000c46:	f000 b869 	b.w	8000d1c <_fwalk_sglue>
 8000c4a:	bf00      	nop
 8000c4c:	20000034 	.word	0x20000034
 8000c50:	080013ad 	.word	0x080013ad
 8000c54:	20000044 	.word	0x20000044

08000c58 <cleanup_stdio>:
 8000c58:	6841      	ldr	r1, [r0, #4]
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <cleanup_stdio+0x34>)
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	b510      	push	{r4, lr}
 8000c60:	4604      	mov	r4, r0
 8000c62:	d001      	beq.n	8000c68 <cleanup_stdio+0x10>
 8000c64:	f000 fba2 	bl	80013ac <_fflush_r>
 8000c68:	68a1      	ldr	r1, [r4, #8]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <cleanup_stdio+0x38>)
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d002      	beq.n	8000c76 <cleanup_stdio+0x1e>
 8000c70:	4620      	mov	r0, r4
 8000c72:	f000 fb9b 	bl	80013ac <_fflush_r>
 8000c76:	68e1      	ldr	r1, [r4, #12]
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <cleanup_stdio+0x3c>)
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d004      	beq.n	8000c88 <cleanup_stdio+0x30>
 8000c7e:	4620      	mov	r0, r4
 8000c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c84:	f000 bb92 	b.w	80013ac <_fflush_r>
 8000c88:	bd10      	pop	{r4, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000d4 	.word	0x200000d4
 8000c90:	2000013c 	.word	0x2000013c
 8000c94:	200001a4 	.word	0x200001a4

08000c98 <global_stdio_init.part.0>:
 8000c98:	b510      	push	{r4, lr}
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <global_stdio_init.part.0+0x30>)
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	@ (8000ccc <global_stdio_init.part.0+0x34>)
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <global_stdio_init.part.0+0x38>)
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	f7ff ff94 	bl	8000bd4 <std>
 8000cac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2109      	movs	r1, #9
 8000cb4:	f7ff ff8e 	bl	8000bd4 <std>
 8000cb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cc2:	2112      	movs	r1, #18
 8000cc4:	f7ff bf86 	b.w	8000bd4 <std>
 8000cc8:	2000020c 	.word	0x2000020c
 8000ccc:	200000d4 	.word	0x200000d4
 8000cd0:	08000c41 	.word	0x08000c41

08000cd4 <__sfp_lock_acquire>:
 8000cd4:	4801      	ldr	r0, [pc, #4]	@ (8000cdc <__sfp_lock_acquire+0x8>)
 8000cd6:	f000 b9ee 	b.w	80010b6 <__retarget_lock_acquire_recursive>
 8000cda:	bf00      	nop
 8000cdc:	20000215 	.word	0x20000215

08000ce0 <__sfp_lock_release>:
 8000ce0:	4801      	ldr	r0, [pc, #4]	@ (8000ce8 <__sfp_lock_release+0x8>)
 8000ce2:	f000 b9e9 	b.w	80010b8 <__retarget_lock_release_recursive>
 8000ce6:	bf00      	nop
 8000ce8:	20000215 	.word	0x20000215

08000cec <__sinit>:
 8000cec:	b510      	push	{r4, lr}
 8000cee:	4604      	mov	r4, r0
 8000cf0:	f7ff fff0 	bl	8000cd4 <__sfp_lock_acquire>
 8000cf4:	6a23      	ldr	r3, [r4, #32]
 8000cf6:	b11b      	cbz	r3, 8000d00 <__sinit+0x14>
 8000cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cfc:	f7ff bff0 	b.w	8000ce0 <__sfp_lock_release>
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__sinit+0x28>)
 8000d02:	6223      	str	r3, [r4, #32]
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <__sinit+0x2c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f5      	bne.n	8000cf8 <__sinit+0xc>
 8000d0c:	f7ff ffc4 	bl	8000c98 <global_stdio_init.part.0>
 8000d10:	e7f2      	b.n	8000cf8 <__sinit+0xc>
 8000d12:	bf00      	nop
 8000d14:	08000c59 	.word	0x08000c59
 8000d18:	2000020c 	.word	0x2000020c

08000d1c <_fwalk_sglue>:
 8000d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d20:	4607      	mov	r7, r0
 8000d22:	4688      	mov	r8, r1
 8000d24:	4614      	mov	r4, r2
 8000d26:	2600      	movs	r6, #0
 8000d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8000d30:	d505      	bpl.n	8000d3e <_fwalk_sglue+0x22>
 8000d32:	6824      	ldr	r4, [r4, #0]
 8000d34:	2c00      	cmp	r4, #0
 8000d36:	d1f7      	bne.n	8000d28 <_fwalk_sglue+0xc>
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d3e:	89ab      	ldrh	r3, [r5, #12]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d907      	bls.n	8000d54 <_fwalk_sglue+0x38>
 8000d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	d003      	beq.n	8000d54 <_fwalk_sglue+0x38>
 8000d4c:	4629      	mov	r1, r5
 8000d4e:	4638      	mov	r0, r7
 8000d50:	47c0      	blx	r8
 8000d52:	4306      	orrs	r6, r0
 8000d54:	3568      	adds	r5, #104	@ 0x68
 8000d56:	e7e9      	b.n	8000d2c <_fwalk_sglue+0x10>

08000d58 <_puts_r>:
 8000d58:	6a03      	ldr	r3, [r0, #32]
 8000d5a:	b570      	push	{r4, r5, r6, lr}
 8000d5c:	6884      	ldr	r4, [r0, #8]
 8000d5e:	4605      	mov	r5, r0
 8000d60:	460e      	mov	r6, r1
 8000d62:	b90b      	cbnz	r3, 8000d68 <_puts_r+0x10>
 8000d64:	f7ff ffc2 	bl	8000cec <__sinit>
 8000d68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d6a:	07db      	lsls	r3, r3, #31
 8000d6c:	d405      	bmi.n	8000d7a <_puts_r+0x22>
 8000d6e:	89a3      	ldrh	r3, [r4, #12]
 8000d70:	0598      	lsls	r0, r3, #22
 8000d72:	d402      	bmi.n	8000d7a <_puts_r+0x22>
 8000d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d76:	f000 f99e 	bl	80010b6 <__retarget_lock_acquire_recursive>
 8000d7a:	89a3      	ldrh	r3, [r4, #12]
 8000d7c:	0719      	lsls	r1, r3, #28
 8000d7e:	d502      	bpl.n	8000d86 <_puts_r+0x2e>
 8000d80:	6923      	ldr	r3, [r4, #16]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d135      	bne.n	8000df2 <_puts_r+0x9a>
 8000d86:	4621      	mov	r1, r4
 8000d88:	4628      	mov	r0, r5
 8000d8a:	f000 f8c5 	bl	8000f18 <__swsetup_r>
 8000d8e:	b380      	cbz	r0, 8000df2 <_puts_r+0x9a>
 8000d90:	f04f 35ff 	mov.w	r5, #4294967295
 8000d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d96:	07da      	lsls	r2, r3, #31
 8000d98:	d405      	bmi.n	8000da6 <_puts_r+0x4e>
 8000d9a:	89a3      	ldrh	r3, [r4, #12]
 8000d9c:	059b      	lsls	r3, r3, #22
 8000d9e:	d402      	bmi.n	8000da6 <_puts_r+0x4e>
 8000da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000da2:	f000 f989 	bl	80010b8 <__retarget_lock_release_recursive>
 8000da6:	4628      	mov	r0, r5
 8000da8:	bd70      	pop	{r4, r5, r6, pc}
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	da04      	bge.n	8000db8 <_puts_r+0x60>
 8000dae:	69a2      	ldr	r2, [r4, #24]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dc17      	bgt.n	8000de4 <_puts_r+0x8c>
 8000db4:	290a      	cmp	r1, #10
 8000db6:	d015      	beq.n	8000de4 <_puts_r+0x8c>
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	6022      	str	r2, [r4, #0]
 8000dbe:	7019      	strb	r1, [r3, #0]
 8000dc0:	68a3      	ldr	r3, [r4, #8]
 8000dc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	60a3      	str	r3, [r4, #8]
 8000dca:	2900      	cmp	r1, #0
 8000dcc:	d1ed      	bne.n	8000daa <_puts_r+0x52>
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da11      	bge.n	8000df6 <_puts_r+0x9e>
 8000dd2:	4622      	mov	r2, r4
 8000dd4:	210a      	movs	r1, #10
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f000 f85f 	bl	8000e9a <__swbuf_r>
 8000ddc:	3001      	adds	r0, #1
 8000dde:	d0d7      	beq.n	8000d90 <_puts_r+0x38>
 8000de0:	250a      	movs	r5, #10
 8000de2:	e7d7      	b.n	8000d94 <_puts_r+0x3c>
 8000de4:	4622      	mov	r2, r4
 8000de6:	4628      	mov	r0, r5
 8000de8:	f000 f857 	bl	8000e9a <__swbuf_r>
 8000dec:	3001      	adds	r0, #1
 8000dee:	d1e7      	bne.n	8000dc0 <_puts_r+0x68>
 8000df0:	e7ce      	b.n	8000d90 <_puts_r+0x38>
 8000df2:	3e01      	subs	r6, #1
 8000df4:	e7e4      	b.n	8000dc0 <_puts_r+0x68>
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	6022      	str	r2, [r4, #0]
 8000dfc:	220a      	movs	r2, #10
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e7ee      	b.n	8000de0 <_puts_r+0x88>
	...

08000e04 <puts>:
 8000e04:	4b02      	ldr	r3, [pc, #8]	@ (8000e10 <puts+0xc>)
 8000e06:	4601      	mov	r1, r0
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	f7ff bfa5 	b.w	8000d58 <_puts_r>
 8000e0e:	bf00      	nop
 8000e10:	20000040 	.word	0x20000040

08000e14 <__sread>:
 8000e14:	b510      	push	{r4, lr}
 8000e16:	460c      	mov	r4, r1
 8000e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e1c:	f000 f8fc 	bl	8001018 <_read_r>
 8000e20:	2800      	cmp	r0, #0
 8000e22:	bfab      	itete	ge
 8000e24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000e26:	89a3      	ldrhlt	r3, [r4, #12]
 8000e28:	181b      	addge	r3, r3, r0
 8000e2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000e2e:	bfac      	ite	ge
 8000e30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000e32:	81a3      	strhlt	r3, [r4, #12]
 8000e34:	bd10      	pop	{r4, pc}

08000e36 <__swrite>:
 8000e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e3a:	461f      	mov	r7, r3
 8000e3c:	898b      	ldrh	r3, [r1, #12]
 8000e3e:	05db      	lsls	r3, r3, #23
 8000e40:	4605      	mov	r5, r0
 8000e42:	460c      	mov	r4, r1
 8000e44:	4616      	mov	r6, r2
 8000e46:	d505      	bpl.n	8000e54 <__swrite+0x1e>
 8000e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f000 f8d0 	bl	8000ff4 <_lseek_r>
 8000e54:	89a3      	ldrh	r3, [r4, #12]
 8000e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e5e:	81a3      	strh	r3, [r4, #12]
 8000e60:	4632      	mov	r2, r6
 8000e62:	463b      	mov	r3, r7
 8000e64:	4628      	mov	r0, r5
 8000e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e6a:	f000 b8e7 	b.w	800103c <_write_r>

08000e6e <__sseek>:
 8000e6e:	b510      	push	{r4, lr}
 8000e70:	460c      	mov	r4, r1
 8000e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e76:	f000 f8bd 	bl	8000ff4 <_lseek_r>
 8000e7a:	1c43      	adds	r3, r0, #1
 8000e7c:	89a3      	ldrh	r3, [r4, #12]
 8000e7e:	bf15      	itete	ne
 8000e80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e8a:	81a3      	strheq	r3, [r4, #12]
 8000e8c:	bf18      	it	ne
 8000e8e:	81a3      	strhne	r3, [r4, #12]
 8000e90:	bd10      	pop	{r4, pc}

08000e92 <__sclose>:
 8000e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e96:	f000 b89d 	b.w	8000fd4 <_close_r>

08000e9a <__swbuf_r>:
 8000e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9c:	460e      	mov	r6, r1
 8000e9e:	4614      	mov	r4, r2
 8000ea0:	4605      	mov	r5, r0
 8000ea2:	b118      	cbz	r0, 8000eac <__swbuf_r+0x12>
 8000ea4:	6a03      	ldr	r3, [r0, #32]
 8000ea6:	b90b      	cbnz	r3, 8000eac <__swbuf_r+0x12>
 8000ea8:	f7ff ff20 	bl	8000cec <__sinit>
 8000eac:	69a3      	ldr	r3, [r4, #24]
 8000eae:	60a3      	str	r3, [r4, #8]
 8000eb0:	89a3      	ldrh	r3, [r4, #12]
 8000eb2:	071a      	lsls	r2, r3, #28
 8000eb4:	d501      	bpl.n	8000eba <__swbuf_r+0x20>
 8000eb6:	6923      	ldr	r3, [r4, #16]
 8000eb8:	b943      	cbnz	r3, 8000ecc <__swbuf_r+0x32>
 8000eba:	4621      	mov	r1, r4
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	f000 f82b 	bl	8000f18 <__swsetup_r>
 8000ec2:	b118      	cbz	r0, 8000ecc <__swbuf_r+0x32>
 8000ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8000ec8:	4638      	mov	r0, r7
 8000eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	6922      	ldr	r2, [r4, #16]
 8000ed0:	1a98      	subs	r0, r3, r2
 8000ed2:	6963      	ldr	r3, [r4, #20]
 8000ed4:	b2f6      	uxtb	r6, r6
 8000ed6:	4283      	cmp	r3, r0
 8000ed8:	4637      	mov	r7, r6
 8000eda:	dc05      	bgt.n	8000ee8 <__swbuf_r+0x4e>
 8000edc:	4621      	mov	r1, r4
 8000ede:	4628      	mov	r0, r5
 8000ee0:	f000 fa64 	bl	80013ac <_fflush_r>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d1ed      	bne.n	8000ec4 <__swbuf_r+0x2a>
 8000ee8:	68a3      	ldr	r3, [r4, #8]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	60a3      	str	r3, [r4, #8]
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	6022      	str	r2, [r4, #0]
 8000ef4:	701e      	strb	r6, [r3, #0]
 8000ef6:	6962      	ldr	r2, [r4, #20]
 8000ef8:	1c43      	adds	r3, r0, #1
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d004      	beq.n	8000f08 <__swbuf_r+0x6e>
 8000efe:	89a3      	ldrh	r3, [r4, #12]
 8000f00:	07db      	lsls	r3, r3, #31
 8000f02:	d5e1      	bpl.n	8000ec8 <__swbuf_r+0x2e>
 8000f04:	2e0a      	cmp	r6, #10
 8000f06:	d1df      	bne.n	8000ec8 <__swbuf_r+0x2e>
 8000f08:	4621      	mov	r1, r4
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	f000 fa4e 	bl	80013ac <_fflush_r>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d0d9      	beq.n	8000ec8 <__swbuf_r+0x2e>
 8000f14:	e7d6      	b.n	8000ec4 <__swbuf_r+0x2a>
	...

08000f18 <__swsetup_r>:
 8000f18:	b538      	push	{r3, r4, r5, lr}
 8000f1a:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <__swsetup_r+0xa8>)
 8000f1c:	4605      	mov	r5, r0
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	460c      	mov	r4, r1
 8000f22:	b118      	cbz	r0, 8000f2c <__swsetup_r+0x14>
 8000f24:	6a03      	ldr	r3, [r0, #32]
 8000f26:	b90b      	cbnz	r3, 8000f2c <__swsetup_r+0x14>
 8000f28:	f7ff fee0 	bl	8000cec <__sinit>
 8000f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f30:	0719      	lsls	r1, r3, #28
 8000f32:	d422      	bmi.n	8000f7a <__swsetup_r+0x62>
 8000f34:	06da      	lsls	r2, r3, #27
 8000f36:	d407      	bmi.n	8000f48 <__swsetup_r+0x30>
 8000f38:	2209      	movs	r2, #9
 8000f3a:	602a      	str	r2, [r5, #0]
 8000f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f40:	81a3      	strh	r3, [r4, #12]
 8000f42:	f04f 30ff 	mov.w	r0, #4294967295
 8000f46:	e033      	b.n	8000fb0 <__swsetup_r+0x98>
 8000f48:	0758      	lsls	r0, r3, #29
 8000f4a:	d512      	bpl.n	8000f72 <__swsetup_r+0x5a>
 8000f4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000f4e:	b141      	cbz	r1, 8000f62 <__swsetup_r+0x4a>
 8000f50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000f54:	4299      	cmp	r1, r3
 8000f56:	d002      	beq.n	8000f5e <__swsetup_r+0x46>
 8000f58:	4628      	mov	r0, r5
 8000f5a:	f000 f8af 	bl	80010bc <_free_r>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	6363      	str	r3, [r4, #52]	@ 0x34
 8000f62:	89a3      	ldrh	r3, [r4, #12]
 8000f64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000f68:	81a3      	strh	r3, [r4, #12]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	6063      	str	r3, [r4, #4]
 8000f6e:	6923      	ldr	r3, [r4, #16]
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	89a3      	ldrh	r3, [r4, #12]
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	81a3      	strh	r3, [r4, #12]
 8000f7a:	6923      	ldr	r3, [r4, #16]
 8000f7c:	b94b      	cbnz	r3, 8000f92 <__swsetup_r+0x7a>
 8000f7e:	89a3      	ldrh	r3, [r4, #12]
 8000f80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f88:	d003      	beq.n	8000f92 <__swsetup_r+0x7a>
 8000f8a:	4621      	mov	r1, r4
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	f000 fa5b 	bl	8001448 <__smakebuf_r>
 8000f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f96:	f013 0201 	ands.w	r2, r3, #1
 8000f9a:	d00a      	beq.n	8000fb2 <__swsetup_r+0x9a>
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60a2      	str	r2, [r4, #8]
 8000fa0:	6962      	ldr	r2, [r4, #20]
 8000fa2:	4252      	negs	r2, r2
 8000fa4:	61a2      	str	r2, [r4, #24]
 8000fa6:	6922      	ldr	r2, [r4, #16]
 8000fa8:	b942      	cbnz	r2, 8000fbc <__swsetup_r+0xa4>
 8000faa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000fae:	d1c5      	bne.n	8000f3c <__swsetup_r+0x24>
 8000fb0:	bd38      	pop	{r3, r4, r5, pc}
 8000fb2:	0799      	lsls	r1, r3, #30
 8000fb4:	bf58      	it	pl
 8000fb6:	6962      	ldrpl	r2, [r4, #20]
 8000fb8:	60a2      	str	r2, [r4, #8]
 8000fba:	e7f4      	b.n	8000fa6 <__swsetup_r+0x8e>
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	e7f7      	b.n	8000fb0 <__swsetup_r+0x98>
 8000fc0:	20000040 	.word	0x20000040

08000fc4 <memset>:
 8000fc4:	4402      	add	r2, r0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d100      	bne.n	8000fce <memset+0xa>
 8000fcc:	4770      	bx	lr
 8000fce:	f803 1b01 	strb.w	r1, [r3], #1
 8000fd2:	e7f9      	b.n	8000fc8 <memset+0x4>

08000fd4 <_close_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	4d06      	ldr	r5, [pc, #24]	@ (8000ff0 <_close_r+0x1c>)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	4608      	mov	r0, r1
 8000fde:	602b      	str	r3, [r5, #0]
 8000fe0:	f7ff fa2d 	bl	800043e <_close>
 8000fe4:	1c43      	adds	r3, r0, #1
 8000fe6:	d102      	bne.n	8000fee <_close_r+0x1a>
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	b103      	cbz	r3, 8000fee <_close_r+0x1a>
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
 8000ff0:	20000210 	.word	0x20000210

08000ff4 <_lseek_r>:
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	4d07      	ldr	r5, [pc, #28]	@ (8001014 <_lseek_r+0x20>)
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	602a      	str	r2, [r5, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	f7ff fa3f 	bl	8000486 <_lseek>
 8001008:	1c43      	adds	r3, r0, #1
 800100a:	d102      	bne.n	8001012 <_lseek_r+0x1e>
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	b103      	cbz	r3, 8001012 <_lseek_r+0x1e>
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	bd38      	pop	{r3, r4, r5, pc}
 8001014:	20000210 	.word	0x20000210

08001018 <_read_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4d07      	ldr	r5, [pc, #28]	@ (8001038 <_read_r+0x20>)
 800101c:	4604      	mov	r4, r0
 800101e:	4608      	mov	r0, r1
 8001020:	4611      	mov	r1, r2
 8001022:	2200      	movs	r2, #0
 8001024:	602a      	str	r2, [r5, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	f7ff f9d0 	bl	80003cc <_read>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_read_r+0x1e>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_read_r+0x1e>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	20000210 	.word	0x20000210

0800103c <_write_r>:
 800103c:	b538      	push	{r3, r4, r5, lr}
 800103e:	4d07      	ldr	r5, [pc, #28]	@ (800105c <_write_r+0x20>)
 8001040:	4604      	mov	r4, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4611      	mov	r1, r2
 8001046:	2200      	movs	r2, #0
 8001048:	602a      	str	r2, [r5, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	f7ff f9db 	bl	8000406 <_write>
 8001050:	1c43      	adds	r3, r0, #1
 8001052:	d102      	bne.n	800105a <_write_r+0x1e>
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	b103      	cbz	r3, 800105a <_write_r+0x1e>
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	20000210 	.word	0x20000210

08001060 <__errno>:
 8001060:	4b01      	ldr	r3, [pc, #4]	@ (8001068 <__errno+0x8>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000040 	.word	0x20000040

0800106c <__libc_init_array>:
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	4d0d      	ldr	r5, [pc, #52]	@ (80010a4 <__libc_init_array+0x38>)
 8001070:	4c0d      	ldr	r4, [pc, #52]	@ (80010a8 <__libc_init_array+0x3c>)
 8001072:	1b64      	subs	r4, r4, r5
 8001074:	10a4      	asrs	r4, r4, #2
 8001076:	2600      	movs	r6, #0
 8001078:	42a6      	cmp	r6, r4
 800107a:	d109      	bne.n	8001090 <__libc_init_array+0x24>
 800107c:	4d0b      	ldr	r5, [pc, #44]	@ (80010ac <__libc_init_array+0x40>)
 800107e:	4c0c      	ldr	r4, [pc, #48]	@ (80010b0 <__libc_init_array+0x44>)
 8001080:	f000 fa50 	bl	8001524 <_init>
 8001084:	1b64      	subs	r4, r4, r5
 8001086:	10a4      	asrs	r4, r4, #2
 8001088:	2600      	movs	r6, #0
 800108a:	42a6      	cmp	r6, r4
 800108c:	d105      	bne.n	800109a <__libc_init_array+0x2e>
 800108e:	bd70      	pop	{r4, r5, r6, pc}
 8001090:	f855 3b04 	ldr.w	r3, [r5], #4
 8001094:	4798      	blx	r3
 8001096:	3601      	adds	r6, #1
 8001098:	e7ee      	b.n	8001078 <__libc_init_array+0xc>
 800109a:	f855 3b04 	ldr.w	r3, [r5], #4
 800109e:	4798      	blx	r3
 80010a0:	3601      	adds	r6, #1
 80010a2:	e7f2      	b.n	800108a <__libc_init_array+0x1e>
 80010a4:	08001564 	.word	0x08001564
 80010a8:	08001564 	.word	0x08001564
 80010ac:	08001564 	.word	0x08001564
 80010b0:	08001568 	.word	0x08001568

080010b4 <__retarget_lock_init_recursive>:
 80010b4:	4770      	bx	lr

080010b6 <__retarget_lock_acquire_recursive>:
 80010b6:	4770      	bx	lr

080010b8 <__retarget_lock_release_recursive>:
 80010b8:	4770      	bx	lr
	...

080010bc <_free_r>:
 80010bc:	b538      	push	{r3, r4, r5, lr}
 80010be:	4605      	mov	r5, r0
 80010c0:	2900      	cmp	r1, #0
 80010c2:	d041      	beq.n	8001148 <_free_r+0x8c>
 80010c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010c8:	1f0c      	subs	r4, r1, #4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bfb8      	it	lt
 80010ce:	18e4      	addlt	r4, r4, r3
 80010d0:	f000 f8e0 	bl	8001294 <__malloc_lock>
 80010d4:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <_free_r+0x90>)
 80010d6:	6813      	ldr	r3, [r2, #0]
 80010d8:	b933      	cbnz	r3, 80010e8 <_free_r+0x2c>
 80010da:	6063      	str	r3, [r4, #4]
 80010dc:	6014      	str	r4, [r2, #0]
 80010de:	4628      	mov	r0, r5
 80010e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010e4:	f000 b8dc 	b.w	80012a0 <__malloc_unlock>
 80010e8:	42a3      	cmp	r3, r4
 80010ea:	d908      	bls.n	80010fe <_free_r+0x42>
 80010ec:	6820      	ldr	r0, [r4, #0]
 80010ee:	1821      	adds	r1, r4, r0
 80010f0:	428b      	cmp	r3, r1
 80010f2:	bf01      	itttt	eq
 80010f4:	6819      	ldreq	r1, [r3, #0]
 80010f6:	685b      	ldreq	r3, [r3, #4]
 80010f8:	1809      	addeq	r1, r1, r0
 80010fa:	6021      	streq	r1, [r4, #0]
 80010fc:	e7ed      	b.n	80010da <_free_r+0x1e>
 80010fe:	461a      	mov	r2, r3
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	b10b      	cbz	r3, 8001108 <_free_r+0x4c>
 8001104:	42a3      	cmp	r3, r4
 8001106:	d9fa      	bls.n	80010fe <_free_r+0x42>
 8001108:	6811      	ldr	r1, [r2, #0]
 800110a:	1850      	adds	r0, r2, r1
 800110c:	42a0      	cmp	r0, r4
 800110e:	d10b      	bne.n	8001128 <_free_r+0x6c>
 8001110:	6820      	ldr	r0, [r4, #0]
 8001112:	4401      	add	r1, r0
 8001114:	1850      	adds	r0, r2, r1
 8001116:	4283      	cmp	r3, r0
 8001118:	6011      	str	r1, [r2, #0]
 800111a:	d1e0      	bne.n	80010de <_free_r+0x22>
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	6053      	str	r3, [r2, #4]
 8001122:	4408      	add	r0, r1
 8001124:	6010      	str	r0, [r2, #0]
 8001126:	e7da      	b.n	80010de <_free_r+0x22>
 8001128:	d902      	bls.n	8001130 <_free_r+0x74>
 800112a:	230c      	movs	r3, #12
 800112c:	602b      	str	r3, [r5, #0]
 800112e:	e7d6      	b.n	80010de <_free_r+0x22>
 8001130:	6820      	ldr	r0, [r4, #0]
 8001132:	1821      	adds	r1, r4, r0
 8001134:	428b      	cmp	r3, r1
 8001136:	bf04      	itt	eq
 8001138:	6819      	ldreq	r1, [r3, #0]
 800113a:	685b      	ldreq	r3, [r3, #4]
 800113c:	6063      	str	r3, [r4, #4]
 800113e:	bf04      	itt	eq
 8001140:	1809      	addeq	r1, r1, r0
 8001142:	6021      	streq	r1, [r4, #0]
 8001144:	6054      	str	r4, [r2, #4]
 8001146:	e7ca      	b.n	80010de <_free_r+0x22>
 8001148:	bd38      	pop	{r3, r4, r5, pc}
 800114a:	bf00      	nop
 800114c:	2000021c 	.word	0x2000021c

08001150 <sbrk_aligned>:
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	4e0f      	ldr	r6, [pc, #60]	@ (8001190 <sbrk_aligned+0x40>)
 8001154:	460c      	mov	r4, r1
 8001156:	6831      	ldr	r1, [r6, #0]
 8001158:	4605      	mov	r5, r0
 800115a:	b911      	cbnz	r1, 8001162 <sbrk_aligned+0x12>
 800115c:	f000 f9d2 	bl	8001504 <_sbrk_r>
 8001160:	6030      	str	r0, [r6, #0]
 8001162:	4621      	mov	r1, r4
 8001164:	4628      	mov	r0, r5
 8001166:	f000 f9cd 	bl	8001504 <_sbrk_r>
 800116a:	1c43      	adds	r3, r0, #1
 800116c:	d103      	bne.n	8001176 <sbrk_aligned+0x26>
 800116e:	f04f 34ff 	mov.w	r4, #4294967295
 8001172:	4620      	mov	r0, r4
 8001174:	bd70      	pop	{r4, r5, r6, pc}
 8001176:	1cc4      	adds	r4, r0, #3
 8001178:	f024 0403 	bic.w	r4, r4, #3
 800117c:	42a0      	cmp	r0, r4
 800117e:	d0f8      	beq.n	8001172 <sbrk_aligned+0x22>
 8001180:	1a21      	subs	r1, r4, r0
 8001182:	4628      	mov	r0, r5
 8001184:	f000 f9be 	bl	8001504 <_sbrk_r>
 8001188:	3001      	adds	r0, #1
 800118a:	d1f2      	bne.n	8001172 <sbrk_aligned+0x22>
 800118c:	e7ef      	b.n	800116e <sbrk_aligned+0x1e>
 800118e:	bf00      	nop
 8001190:	20000218 	.word	0x20000218

08001194 <_malloc_r>:
 8001194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001198:	1ccd      	adds	r5, r1, #3
 800119a:	f025 0503 	bic.w	r5, r5, #3
 800119e:	3508      	adds	r5, #8
 80011a0:	2d0c      	cmp	r5, #12
 80011a2:	bf38      	it	cc
 80011a4:	250c      	movcc	r5, #12
 80011a6:	2d00      	cmp	r5, #0
 80011a8:	4606      	mov	r6, r0
 80011aa:	db01      	blt.n	80011b0 <_malloc_r+0x1c>
 80011ac:	42a9      	cmp	r1, r5
 80011ae:	d904      	bls.n	80011ba <_malloc_r+0x26>
 80011b0:	230c      	movs	r3, #12
 80011b2:	6033      	str	r3, [r6, #0]
 80011b4:	2000      	movs	r0, #0
 80011b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001290 <_malloc_r+0xfc>
 80011be:	f000 f869 	bl	8001294 <__malloc_lock>
 80011c2:	f8d8 3000 	ldr.w	r3, [r8]
 80011c6:	461c      	mov	r4, r3
 80011c8:	bb44      	cbnz	r4, 800121c <_malloc_r+0x88>
 80011ca:	4629      	mov	r1, r5
 80011cc:	4630      	mov	r0, r6
 80011ce:	f7ff ffbf 	bl	8001150 <sbrk_aligned>
 80011d2:	1c43      	adds	r3, r0, #1
 80011d4:	4604      	mov	r4, r0
 80011d6:	d158      	bne.n	800128a <_malloc_r+0xf6>
 80011d8:	f8d8 4000 	ldr.w	r4, [r8]
 80011dc:	4627      	mov	r7, r4
 80011de:	2f00      	cmp	r7, #0
 80011e0:	d143      	bne.n	800126a <_malloc_r+0xd6>
 80011e2:	2c00      	cmp	r4, #0
 80011e4:	d04b      	beq.n	800127e <_malloc_r+0xea>
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	4639      	mov	r1, r7
 80011ea:	4630      	mov	r0, r6
 80011ec:	eb04 0903 	add.w	r9, r4, r3
 80011f0:	f000 f988 	bl	8001504 <_sbrk_r>
 80011f4:	4581      	cmp	r9, r0
 80011f6:	d142      	bne.n	800127e <_malloc_r+0xea>
 80011f8:	6821      	ldr	r1, [r4, #0]
 80011fa:	1a6d      	subs	r5, r5, r1
 80011fc:	4629      	mov	r1, r5
 80011fe:	4630      	mov	r0, r6
 8001200:	f7ff ffa6 	bl	8001150 <sbrk_aligned>
 8001204:	3001      	adds	r0, #1
 8001206:	d03a      	beq.n	800127e <_malloc_r+0xea>
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	442b      	add	r3, r5
 800120c:	6023      	str	r3, [r4, #0]
 800120e:	f8d8 3000 	ldr.w	r3, [r8]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	bb62      	cbnz	r2, 8001270 <_malloc_r+0xdc>
 8001216:	f8c8 7000 	str.w	r7, [r8]
 800121a:	e00f      	b.n	800123c <_malloc_r+0xa8>
 800121c:	6822      	ldr	r2, [r4, #0]
 800121e:	1b52      	subs	r2, r2, r5
 8001220:	d420      	bmi.n	8001264 <_malloc_r+0xd0>
 8001222:	2a0b      	cmp	r2, #11
 8001224:	d917      	bls.n	8001256 <_malloc_r+0xc2>
 8001226:	1961      	adds	r1, r4, r5
 8001228:	42a3      	cmp	r3, r4
 800122a:	6025      	str	r5, [r4, #0]
 800122c:	bf18      	it	ne
 800122e:	6059      	strne	r1, [r3, #4]
 8001230:	6863      	ldr	r3, [r4, #4]
 8001232:	bf08      	it	eq
 8001234:	f8c8 1000 	streq.w	r1, [r8]
 8001238:	5162      	str	r2, [r4, r5]
 800123a:	604b      	str	r3, [r1, #4]
 800123c:	4630      	mov	r0, r6
 800123e:	f000 f82f 	bl	80012a0 <__malloc_unlock>
 8001242:	f104 000b 	add.w	r0, r4, #11
 8001246:	1d23      	adds	r3, r4, #4
 8001248:	f020 0007 	bic.w	r0, r0, #7
 800124c:	1ac2      	subs	r2, r0, r3
 800124e:	bf1c      	itt	ne
 8001250:	1a1b      	subne	r3, r3, r0
 8001252:	50a3      	strne	r3, [r4, r2]
 8001254:	e7af      	b.n	80011b6 <_malloc_r+0x22>
 8001256:	6862      	ldr	r2, [r4, #4]
 8001258:	42a3      	cmp	r3, r4
 800125a:	bf0c      	ite	eq
 800125c:	f8c8 2000 	streq.w	r2, [r8]
 8001260:	605a      	strne	r2, [r3, #4]
 8001262:	e7eb      	b.n	800123c <_malloc_r+0xa8>
 8001264:	4623      	mov	r3, r4
 8001266:	6864      	ldr	r4, [r4, #4]
 8001268:	e7ae      	b.n	80011c8 <_malloc_r+0x34>
 800126a:	463c      	mov	r4, r7
 800126c:	687f      	ldr	r7, [r7, #4]
 800126e:	e7b6      	b.n	80011de <_malloc_r+0x4a>
 8001270:	461a      	mov	r2, r3
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	42a3      	cmp	r3, r4
 8001276:	d1fb      	bne.n	8001270 <_malloc_r+0xdc>
 8001278:	2300      	movs	r3, #0
 800127a:	6053      	str	r3, [r2, #4]
 800127c:	e7de      	b.n	800123c <_malloc_r+0xa8>
 800127e:	230c      	movs	r3, #12
 8001280:	6033      	str	r3, [r6, #0]
 8001282:	4630      	mov	r0, r6
 8001284:	f000 f80c 	bl	80012a0 <__malloc_unlock>
 8001288:	e794      	b.n	80011b4 <_malloc_r+0x20>
 800128a:	6005      	str	r5, [r0, #0]
 800128c:	e7d6      	b.n	800123c <_malloc_r+0xa8>
 800128e:	bf00      	nop
 8001290:	2000021c 	.word	0x2000021c

08001294 <__malloc_lock>:
 8001294:	4801      	ldr	r0, [pc, #4]	@ (800129c <__malloc_lock+0x8>)
 8001296:	f7ff bf0e 	b.w	80010b6 <__retarget_lock_acquire_recursive>
 800129a:	bf00      	nop
 800129c:	20000214 	.word	0x20000214

080012a0 <__malloc_unlock>:
 80012a0:	4801      	ldr	r0, [pc, #4]	@ (80012a8 <__malloc_unlock+0x8>)
 80012a2:	f7ff bf09 	b.w	80010b8 <__retarget_lock_release_recursive>
 80012a6:	bf00      	nop
 80012a8:	20000214 	.word	0x20000214

080012ac <__sflush_r>:
 80012ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b2:	0716      	lsls	r6, r2, #28
 80012b4:	4605      	mov	r5, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	d454      	bmi.n	8001364 <__sflush_r+0xb8>
 80012ba:	684b      	ldr	r3, [r1, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	dc02      	bgt.n	80012c6 <__sflush_r+0x1a>
 80012c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	dd48      	ble.n	8001358 <__sflush_r+0xac>
 80012c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d045      	beq.n	8001358 <__sflush_r+0xac>
 80012cc:	2300      	movs	r3, #0
 80012ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80012d2:	682f      	ldr	r7, [r5, #0]
 80012d4:	6a21      	ldr	r1, [r4, #32]
 80012d6:	602b      	str	r3, [r5, #0]
 80012d8:	d030      	beq.n	800133c <__sflush_r+0x90>
 80012da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012dc:	89a3      	ldrh	r3, [r4, #12]
 80012de:	0759      	lsls	r1, r3, #29
 80012e0:	d505      	bpl.n	80012ee <__sflush_r+0x42>
 80012e2:	6863      	ldr	r3, [r4, #4]
 80012e4:	1ad2      	subs	r2, r2, r3
 80012e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012e8:	b10b      	cbz	r3, 80012ee <__sflush_r+0x42>
 80012ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012ec:	1ad2      	subs	r2, r2, r3
 80012ee:	2300      	movs	r3, #0
 80012f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012f2:	6a21      	ldr	r1, [r4, #32]
 80012f4:	4628      	mov	r0, r5
 80012f6:	47b0      	blx	r6
 80012f8:	1c43      	adds	r3, r0, #1
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	d106      	bne.n	800130c <__sflush_r+0x60>
 80012fe:	6829      	ldr	r1, [r5, #0]
 8001300:	291d      	cmp	r1, #29
 8001302:	d82b      	bhi.n	800135c <__sflush_r+0xb0>
 8001304:	4a28      	ldr	r2, [pc, #160]	@ (80013a8 <__sflush_r+0xfc>)
 8001306:	40ca      	lsrs	r2, r1
 8001308:	07d6      	lsls	r6, r2, #31
 800130a:	d527      	bpl.n	800135c <__sflush_r+0xb0>
 800130c:	2200      	movs	r2, #0
 800130e:	6062      	str	r2, [r4, #4]
 8001310:	04d9      	lsls	r1, r3, #19
 8001312:	6922      	ldr	r2, [r4, #16]
 8001314:	6022      	str	r2, [r4, #0]
 8001316:	d504      	bpl.n	8001322 <__sflush_r+0x76>
 8001318:	1c42      	adds	r2, r0, #1
 800131a:	d101      	bne.n	8001320 <__sflush_r+0x74>
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	b903      	cbnz	r3, 8001322 <__sflush_r+0x76>
 8001320:	6560      	str	r0, [r4, #84]	@ 0x54
 8001322:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001324:	602f      	str	r7, [r5, #0]
 8001326:	b1b9      	cbz	r1, 8001358 <__sflush_r+0xac>
 8001328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800132c:	4299      	cmp	r1, r3
 800132e:	d002      	beq.n	8001336 <__sflush_r+0x8a>
 8001330:	4628      	mov	r0, r5
 8001332:	f7ff fec3 	bl	80010bc <_free_r>
 8001336:	2300      	movs	r3, #0
 8001338:	6363      	str	r3, [r4, #52]	@ 0x34
 800133a:	e00d      	b.n	8001358 <__sflush_r+0xac>
 800133c:	2301      	movs	r3, #1
 800133e:	4628      	mov	r0, r5
 8001340:	47b0      	blx	r6
 8001342:	4602      	mov	r2, r0
 8001344:	1c50      	adds	r0, r2, #1
 8001346:	d1c9      	bne.n	80012dc <__sflush_r+0x30>
 8001348:	682b      	ldr	r3, [r5, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0c6      	beq.n	80012dc <__sflush_r+0x30>
 800134e:	2b1d      	cmp	r3, #29
 8001350:	d001      	beq.n	8001356 <__sflush_r+0xaa>
 8001352:	2b16      	cmp	r3, #22
 8001354:	d11d      	bne.n	8001392 <__sflush_r+0xe6>
 8001356:	602f      	str	r7, [r5, #0]
 8001358:	2000      	movs	r0, #0
 800135a:	e021      	b.n	80013a0 <__sflush_r+0xf4>
 800135c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001360:	b21b      	sxth	r3, r3
 8001362:	e01a      	b.n	800139a <__sflush_r+0xee>
 8001364:	690f      	ldr	r7, [r1, #16]
 8001366:	2f00      	cmp	r7, #0
 8001368:	d0f6      	beq.n	8001358 <__sflush_r+0xac>
 800136a:	0793      	lsls	r3, r2, #30
 800136c:	680e      	ldr	r6, [r1, #0]
 800136e:	bf08      	it	eq
 8001370:	694b      	ldreq	r3, [r1, #20]
 8001372:	600f      	str	r7, [r1, #0]
 8001374:	bf18      	it	ne
 8001376:	2300      	movne	r3, #0
 8001378:	1bf6      	subs	r6, r6, r7
 800137a:	608b      	str	r3, [r1, #8]
 800137c:	2e00      	cmp	r6, #0
 800137e:	ddeb      	ble.n	8001358 <__sflush_r+0xac>
 8001380:	6a21      	ldr	r1, [r4, #32]
 8001382:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001386:	4633      	mov	r3, r6
 8001388:	463a      	mov	r2, r7
 800138a:	4628      	mov	r0, r5
 800138c:	47e0      	blx	ip
 800138e:	2800      	cmp	r0, #0
 8001390:	dc07      	bgt.n	80013a2 <__sflush_r+0xf6>
 8001392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800139a:	81a3      	strh	r3, [r4, #12]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a2:	4407      	add	r7, r0
 80013a4:	1a36      	subs	r6, r6, r0
 80013a6:	e7e9      	b.n	800137c <__sflush_r+0xd0>
 80013a8:	20400001 	.word	0x20400001

080013ac <_fflush_r>:
 80013ac:	b538      	push	{r3, r4, r5, lr}
 80013ae:	690b      	ldr	r3, [r1, #16]
 80013b0:	4605      	mov	r5, r0
 80013b2:	460c      	mov	r4, r1
 80013b4:	b913      	cbnz	r3, 80013bc <_fflush_r+0x10>
 80013b6:	2500      	movs	r5, #0
 80013b8:	4628      	mov	r0, r5
 80013ba:	bd38      	pop	{r3, r4, r5, pc}
 80013bc:	b118      	cbz	r0, 80013c6 <_fflush_r+0x1a>
 80013be:	6a03      	ldr	r3, [r0, #32]
 80013c0:	b90b      	cbnz	r3, 80013c6 <_fflush_r+0x1a>
 80013c2:	f7ff fc93 	bl	8000cec <__sinit>
 80013c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f3      	beq.n	80013b6 <_fflush_r+0xa>
 80013ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80013d0:	07d0      	lsls	r0, r2, #31
 80013d2:	d404      	bmi.n	80013de <_fflush_r+0x32>
 80013d4:	0599      	lsls	r1, r3, #22
 80013d6:	d402      	bmi.n	80013de <_fflush_r+0x32>
 80013d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013da:	f7ff fe6c 	bl	80010b6 <__retarget_lock_acquire_recursive>
 80013de:	4628      	mov	r0, r5
 80013e0:	4621      	mov	r1, r4
 80013e2:	f7ff ff63 	bl	80012ac <__sflush_r>
 80013e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013e8:	07da      	lsls	r2, r3, #31
 80013ea:	4605      	mov	r5, r0
 80013ec:	d4e4      	bmi.n	80013b8 <_fflush_r+0xc>
 80013ee:	89a3      	ldrh	r3, [r4, #12]
 80013f0:	059b      	lsls	r3, r3, #22
 80013f2:	d4e1      	bmi.n	80013b8 <_fflush_r+0xc>
 80013f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013f6:	f7ff fe5f 	bl	80010b8 <__retarget_lock_release_recursive>
 80013fa:	e7dd      	b.n	80013b8 <_fflush_r+0xc>

080013fc <__swhatbuf_r>:
 80013fc:	b570      	push	{r4, r5, r6, lr}
 80013fe:	460c      	mov	r4, r1
 8001400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001404:	2900      	cmp	r1, #0
 8001406:	b096      	sub	sp, #88	@ 0x58
 8001408:	4615      	mov	r5, r2
 800140a:	461e      	mov	r6, r3
 800140c:	da0d      	bge.n	800142a <__swhatbuf_r+0x2e>
 800140e:	89a3      	ldrh	r3, [r4, #12]
 8001410:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001414:	f04f 0100 	mov.w	r1, #0
 8001418:	bf14      	ite	ne
 800141a:	2340      	movne	r3, #64	@ 0x40
 800141c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001420:	2000      	movs	r0, #0
 8001422:	6031      	str	r1, [r6, #0]
 8001424:	602b      	str	r3, [r5, #0]
 8001426:	b016      	add	sp, #88	@ 0x58
 8001428:	bd70      	pop	{r4, r5, r6, pc}
 800142a:	466a      	mov	r2, sp
 800142c:	f000 f848 	bl	80014c0 <_fstat_r>
 8001430:	2800      	cmp	r0, #0
 8001432:	dbec      	blt.n	800140e <__swhatbuf_r+0x12>
 8001434:	9901      	ldr	r1, [sp, #4]
 8001436:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800143a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800143e:	4259      	negs	r1, r3
 8001440:	4159      	adcs	r1, r3
 8001442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001446:	e7eb      	b.n	8001420 <__swhatbuf_r+0x24>

08001448 <__smakebuf_r>:
 8001448:	898b      	ldrh	r3, [r1, #12]
 800144a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800144c:	079d      	lsls	r5, r3, #30
 800144e:	4606      	mov	r6, r0
 8001450:	460c      	mov	r4, r1
 8001452:	d507      	bpl.n	8001464 <__smakebuf_r+0x1c>
 8001454:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001458:	6023      	str	r3, [r4, #0]
 800145a:	6123      	str	r3, [r4, #16]
 800145c:	2301      	movs	r3, #1
 800145e:	6163      	str	r3, [r4, #20]
 8001460:	b003      	add	sp, #12
 8001462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001464:	ab01      	add	r3, sp, #4
 8001466:	466a      	mov	r2, sp
 8001468:	f7ff ffc8 	bl	80013fc <__swhatbuf_r>
 800146c:	9f00      	ldr	r7, [sp, #0]
 800146e:	4605      	mov	r5, r0
 8001470:	4639      	mov	r1, r7
 8001472:	4630      	mov	r0, r6
 8001474:	f7ff fe8e 	bl	8001194 <_malloc_r>
 8001478:	b948      	cbnz	r0, 800148e <__smakebuf_r+0x46>
 800147a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800147e:	059a      	lsls	r2, r3, #22
 8001480:	d4ee      	bmi.n	8001460 <__smakebuf_r+0x18>
 8001482:	f023 0303 	bic.w	r3, r3, #3
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	81a3      	strh	r3, [r4, #12]
 800148c:	e7e2      	b.n	8001454 <__smakebuf_r+0xc>
 800148e:	89a3      	ldrh	r3, [r4, #12]
 8001490:	6020      	str	r0, [r4, #0]
 8001492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001496:	81a3      	strh	r3, [r4, #12]
 8001498:	9b01      	ldr	r3, [sp, #4]
 800149a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800149e:	b15b      	cbz	r3, 80014b8 <__smakebuf_r+0x70>
 80014a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014a4:	4630      	mov	r0, r6
 80014a6:	f000 f81d 	bl	80014e4 <_isatty_r>
 80014aa:	b128      	cbz	r0, 80014b8 <__smakebuf_r+0x70>
 80014ac:	89a3      	ldrh	r3, [r4, #12]
 80014ae:	f023 0303 	bic.w	r3, r3, #3
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	81a3      	strh	r3, [r4, #12]
 80014b8:	89a3      	ldrh	r3, [r4, #12]
 80014ba:	431d      	orrs	r5, r3
 80014bc:	81a5      	strh	r5, [r4, #12]
 80014be:	e7cf      	b.n	8001460 <__smakebuf_r+0x18>

080014c0 <_fstat_r>:
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	4d07      	ldr	r5, [pc, #28]	@ (80014e0 <_fstat_r+0x20>)
 80014c4:	2300      	movs	r3, #0
 80014c6:	4604      	mov	r4, r0
 80014c8:	4608      	mov	r0, r1
 80014ca:	4611      	mov	r1, r2
 80014cc:	602b      	str	r3, [r5, #0]
 80014ce:	f7fe ffc1 	bl	8000454 <_fstat>
 80014d2:	1c43      	adds	r3, r0, #1
 80014d4:	d102      	bne.n	80014dc <_fstat_r+0x1c>
 80014d6:	682b      	ldr	r3, [r5, #0]
 80014d8:	b103      	cbz	r3, 80014dc <_fstat_r+0x1c>
 80014da:	6023      	str	r3, [r4, #0]
 80014dc:	bd38      	pop	{r3, r4, r5, pc}
 80014de:	bf00      	nop
 80014e0:	20000210 	.word	0x20000210

080014e4 <_isatty_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4d06      	ldr	r5, [pc, #24]	@ (8001500 <_isatty_r+0x1c>)
 80014e8:	2300      	movs	r3, #0
 80014ea:	4604      	mov	r4, r0
 80014ec:	4608      	mov	r0, r1
 80014ee:	602b      	str	r3, [r5, #0]
 80014f0:	f7fe ffbf 	bl	8000472 <_isatty>
 80014f4:	1c43      	adds	r3, r0, #1
 80014f6:	d102      	bne.n	80014fe <_isatty_r+0x1a>
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	b103      	cbz	r3, 80014fe <_isatty_r+0x1a>
 80014fc:	6023      	str	r3, [r4, #0]
 80014fe:	bd38      	pop	{r3, r4, r5, pc}
 8001500:	20000210 	.word	0x20000210

08001504 <_sbrk_r>:
 8001504:	b538      	push	{r3, r4, r5, lr}
 8001506:	4d06      	ldr	r5, [pc, #24]	@ (8001520 <_sbrk_r+0x1c>)
 8001508:	2300      	movs	r3, #0
 800150a:	4604      	mov	r4, r0
 800150c:	4608      	mov	r0, r1
 800150e:	602b      	str	r3, [r5, #0]
 8001510:	f7fe ffc6 	bl	80004a0 <_sbrk>
 8001514:	1c43      	adds	r3, r0, #1
 8001516:	d102      	bne.n	800151e <_sbrk_r+0x1a>
 8001518:	682b      	ldr	r3, [r5, #0]
 800151a:	b103      	cbz	r3, 800151e <_sbrk_r+0x1a>
 800151c:	6023      	str	r3, [r4, #0]
 800151e:	bd38      	pop	{r3, r4, r5, pc}
 8001520:	20000210 	.word	0x20000210

08001524 <_init>:
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	bf00      	nop
 8001528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152a:	bc08      	pop	{r3}
 800152c:	469e      	mov	lr, r3
 800152e:	4770      	bx	lr

08001530 <_fini>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	bf00      	nop
 8001534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001536:	bc08      	pop	{r3}
 8001538:	469e      	mov	lr, r3
 800153a:	4770      	bx	lr

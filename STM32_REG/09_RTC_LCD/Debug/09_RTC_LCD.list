
09_RTC_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001134  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080012c0  080012c0  000022c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001340  08001340  00002348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001340  08001340  00002348  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001340  08001348  00002348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001340  08001340  00002340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001344  08001344  00002344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00002348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002348  2**0
                  CONTENTS
 10 .bss          00000058  20000000  20000000  00003000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000058  20000058  00003000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002455  00000000  00000000  00002372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000097d  00000000  00000000  000047c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000298  00000000  00000000  00005148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001e7  00000000  00000000  000053e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f73  00000000  00000000  000055c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003454  00000000  00000000  0000853a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000aef6  00000000  00000000  0000b98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00016884  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009d4  00000000  00000000  000168c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0001729c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080012a8 	.word	0x080012a8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	080012a8 	.word	0x080012a8

080001cc <main>:
void number_to_string(uint8_t num , char* buf);
char* time_to_string(RTC_time_t *rtc_time);
char* date_to_string(RTC_date_t *rtc_date);

int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
#ifndef PRINT_LCD
	// Use printf output
	printf("RTC test\n");
#else
	// Initialize LCD and display test message
	lcd_init();
 80001d2:	f000 fa37 	bl	8000644 <lcd_init>
	lcd_print_string("RTC Test...");
 80001d6:	483b      	ldr	r0, [pc, #236]	@ (80002c4 <main+0xf8>)
 80001d8:	f000 fa20 	bl	800061c <lcd_print_string>
	mdelay(2000);
 80001dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001e0:	f000 fb3a 	bl	8000858 <mdelay>
	lcd_display_clear();
 80001e4:	f000 fae6 	bl	80007b4 <lcd_display_clear>
	lcd_display_return_home();
 80001e8:	f000 faee 	bl	80007c8 <lcd_display_return_home>
#endif

	// Initialize DS1307 RTC
	if(ds1307_init()){
 80001ec:	f000 fb60 	bl	80008b0 <ds1307_init>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d004      	beq.n	8000200 <main+0x34>
#ifndef PRINT_LCD
		printf("RTC init has failed\n");
#else
		lcd_print_string("Init FAIL!");
 80001f6:	4834      	ldr	r0, [pc, #208]	@ (80002c8 <main+0xfc>)
 80001f8:	f000 fa10 	bl	800061c <lcd_print_string>
#endif
		while(1); // Stop if RTC init fails
 80001fc:	bf00      	nop
 80001fe:	e7fd      	b.n	80001fc <main+0x30>
	}

	// Start SysTick timer at 1Hz (1 interrupt per second)
	init_systick_timer(1);
 8000200:	2001      	movs	r0, #1
 8000202:	f000 f913 	bl	800042c <init_systick_timer>

	// Set today's date (Monday, 01/09/25)
	current_date.day   = MONDAY;   // Day of the week
 8000206:	2302      	movs	r3, #2
 8000208:	71fb      	strb	r3, [r7, #7]
	current_date.date  = 1;        // Day number
 800020a:	2301      	movs	r3, #1
 800020c:	713b      	strb	r3, [r7, #4]
	current_date.month = 9;        // September
 800020e:	2309      	movs	r3, #9
 8000210:	717b      	strb	r3, [r7, #5]
	current_date.year  = 25;       // Year = 2025 (last two digits)
 8000212:	2319      	movs	r3, #25
 8000214:	71bb      	strb	r3, [r7, #6]

	//Set current time (10:30:00 AM)
	current_time.hours       = 10;
 8000216:	230a      	movs	r3, #10
 8000218:	72bb      	strb	r3, [r7, #10]
	current_time.minutes     = 30;
 800021a:	231e      	movs	r3, #30
 800021c:	727b      	strb	r3, [r7, #9]
	current_time.seconds     = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_AM;
 8000222:	2300      	movs	r3, #0
 8000224:	72fb      	strb	r3, [r7, #11]

	// Write initial time & date to RTC
	ds1307_set_current_date(&current_date);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fbf1 	bl	8000a10 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 800022e:	f107 0308 	add.w	r3, r7, #8
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fb5a 	bl	80008ec <ds1307_set_current_time>

	// Read back current time & date from RTC
	ds1307_get_current_time(&current_time);
 8000238:	f107 0308 	add.w	r3, r7, #8
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fb9e 	bl	800097e <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fc13 	bl	8000a70 <ds1307_get_current_date>

	// Display time
	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 800024a:	7afb      	ldrb	r3, [r7, #11]
 800024c:	2b02      	cmp	r3, #2
 800024e:	d013      	beq.n	8000278 <main+0xac>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000250:	7afb      	ldrb	r3, [r7, #11]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <main+0x8e>
 8000256:	4b1d      	ldr	r3, [pc, #116]	@ (80002cc <main+0x100>)
 8000258:	e000      	b.n	800025c <main+0x90>
 800025a:	4b1d      	ldr	r3, [pc, #116]	@ (80002d0 <main+0x104>)
 800025c:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n", time_to_string(&current_time), am_pm);
#else
		lcd_print_string(time_to_string(&current_time));
 800025e:	f107 0308 	add.w	r3, r7, #8
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f88e 	bl	8000384 <time_to_string>
 8000268:	4603      	mov	r3, r0
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f9d6 	bl	800061c <lcd_print_string>
		lcd_print_string(am_pm);
 8000270:	68f8      	ldr	r0, [r7, #12]
 8000272:	f000 f9d3 	bl	800061c <lcd_print_string>
 8000276:	e008      	b.n	800028a <main+0xbe>
	else
	{
#ifndef PRINT_LCD
		printf("Current time = %s\n", time_to_string(&current_time));
#else
		lcd_print_string(time_to_string(&current_time));
 8000278:	f107 0308 	add.w	r3, r7, #8
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f881 	bl	8000384 <time_to_string>
 8000282:	4603      	mov	r3, r0
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f9c9 	bl	800061c <lcd_print_string>

	// Display date
#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 800028a:	2101      	movs	r1, #1
 800028c:	2002      	movs	r0, #2
 800028e:	f000 faa5 	bl	80007dc <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f89f 	bl	80003d8 <date_to_string>
 800029a:	4603      	mov	r3, r0
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f9bd 	bl	800061c <lcd_print_string>
	lcd_print_char('<');
 80002a2:	203c      	movs	r0, #60	@ 0x3c
 80002a4:	f000 f998 	bl	80005d8 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f812 	bl	80002d4 <get_day_of_week>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f9b2 	bl	800061c <lcd_print_string>
	lcd_print_char('>');
 80002b8:	203e      	movs	r0, #62	@ 0x3e
 80002ba:	f000 f98d 	bl	80005d8 <lcd_print_char>
#endif

	while(1); // Main loop runs forever
 80002be:	bf00      	nop
 80002c0:	e7fd      	b.n	80002be <main+0xf2>
 80002c2:	bf00      	nop
 80002c4:	080012c0 	.word	0x080012c0
 80002c8:	080012cc 	.word	0x080012cc
 80002cc:	080012d8 	.word	0x080012d8
 80002d0:	080012dc 	.word	0x080012dc

080002d4 <get_day_of_week>:
	return 0;
}

// Convert day number to string (1=Sunday, 7=Saturday)
char* get_day_of_week(uint8_t i)
{
 80002d4:	b4b0      	push	{r4, r5, r7}
 80002d6:	b08b      	sub	sp, #44	@ 0x2c
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 80002de:	4b0b      	ldr	r3, [pc, #44]	@ (800030c <get_day_of_week+0x38>)
 80002e0:	f107 040c 	add.w	r4, r7, #12
 80002e4:	461d      	mov	r5, r3
 80002e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return days[i-1];
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	3b01      	subs	r3, #1
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	3328      	adds	r3, #40	@ 0x28
 80002fa:	443b      	add	r3, r7
 80002fc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000300:	4618      	mov	r0, r3
 8000302:	372c      	adds	r7, #44	@ 0x2c
 8000304:	46bd      	mov	sp, r7
 8000306:	bcb0      	pop	{r4, r5, r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	08001324 	.word	0x08001324

08000310 <number_to_string>:

// Convert number (0-99) into 2-character string
void number_to_string(uint8_t num , char* buf)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
	if(num < 10){
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	2b09      	cmp	r3, #9
 8000320:	d809      	bhi.n	8000336 <number_to_string+0x26>
		buf[0] = '0';
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2230      	movs	r2, #48	@ 0x30
 8000326:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48; // ASCII conversion
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	79fa      	ldrb	r2, [r7, #7]
 800032e:	3230      	adds	r2, #48	@ 0x30
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99){
		buf[0] = (num/10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 8000334:	e01f      	b.n	8000376 <number_to_string+0x66>
	}else if(num >= 10 && num < 99){
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2b09      	cmp	r3, #9
 800033a:	d91c      	bls.n	8000376 <number_to_string+0x66>
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	2b62      	cmp	r3, #98	@ 0x62
 8000340:	d819      	bhi.n	8000376 <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	4a0e      	ldr	r2, [pc, #56]	@ (8000380 <number_to_string+0x70>)
 8000346:	fba2 2303 	umull	r2, r3, r2, r3
 800034a:	08db      	lsrs	r3, r3, #3
 800034c:	b2db      	uxtb	r3, r3
 800034e:	3330      	adds	r3, #48	@ 0x30
 8000350:	b2da      	uxtb	r2, r3
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 8000356:	79fa      	ldrb	r2, [r7, #7]
 8000358:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <number_to_string+0x70>)
 800035a:	fba3 1302 	umull	r1, r3, r3, r2
 800035e:	08d9      	lsrs	r1, r3, #3
 8000360:	460b      	mov	r3, r1
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	440b      	add	r3, r1
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	b2da      	uxtb	r2, r3
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	3301      	adds	r3, #1
 8000370:	3230      	adds	r2, #48	@ 0x30
 8000372:	b2d2      	uxtb	r2, r2
 8000374:	701a      	strb	r2, [r3, #0]
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	cccccccd 	.word	0xcccccccd

08000384 <time_to_string>:

// Format time as "HH:MM:SS"
char* time_to_string(RTC_time_t *rtc_time)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <time_to_string+0x48>)
 800038e:	223a      	movs	r2, #58	@ 0x3a
 8000390:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <time_to_string+0x48>)
 8000394:	223a      	movs	r2, #58	@ 0x3a
 8000396:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours, buf);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	789b      	ldrb	r3, [r3, #2]
 800039c:	490b      	ldr	r1, [pc, #44]	@ (80003cc <time_to_string+0x48>)
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ffb6 	bl	8000310 <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	785b      	ldrb	r3, [r3, #1]
 80003a8:	4909      	ldr	r1, [pc, #36]	@ (80003d0 <time_to_string+0x4c>)
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ffb0 	bl	8000310 <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	4907      	ldr	r1, [pc, #28]	@ (80003d4 <time_to_string+0x50>)
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ffaa 	bl	8000310 <number_to_string>

	buf[8] = '\0'; // Null terminator
 80003bc:	4b03      	ldr	r3, [pc, #12]	@ (80003cc <time_to_string+0x48>)
 80003be:	2200      	movs	r2, #0
 80003c0:	721a      	strb	r2, [r3, #8]
	return buf;
 80003c2:	4b02      	ldr	r3, [pc, #8]	@ (80003cc <time_to_string+0x48>)
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	2000001c 	.word	0x2000001c
 80003d0:	2000001f 	.word	0x2000001f
 80003d4:	20000022 	.word	0x20000022

080003d8 <date_to_string>:

// Format date as "DD/MM/YY"
char* date_to_string(RTC_date_t *rtc_date)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 80003e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <date_to_string+0x48>)
 80003e2:	222f      	movs	r2, #47	@ 0x2f
 80003e4:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <date_to_string+0x48>)
 80003e8:	222f      	movs	r2, #47	@ 0x2f
 80003ea:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date, buf);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	490b      	ldr	r1, [pc, #44]	@ (8000420 <date_to_string+0x48>)
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ff8c 	bl	8000310 <number_to_string>
	number_to_string(rtc_date->month, &buf[3]);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	785b      	ldrb	r3, [r3, #1]
 80003fc:	4909      	ldr	r1, [pc, #36]	@ (8000424 <date_to_string+0x4c>)
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff86 	bl	8000310 <number_to_string>
	number_to_string(rtc_date->year, &buf[6]);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	789b      	ldrb	r3, [r3, #2]
 8000408:	4907      	ldr	r1, [pc, #28]	@ (8000428 <date_to_string+0x50>)
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff80 	bl	8000310 <number_to_string>

	buf[8]= '\0'; // Null terminator
 8000410:	4b03      	ldr	r3, [pc, #12]	@ (8000420 <date_to_string+0x48>)
 8000412:	2200      	movs	r2, #0
 8000414:	721a      	strb	r2, [r3, #8]
	return buf;
 8000416:	4b02      	ldr	r3, [pc, #8]	@ (8000420 <date_to_string+0x48>)
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000028 	.word	0x20000028
 8000424:	2000002b 	.word	0x2000002b
 8000428:	2000002e 	.word	0x2000002e

0800042c <init_systick_timer>:

// Configure SysTick timer to generate periodic interrupts
void init_systick_timer(uint32_t tick_hz)
{
 800042c:	b480      	push	{r7}
 800042e:	b087      	sub	sp, #28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014; // Reload register
 8000434:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <init_systick_timer+0x5c>)
 8000436:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010; // Control register
 8000438:	4b14      	ldr	r3, [pc, #80]	@ (800048c <init_systick_timer+0x60>)
 800043a:	613b      	str	r3, [r7, #16]
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 800043c:	4a14      	ldr	r2, [pc, #80]	@ (8000490 <init_systick_timer+0x64>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	fbb2 f3f3 	udiv	r3, r2, r3
 8000444:	3b01      	subs	r3, #1
 8000446:	60fb      	str	r3, [r7, #12]

    *pSRVR &= ~(0x00FFFFFFFF); // Clear reload value
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
    *pSRVR |= count_value;     // Set reload value
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	431a      	orrs	r2, r3
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	601a      	str	r2, [r3, #0]
    *pSCSR |= (1 << 1);        // Enable SysTick exception
 800045a:	693b      	ldr	r3, [r7, #16]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 0202 	orr.w	r2, r3, #2
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	601a      	str	r2, [r3, #0]
    *pSCSR |= (1 << 2);        // Select processor clock
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f043 0204 	orr.w	r2, r3, #4
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	601a      	str	r2, [r3, #0]
    *pSCSR |= (1 << 0);        // Enable SysTick
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f043 0201 	orr.w	r2, r3, #1
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	601a      	str	r2, [r3, #0]
}
 800047e:	bf00      	nop
 8000480:	371c      	adds	r7, #28
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	e000e014 	.word	0xe000e014
 800048c:	e000e010 	.word	0xe000e010
 8000490:	00f42400 	.word	0x00f42400

08000494 <SysTick_Handler>:

// SysTick interrupt handler: updates LCD/printf every second
void SysTick_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	// Read time from RTC
	ds1307_get_current_time(&current_time);
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 fa6d 	bl	800097e <ds1307_get_current_time>

	// Display time
	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 80004a4:	7afb      	ldrb	r3, [r7, #11]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d017      	beq.n	80004da <SysTick_Handler+0x46>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004aa:	7afb      	ldrb	r3, [r7, #11]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SysTick_Handler+0x20>
 80004b0:	4b21      	ldr	r3, [pc, #132]	@ (8000538 <SysTick_Handler+0xa4>)
 80004b2:	e000      	b.n	80004b6 <SysTick_Handler+0x22>
 80004b4:	4b21      	ldr	r3, [pc, #132]	@ (800053c <SysTick_Handler+0xa8>)
 80004b6:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n", time_to_string(&current_time), am_pm);
#else
		lcd_set_cursor(1, 1);
 80004b8:	2101      	movs	r1, #1
 80004ba:	2001      	movs	r0, #1
 80004bc:	f000 f98e 	bl	80007dc <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 80004c0:	f107 0308 	add.w	r3, r7, #8
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff5d 	bl	8000384 <time_to_string>
 80004ca:	4603      	mov	r3, r0
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 f8a5 	bl	800061c <lcd_print_string>
		lcd_print_string(am_pm);
 80004d2:	68f8      	ldr	r0, [r7, #12]
 80004d4:	f000 f8a2 	bl	800061c <lcd_print_string>
 80004d8:	e00c      	b.n	80004f4 <SysTick_Handler+0x60>
	else
	{
#ifndef PRINT_LCD
		printf("Current time = %s\n", time_to_string(&current_time));
#else
		lcd_set_cursor(1, 1);
 80004da:	2101      	movs	r1, #1
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 f97d 	bl	80007dc <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff4c 	bl	8000384 <time_to_string>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f894 	bl	800061c <lcd_print_string>
#endif
	}

	// Read date from RTC
	ds1307_get_current_date(&current_date);
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 faba 	bl	8000a70 <ds1307_get_current_date>

	// Display date
#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 80004fc:	2101      	movs	r1, #1
 80004fe:	2002      	movs	r0, #2
 8000500:	f000 f96c 	bl	80007dc <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ff66 	bl	80003d8 <date_to_string>
 800050c:	4603      	mov	r3, r0
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f884 	bl	800061c <lcd_print_string>
	lcd_print_char('<');
 8000514:	203c      	movs	r0, #60	@ 0x3c
 8000516:	f000 f85f 	bl	80005d8 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff fed9 	bl	80002d4 <get_day_of_week>
 8000522:	4603      	mov	r3, r0
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f879 	bl	800061c <lcd_print_string>
	lcd_print_char('>');
 800052a:	203e      	movs	r0, #62	@ 0x3e
 800052c:	f000 f854 	bl	80005d8 <lcd_print_char>
#endif
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	080012d8 	.word	0x080012d8
 800053c:	080012dc 	.word	0x080012dc

08000540 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000540:	480d      	ldr	r0, [pc, #52]	@ (8000578 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000542:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000544:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000548:	480c      	ldr	r0, [pc, #48]	@ (800057c <LoopForever+0x6>)
  ldr r1, =_edata
 800054a:	490d      	ldr	r1, [pc, #52]	@ (8000580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800054c:	4a0d      	ldr	r2, [pc, #52]	@ (8000584 <LoopForever+0xe>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000550:	e002      	b.n	8000558 <LoopCopyDataInit>

08000552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000556:	3304      	adds	r3, #4

08000558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800055c:	d3f9      	bcc.n	8000552 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055e:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000560:	4c0a      	ldr	r4, [pc, #40]	@ (800058c <LoopForever+0x16>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000564:	e001      	b.n	800056a <LoopFillZerobss>

08000566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000568:	3204      	adds	r2, #4

0800056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800056c:	d3fb      	bcc.n	8000566 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800056e:	f000 fe77 	bl	8001260 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000572:	f7ff fe2b 	bl	80001cc <main>

08000576 <LoopForever>:

LoopForever:
  b LoopForever
 8000576:	e7fe      	b.n	8000576 <LoopForever>
  ldr   r0, =_estack
 8000578:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000584:	08001348 	.word	0x08001348
  ldr r2, =_sbss
 8000588:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800058c:	20000058 	.word	0x20000058

08000590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC1_2_IRQHandler>
	...

08000594 <lcd_send_command>:

static void udelay(uint32_t cnt);

// Send a command to the LCD (like clear, move cursor, etc.)
void lcd_send_command(uint8_t cmd)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET); // RS = 0 for command
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	480c      	ldr	r0, [pc, #48]	@ (80005d4 <lcd_send_command+0x40>)
 80005a4:	f000 fcfc 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET); // RW = 0 for write
 80005a8:	2200      	movs	r2, #0
 80005aa:	2101      	movs	r1, #1
 80005ac:	4809      	ldr	r0, [pc, #36]	@ (80005d4 <lcd_send_command+0x40>)
 80005ae:	f000 fcf7 	bl	8000fa0 <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);   // Send higher 4 bits
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	091b      	lsrs	r3, r3, #4
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f8c3 	bl	8000744 <write_4_bits>
	write_4_bits(cmd & 0x0F); // Send lower 4 bits
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f003 030f 	and.w	r3, r3, #15
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f8bc 	bl	8000744 <write_4_bits>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	48000c00 	.word	0x48000c00

080005d8 <lcd_print_char>:

// Print a single character on the LCD
void lcd_print_char(uint8_t data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);   // RS = 1 for data
 80005e2:	2201      	movs	r2, #1
 80005e4:	2100      	movs	r1, #0
 80005e6:	480c      	ldr	r0, [pc, #48]	@ (8000618 <lcd_print_char+0x40>)
 80005e8:	f000 fcda 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET); // RW = 0 for write
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	4809      	ldr	r0, [pc, #36]	@ (8000618 <lcd_print_char+0x40>)
 80005f2:	f000 fcd5 	bl	8000fa0 <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);   // Send higher 4 bits
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f8a1 	bl	8000744 <write_4_bits>
	write_4_bits(data & 0x0F); // Send lower 4 bits
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f003 030f 	and.w	r3, r3, #15
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f89a 	bl	8000744 <write_4_bits>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	48000c00 	.word	0x48000c00

0800061c <lcd_print_string>:

// Print a string on the LCD
void lcd_print_string(char *message)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    do
    {
        lcd_print_char((uint8_t)*message++); // Print each character
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	607a      	str	r2, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffd3 	bl	80005d8 <lcd_print_char>
    }
    while (*message != '\0'); // Until end of string
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f4      	bne.n	8000624 <lcd_print_string+0x8>
}
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <lcd_init>:

// Initialize LCD pins and LCD module
void lcd_init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
	GPIO_Handle_t lcd_signal;

	// Configure LCD control pins as output
	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 800064a:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <lcd_init+0xfc>)
 800064c:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800064e:	2301      	movs	r3, #1
 8000650:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000652:	2300      	movs	r3, #0
 8000654:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000656:	2300      	movs	r3, #0
 8000658:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800065a:	2302      	movs	r3, #2
 800065c:	72bb      	strb	r3, [r7, #10]

	// RS, RW, EN pins
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS; GPIO_Init(&lcd_signal);
 800065e:	2300      	movs	r3, #0
 8000660:	723b      	strb	r3, [r7, #8]
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fae3 	bl	8000c30 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW; GPIO_Init(&lcd_signal);
 800066a:	2301      	movs	r3, #1
 800066c:	723b      	strb	r3, [r7, #8]
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fadd 	bl	8000c30 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN; GPIO_Init(&lcd_signal);
 8000676:	2302      	movs	r3, #2
 8000678:	723b      	strb	r3, [r7, #8]
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fad7 	bl	8000c30 <GPIO_Init>

	// Data pins D4-D7
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4; GPIO_Init(&lcd_signal);
 8000682:	2303      	movs	r3, #3
 8000684:	723b      	strb	r3, [r7, #8]
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fad1 	bl	8000c30 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5; GPIO_Init(&lcd_signal);
 800068e:	2304      	movs	r3, #4
 8000690:	723b      	strb	r3, [r7, #8]
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f000 facb 	bl	8000c30 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6; GPIO_Init(&lcd_signal);
 800069a:	2305      	movs	r3, #5
 800069c:	723b      	strb	r3, [r7, #8]
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fac5 	bl	8000c30 <GPIO_Init>
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7; GPIO_Init(&lcd_signal);
 80006a6:	2306      	movs	r3, #6
 80006a8:	723b      	strb	r3, [r7, #8]
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fabf 	bl	8000c30 <GPIO_Init>

	// Set all pins to LOW initially
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	4822      	ldr	r0, [pc, #136]	@ (8000740 <lcd_init+0xfc>)
 80006b8:	f000 fc72 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2101      	movs	r1, #1
 80006c0:	481f      	ldr	r0, [pc, #124]	@ (8000740 <lcd_init+0xfc>)
 80006c2:	f000 fc6d 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2102      	movs	r1, #2
 80006ca:	481d      	ldr	r0, [pc, #116]	@ (8000740 <lcd_init+0xfc>)
 80006cc:	f000 fc68 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2103      	movs	r1, #3
 80006d4:	481a      	ldr	r0, [pc, #104]	@ (8000740 <lcd_init+0xfc>)
 80006d6:	f000 fc63 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2104      	movs	r1, #4
 80006de:	4818      	ldr	r0, [pc, #96]	@ (8000740 <lcd_init+0xfc>)
 80006e0:	f000 fc5e 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2105      	movs	r1, #5
 80006e8:	4815      	ldr	r0, [pc, #84]	@ (8000740 <lcd_init+0xfc>)
 80006ea:	f000 fc59 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2106      	movs	r1, #6
 80006f2:	4813      	ldr	r0, [pc, #76]	@ (8000740 <lcd_init+0xfc>)
 80006f4:	f000 fc54 	bl	8000fa0 <GPIO_WriteToOutputPin>

	// LCD power-on initialization sequence
	mdelay(40);            // Wait for LCD to power up
 80006f8:	2028      	movs	r0, #40	@ 0x28
 80006fa:	f000 f8ad 	bl	8000858 <mdelay>

	write_4_bits(0x3); mdelay(5);    // Function set (repeated)
 80006fe:	2003      	movs	r0, #3
 8000700:	f000 f820 	bl	8000744 <write_4_bits>
 8000704:	2005      	movs	r0, #5
 8000706:	f000 f8a7 	bl	8000858 <mdelay>
	write_4_bits(0x3); udelay(150);
 800070a:	2003      	movs	r0, #3
 800070c:	f000 f81a 	bl	8000744 <write_4_bits>
 8000710:	2096      	movs	r0, #150	@ 0x96
 8000712:	f000 f8b9 	bl	8000888 <udelay>
	write_4_bits(0x3);
 8000716:	2003      	movs	r0, #3
 8000718:	f000 f814 	bl	8000744 <write_4_bits>
	write_4_bits(0x2);               // Set 4-bit mode
 800071c:	2002      	movs	r0, #2
 800071e:	f000 f811 	bl	8000744 <write_4_bits>

	// Configure LCD settings
	lcd_send_command(LCD_CMD_4DL_2N_5X8F); // 4-bit mode, 2 lines, 5x8 font
 8000722:	2028      	movs	r0, #40	@ 0x28
 8000724:	f7ff ff36 	bl	8000594 <lcd_send_command>
	lcd_send_command(LCD_CMD_DON_CURON);   // Display ON, cursor ON
 8000728:	200e      	movs	r0, #14
 800072a:	f7ff ff33 	bl	8000594 <lcd_send_command>
	lcd_display_clear();                   // Clear display
 800072e:	f000 f841 	bl	80007b4 <lcd_display_clear>
	lcd_send_command(LCD_CMD_INCADD);      // Increment cursor after each char
 8000732:	2006      	movs	r0, #6
 8000734:	f7ff ff2e 	bl	8000594 <lcd_send_command>
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	48000c00 	.word	0x48000c00

08000744 <write_4_bits>:

// Send 4 bits of data to LCD
static void write_4_bits(uint8_t value)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, (value >> 0) & 0x1);
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	461a      	mov	r2, r3
 8000758:	2103      	movs	r1, #3
 800075a:	4815      	ldr	r0, [pc, #84]	@ (80007b0 <write_4_bits+0x6c>)
 800075c:	f000 fc20 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, (value >> 1) & 0x1);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	085b      	lsrs	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	2104      	movs	r1, #4
 8000770:	480f      	ldr	r0, [pc, #60]	@ (80007b0 <write_4_bits+0x6c>)
 8000772:	f000 fc15 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, (value >> 2) & 0x1);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	089b      	lsrs	r3, r3, #2
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	2105      	movs	r1, #5
 8000786:	480a      	ldr	r0, [pc, #40]	@ (80007b0 <write_4_bits+0x6c>)
 8000788:	f000 fc0a 	bl	8000fa0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, (value >> 3) & 0x1);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	2106      	movs	r1, #6
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <write_4_bits+0x6c>)
 800079e:	f000 fbff 	bl	8000fa0 <GPIO_WriteToOutputPin>

	lcd_enable(); // Latch data into LCD
 80007a2:	f000 f843 	bl	800082c <lcd_enable>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	48000c00 	.word	0x48000c00

080007b4 <lcd_display_clear>:

// Clear LCD display
void lcd_display_clear(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff feeb 	bl	8000594 <lcd_send_command>
	mdelay(2); // Command takes time
 80007be:	2002      	movs	r0, #2
 80007c0:	f000 f84a 	bl	8000858 <mdelay>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <lcd_display_return_home>:

// Return cursor to home (0,0)
void lcd_display_return_home(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 80007cc:	2002      	movs	r0, #2
 80007ce:	f7ff fee1 	bl	8000594 <lcd_send_command>
	mdelay(2);
 80007d2:	2002      	movs	r0, #2
 80007d4:	f000 f840 	bl	8000858 <mdelay>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <lcd_set_cursor>:

// Set cursor to specific row and column
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	460a      	mov	r2, r1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	71bb      	strb	r3, [r7, #6]
  column--; // Adjust for 0-based index
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	71bb      	strb	r3, [r7, #6]
  switch (row)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d002      	beq.n	80007fe <lcd_set_cursor+0x22>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d009      	beq.n	8000810 <lcd_set_cursor+0x34>
      break;
    case 2:
      lcd_send_command((column |= 0xC0)); // Row 2 base address
      break;
    default:
      break;
 80007fc:	e011      	b.n	8000822 <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80)); // Row 1 base address
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000804:	71bb      	strb	r3, [r7, #6]
 8000806:	79bb      	ldrb	r3, [r7, #6]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fec3 	bl	8000594 <lcd_send_command>
      break;
 800080e:	e008      	b.n	8000822 <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0xC0)); // Row 2 base address
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000816:	71bb      	strb	r3, [r7, #6]
 8000818:	79bb      	ldrb	r3, [r7, #6]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff feba 	bl	8000594 <lcd_send_command>
      break;
 8000820:	bf00      	nop
  }
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <lcd_enable>:

// Toggle LCD enable pin to latch data
static void lcd_enable(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2102      	movs	r1, #2
 8000834:	4807      	ldr	r0, [pc, #28]	@ (8000854 <lcd_enable+0x28>)
 8000836:	f000 fbb3 	bl	8000fa0 <GPIO_WriteToOutputPin>
	udelay(10);
 800083a:	200a      	movs	r0, #10
 800083c:	f000 f824 	bl	8000888 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2102      	movs	r1, #2
 8000844:	4803      	ldr	r0, [pc, #12]	@ (8000854 <lcd_enable+0x28>)
 8000846:	f000 fbab 	bl	8000fa0 <GPIO_WriteToOutputPin>
	udelay(100);
 800084a:	2064      	movs	r0, #100	@ 0x64
 800084c:	f000 f81c 	bl	8000888 <udelay>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	48000c00 	.word	0x48000c00

08000858 <mdelay>:

// Millisecond delay (rough software loop)
void mdelay(uint32_t cnt)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (cnt * 1000); i++);
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	e002      	b.n	800086c <mdelay+0x14>
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3301      	adds	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000872:	fb02 f303 	mul.w	r3, r2, r3
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	429a      	cmp	r2, r3
 800087a:	d3f4      	bcc.n	8000866 <mdelay+0xe>
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <udelay>:

// Microsecond delay (rough software loop)
static void udelay(uint32_t cnt)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < cnt; i++);
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e002      	b.n	800089c <udelay+0x14>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3301      	adds	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d3f8      	bcc.n	8000896 <udelay+0xe>
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <ds1307_init>:

I2C_Handle_t g_ds1307I2cHandle;


uint8_t ds1307_init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	ds1307_i2c_pin_config();
 80008b6:	f000 f8e5 	bl	8000a84 <ds1307_i2c_pin_config>
	ds1307_i2c_config();
 80008ba:	f000 f927 	bl	8000b0c <ds1307_i2c_config>
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80008be:	2101      	movs	r1, #1
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <ds1307_init+0x38>)
 80008c2:	f000 fba0 	bl	8001006 <I2C_PeripheralControl>

	ds1307_write(0x00, DS1307_ADDR_SEC);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 f931 	bl	8000b30 <ds1307_write>
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f94a 	bl	8000b68 <ds1307_read>
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
	return ((clock_state >> 7 ) & 0x1);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	09db      	lsrs	r3, r3, #7
 80008dc:	b2db      	uxtb	r3, r3
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40005400 	.word	0x40005400

080008ec <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_time_t  *rtc_time)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f953 	bl	8000ba4 <binary_to_bcd>
 80008fe:	4603      	mov	r3, r0
 8000900:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000908:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800090a:	7bbb      	ldrb	r3, [r7, #14]
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f90e 	bl	8000b30 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	785b      	ldrb	r3, [r3, #1]
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f943 	bl	8000ba4 <binary_to_bcd>
 800091e:	4603      	mov	r3, r0
 8000920:	2101      	movs	r1, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f904 	bl	8000b30 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f939 	bl	8000ba4 <binary_to_bcd>
 8000932:	4603      	mov	r3, r0
 8000934:	73fb      	strb	r3, [r7, #15]
	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	78db      	ldrb	r3, [r3, #3]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d104      	bne.n	8000948 <ds1307_set_current_time+0x5c>
			hrs &= ~(1 << 6);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	e011      	b.n	800096c <ds1307_set_current_time+0x80>
	}
	else
	{
			hrs |= (1 << 6);
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800094e:	73fb      	strb	r3, [r7, #15]
			hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1 << 5) : hrs & ~(1 << 5);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	78db      	ldrb	r3, [r3, #3]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d104      	bne.n	8000962 <ds1307_set_current_time+0x76>
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	b2db      	uxtb	r3, r3
 8000960:	e003      	b.n	800096a <ds1307_set_current_time+0x7e>
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	f023 0320 	bic.w	r3, r3, #32
 8000968:	b2db      	uxtb	r3, r3
 800096a:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs, DS1307_ADDR_HRS);
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	2102      	movs	r1, #2
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f8dd 	bl	8000b30 <ds1307_write>

}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <ds1307_get_current_time>:


void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f8ee 	bl	8000b68 <ds1307_read>
 800098c:	4603      	mov	r3, r0
 800098e:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8000990:	7bbb      	ldrb	r3, [r7, #14]
 8000992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000996:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f92e 	bl	8000bfc <bcd_to_binary>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 f8dd 	bl	8000b68 <ds1307_read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f923 	bl	8000bfc <bcd_to_binary>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 80009be:	2002      	movs	r0, #2
 80009c0:	f000 f8d2 	bl	8000b68 <ds1307_read>
 80009c4:	4603      	mov	r3, r0
 80009c6:	73fb      	strb	r3, [r7, #15]

	if(hrs & (1 << 6))
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00f      	beq.n	80009f2 <ds1307_get_current_time+0x74>
	{
		rtc_time->time_format = !((hrs & (1 << 5)) == 0);
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	f003 0320 	and.w	r3, r3, #32
 80009d8:	2b00      	cmp	r3, #0
 80009da:	bf14      	ite	ne
 80009dc:	2301      	movne	r3, #1
 80009de:	2300      	moveq	r3, #0
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e002      	b.n	80009f8 <ds1307_get_current_time+0x7a>

	}
	else
	{
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2202      	movs	r2, #2
 80009f6:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f8fe 	bl	8000bfc <bcd_to_binary>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	709a      	strb	r2, [r3, #2]

}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f8c1 	bl	8000ba4 <binary_to_bcd>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2104      	movs	r1, #4
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f882 	bl	8000b30 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	785b      	ldrb	r3, [r3, #1]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f8b7 	bl	8000ba4 <binary_to_bcd>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f878 	bl	8000b30 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	789b      	ldrb	r3, [r3, #2]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f8ad 	bl	8000ba4 <binary_to_bcd>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2106      	movs	r1, #6
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f86e 	bl	8000b30 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	78db      	ldrb	r3, [r3, #3]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 f8a3 	bl	8000ba4 <binary_to_bcd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2103      	movs	r1, #3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f864 	bl	8000b30 <ds1307_write>

}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
	...

08000a84 <ds1307_i2c_pin_config>:




static void ds1307_i2c_pin_config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;
	memset(&i2c_sda,0,sizeof(i2c_sda));
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	220c      	movs	r2, #12
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fbdb 	bl	800124e <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000a98:	463b      	mov	r3, r7
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fbd5 	bl	800124e <memset>


	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <ds1307_i2c_pin_config+0x80>)
 8000aa6:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000aac:	2302      	movs	r3, #2
 8000aae:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000abc:	2302      	movs	r3, #2
 8000abe:	74bb      	strb	r3, [r7, #18]
	GPIOB_PCLK_EN();
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <ds1307_i2c_pin_config+0x84>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <ds1307_i2c_pin_config+0x84>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIO_Init(&i2c_sda);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f8ad 	bl	8000c30 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <ds1307_i2c_pin_config+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000ada:	2304      	movs	r3, #4
 8000adc:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000aea:	2301      	movs	r3, #1
 8000aec:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000aee:	2302      	movs	r3, #2
 8000af0:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 8000af2:	463b      	mov	r3, r7
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f89b 	bl	8000c30 <GPIO_Init>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	48000400 	.word	0x48000400
 8000b08:	40021000 	.word	0x40021000

08000b0c <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <ds1307_i2c_config+0x1c>)
 8000b12:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <ds1307_i2c_config+0x20>)
 8000b14:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000b16:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <ds1307_i2c_config+0x1c>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	715a      	strb	r2, [r3, #5]
	I2C_Init(&g_ds1307I2cHandle);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <ds1307_i2c_config+0x1c>)
 8000b1e:	f000 fa8d 	bl	800103c <I2C_Init>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000034 	.word	0x20000034
 8000b2c:	40005400 	.word	0x40005400

08000b30 <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000b48:	f107 010c 	add.w	r1, r7, #12
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2368      	movs	r3, #104	@ 0x68
 8000b52:	2202      	movs	r2, #2
 8000b54:	4803      	ldr	r0, [pc, #12]	@ (8000b64 <ds1307_write+0x34>)
 8000b56:	f000 faa1 	bl	800109c <I2C_MasterSendData>
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000034 	.word	0x20000034

08000b68 <ds1307_read>:


static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000b72:	1df9      	adds	r1, r7, #7
 8000b74:	2300      	movs	r3, #0
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2368      	movs	r3, #104	@ 0x68
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4808      	ldr	r0, [pc, #32]	@ (8000ba0 <ds1307_read+0x38>)
 8000b7e:	f000 fa8d 	bl	800109c <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000b82:	f107 010f 	add.w	r1, r7, #15
 8000b86:	2300      	movs	r3, #0
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2368      	movs	r3, #104	@ 0x68
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <ds1307_read+0x38>)
 8000b90:	f000 faef 	bl	8001172 <I2C_MasterReceiveData>
	return data;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000034 	.word	0x20000034

08000ba4 <binary_to_bcd>:


static uint8_t binary_to_bcd(uint8_t value)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;
	bcd = value;
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b09      	cmp	r3, #9
 8000bb6:	d919      	bls.n	8000bec <binary_to_bcd+0x48>
	{
		m = value /10;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf8 <binary_to_bcd+0x54>)
 8000bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <binary_to_bcd+0x54>)
 8000bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bcc:	08d9      	lsrs	r1, r3, #3
 8000bce:	460b      	mov	r3, r1
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n;
 8000bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	b25a      	sxtb	r2, r3
 8000be2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	cccccccd 	.word	0xcccccccd

08000bfc <bcd_to_binary>:



static uint8_t bcd_to_binary(uint8_t value)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t)((value >> 4) * 10);
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	091b      	lsrs	r3, r3, #4
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t)0x0F;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 030f 	and.w	r3, r3, #15
 8000c1c:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8000c1e:	7bfa      	ldrb	r2, [r7, #15]
 8000c20:	7bbb      	ldrb	r3, [r7, #14]
 8000c22:	4413      	add	r3, r2
 8000c24:	b2db      	uxtb	r3, r3
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <GPIO_Init>:

/* Initialization and de-initialization */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	795b      	ldrb	r3, [r3, #5]
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d822      	bhi.n	8000c8a <GPIO_Init+0x5a>
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	795b      	ldrb	r3, [r3, #5]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2103      	movs	r1, #3
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	400a      	ands	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]
			pGPIOHandle ->pGPIOx->MODER |= temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6819      	ldr	r1, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
			temp=0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e0e1      	b.n	8000e4e <GPIO_Init+0x21e>
		}
		else
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	795b      	ldrb	r3, [r3, #5]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	791b      	ldrb	r3, [r3, #4]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
					pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	791b      	ldrb	r3, [r3, #4]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2103      	movs	r1, #3
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
					pGPIOHandle ->pGPIOx->MODER |= temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6819      	ldr	r1, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
					temp=0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
			if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	795b      	ldrb	r3, [r3, #5]
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d117      	bne.n	8000d06 <GPIO_Init+0xd6>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000cd6:	4b47      	ldr	r3, [pc, #284]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	7912      	ldrb	r2, [r2, #4]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	408a      	lsls	r2, r1
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4a43      	ldr	r2, [pc, #268]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cec:	4b41      	ldr	r3, [pc, #260]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	7912      	ldrb	r2, [r2, #4]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	408a      	lsls	r2, r1
 8000cfa:	43d2      	mvns	r2, r2
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000d00:	400b      	ands	r3, r1
 8000d02:	6093      	str	r3, [r2, #8]
 8000d04:	e035      	b.n	8000d72 <GPIO_Init+0x142>
					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	795b      	ldrb	r3, [r3, #5]
 8000d0a:	2b05      	cmp	r3, #5
 8000d0c:	d117      	bne.n	8000d3e <GPIO_Init+0x10e>
					{
						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000d0e:	4b39      	ldr	r3, [pc, #228]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	7912      	ldrb	r2, [r2, #4]
 8000d16:	4611      	mov	r1, r2
 8000d18:	2201      	movs	r2, #1
 8000d1a:	408a      	lsls	r2, r1
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4a35      	ldr	r2, [pc, #212]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000d20:	430b      	orrs	r3, r1
 8000d22:	6093      	str	r3, [r2, #8]

						EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d24:	4b33      	ldr	r3, [pc, #204]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	7912      	ldrb	r2, [r2, #4]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	2201      	movs	r2, #1
 8000d30:	408a      	lsls	r2, r1
 8000d32:	43d2      	mvns	r2, r2
 8000d34:	4611      	mov	r1, r2
 8000d36:	4a2f      	ldr	r2, [pc, #188]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000d38:	400b      	ands	r3, r1
 8000d3a:	60d3      	str	r3, [r2, #12]
 8000d3c:	e019      	b.n	8000d72 <GPIO_Init+0x142>

					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	795b      	ldrb	r3, [r3, #5]
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d115      	bne.n	8000d72 <GPIO_Init+0x142>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000d46:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	7912      	ldrb	r2, [r2, #4]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	2201      	movs	r2, #1
 8000d52:	408a      	lsls	r2, r1
 8000d54:	4611      	mov	r1, r2
 8000d56:	4a27      	ldr	r2, [pc, #156]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000d5c:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	7912      	ldrb	r2, [r2, #4]
 8000d64:	4611      	mov	r1, r2
 8000d66:	2201      	movs	r2, #1
 8000d68:	408a      	lsls	r2, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <GPIO_Init+0x1c4>)
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	6093      	str	r3, [r2, #8]
					}
				 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	791b      	ldrb	r3, [r3, #4]
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	74fb      	strb	r3, [r7, #19]
				 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	74bb      	strb	r3, [r7, #18]
				 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d8c:	d042      	beq.n	8000e14 <GPIO_Init+0x1e4>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <GPIO_Init+0x1c8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d02b      	beq.n	8000df0 <GPIO_Init+0x1c0>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <GPIO_Init+0x1cc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d024      	beq.n	8000dec <GPIO_Init+0x1bc>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a16      	ldr	r2, [pc, #88]	@ (8000e00 <GPIO_Init+0x1d0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d01d      	beq.n	8000de8 <GPIO_Init+0x1b8>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <GPIO_Init+0x1d4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d016      	beq.n	8000de4 <GPIO_Init+0x1b4>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <GPIO_Init+0x1d8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d00f      	beq.n	8000de0 <GPIO_Init+0x1b0>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a11      	ldr	r2, [pc, #68]	@ (8000e0c <GPIO_Init+0x1dc>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d008      	beq.n	8000ddc <GPIO_Init+0x1ac>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a10      	ldr	r2, [pc, #64]	@ (8000e10 <GPIO_Init+0x1e0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d101      	bne.n	8000dd8 <GPIO_Init+0x1a8>
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	e01e      	b.n	8000e16 <GPIO_Init+0x1e6>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e01c      	b.n	8000e16 <GPIO_Init+0x1e6>
 8000ddc:	2306      	movs	r3, #6
 8000dde:	e01a      	b.n	8000e16 <GPIO_Init+0x1e6>
 8000de0:	2305      	movs	r3, #5
 8000de2:	e018      	b.n	8000e16 <GPIO_Init+0x1e6>
 8000de4:	2304      	movs	r3, #4
 8000de6:	e016      	b.n	8000e16 <GPIO_Init+0x1e6>
 8000de8:	2303      	movs	r3, #3
 8000dea:	e014      	b.n	8000e16 <GPIO_Init+0x1e6>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e012      	b.n	8000e16 <GPIO_Init+0x1e6>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e010      	b.n	8000e16 <GPIO_Init+0x1e6>
 8000df4:	40010400 	.word	0x40010400
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	48000800 	.word	0x48000800
 8000e00:	48000c00 	.word	0x48000c00
 8000e04:	48001000 	.word	0x48001000
 8000e08:	48001400 	.word	0x48001400
 8000e0c:	48001800 	.word	0x48001800
 8000e10:	48001c00 	.word	0x48001c00
 8000e14:	2300      	movs	r3, #0
 8000e16:	747b      	strb	r3, [r7, #17]
				 SYSCFG_PCLK_EN();
 8000e18:	4b5e      	ldr	r3, [pc, #376]	@ (8000f94 <GPIO_Init+0x364>)
 8000e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8000f94 <GPIO_Init+0x364>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6613      	str	r3, [r2, #96]	@ 0x60
				 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 8000e24:	7c7a      	ldrb	r2, [r7, #17]
 8000e26:	7cbb      	ldrb	r3, [r7, #18]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	fa02 f103 	lsl.w	r1, r2, r3
 8000e2e:	4a5a      	ldr	r2, [pc, #360]	@ (8000f98 <GPIO_Init+0x368>)
 8000e30:	7cfb      	ldrb	r3, [r7, #19]
 8000e32:	3302      	adds	r3, #2
 8000e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000e38:	4b58      	ldr	r3, [pc, #352]	@ (8000f9c <GPIO_Init+0x36c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	7912      	ldrb	r2, [r2, #4]
 8000e40:	4611      	mov	r1, r2
 8000e42:	2201      	movs	r2, #1
 8000e44:	408a      	lsls	r2, r1
 8000e46:	4611      	mov	r1, r2
 8000e48:	4a54      	ldr	r2, [pc, #336]	@ (8000f9c <GPIO_Init+0x36c>)
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	6013      	str	r3, [r2, #0]
		}

		temp=0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	799b      	ldrb	r3, [r3, #6]
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	791b      	ldrb	r3, [r3, #4]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2103      	movs	r1, #3
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4619      	mov	r1, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	400a      	ands	r2, r1
 8000e80:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6899      	ldr	r1, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	609a      	str	r2, [r3, #8]
		temp=0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	79db      	ldrb	r3, [r3, #7]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	791b      	ldrb	r3, [r3, #4]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	791b      	ldrb	r3, [r3, #4]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68d9      	ldr	r1, [r3, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	60da      	str	r2, [r3, #12]
		temp=0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7a1b      	ldrb	r3, [r3, #8]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	791b      	ldrb	r3, [r3, #4]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	408b      	lsls	r3, r1
 8000efa:	43db      	mvns	r3, r3
 8000efc:	4619      	mov	r1, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	400a      	ands	r2, r1
 8000f04:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6859      	ldr	r1, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	605a      	str	r2, [r3, #4]
		temp=0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	795b      	ldrb	r3, [r3, #5]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d132      	bne.n	8000f88 <GPIO_Init+0x358>
		{
			uint32_t temp1 ,temp2;
			temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	08db      	lsrs	r3, r3, #3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	60fb      	str	r3, [r7, #12]
			temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	791b      	ldrb	r3, [r3, #4]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	60bb      	str	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	210f      	movs	r1, #15
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4011      	ands	r1, r2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	3208      	adds	r2, #8
 8000f66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7a5b      	ldrb	r3, [r3, #9]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	4619      	mov	r1, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4311      	orrs	r1, r2
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	3208      	adds	r2, #8
 8000f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}




}
 8000f88:	bf00      	nop
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <GPIO_WriteToOutputPin>:

}


void GPIO_WriteToOutputPin(GPIO_Regdef_t *pGPIOx , uint8_t PinNumber, uint8_t value)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
 8000fac:	4613      	mov	r3, r2
 8000fae:	70bb      	strb	r3, [r7, #2]
	if(value==GPIO_PIN_SET)
 8000fb0:	78bb      	ldrb	r3, [r7, #2]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d109      	bne.n	8000fca <GPIO_WriteToOutputPin+0x2a>
		{
			pGPIOx->ODR |= 1<<PinNumber;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	78fa      	ldrb	r2, [r7, #3]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	615a      	str	r2, [r3, #20]
		else
		{
			pGPIOx->ODR &= ~(1<<PinNumber);
		}

}
 8000fc8:	e009      	b.n	8000fde <GPIO_WriteToOutputPin+0x3e>
			pGPIOx->ODR &= ~(1<<PinNumber);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	78fa      	ldrb	r2, [r7, #3]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	43d2      	mvns	r2, r2
 8000fd8:	401a      	ands	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	615a      	str	r2, [r3, #20]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <I2C_GenerateStartCondition>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

// Function to generate a START condition on I2C bus
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    // Set the START bit (bit 13) in CR2 register
    pI2Cx->CR2 |= (1 << 13);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	605a      	str	r2, [r3, #4]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <I2C_PeripheralControl>:



// Enable or disable the given I2C peripheral
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d106      	bne.n	8001026 <I2C_PeripheralControl+0x20>
    {
        // Set bit 0 (PE - Peripheral Enable) in CR1 → I2C ON
        pI2Cx->CR1 |= (1 << 0);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f043 0201 	orr.w	r2, r3, #1
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	601a      	str	r2, [r3, #0]
    else
    {
        // Clear bit 0 (PE) in CR1 → I2C OFF
        pI2Cx->CR1 &= ~(1 << 0);
    }
}
 8001024:	e005      	b.n	8001032 <I2C_PeripheralControl+0x2c>
        pI2Cx->CR1 &= ~(1 << 0);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 0201 	bic.w	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <I2C_Init>:
}


// Initialize I2C peripheral
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]

    // 1. Set ACK control (bit 15 of CR2)
    tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 15;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	795b      	ldrb	r3, [r3, #5]
 800104c:	03db      	lsls	r3, r3, #15
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->CR2 |= tempreg;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6859      	ldr	r1, [r3, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	430a      	orrs	r2, r1
 8001062:	605a      	str	r2, [r3, #4]

    // 2. Set timing for ~100kHz I2C speed
    pI2CHandle->pI2Cx->TIMINGR |= 0x00411313;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6919      	ldr	r1, [r3, #16]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <I2C_Init+0x5c>)
 8001070:	430b      	orrs	r3, r1
 8001072:	6113      	str	r3, [r2, #16]

    // 3. Set device own address (shifted left by 1 for 7-bit addr)
    tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->OAR1 |= tempreg;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6899      	ldr	r1, [r3, #8]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	430a      	orrs	r2, r1
 800108a:	609a      	str	r2, [r3, #8]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	00411313 	.word	0x00411313

0800109c <I2C_MasterSendData>:
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,
                        uint8_t *pTxBuffer,
                        uint32_t Len,
                        uint8_t SlaveAddr,
                        uint8_t Sr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	70fb      	strb	r3, [r7, #3]
    // 1. Wait until I2C is not busy (BUSY flag in ISR, bit 15)
    while (((pI2CHandle->pI2Cx->ISR >> 15) & 1));
 80010aa:	bf00      	nop
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	0bdb      	lsrs	r3, r3, #15
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f7      	bne.n	80010ac <I2C_MasterSendData+0x10>

    // 2. Prepare CR2 register: set slave address + number of bytes
    uint32_t cr2 = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
    pI2CHandle->pI2Cx->CR2 |= (SlaveAddr << 1) | (Len << 16);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6859      	ldr	r1, [r3, #4]
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	005a      	lsls	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	041b      	lsls	r3, r3, #16
 80010ce:	431a      	orrs	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	605a      	str	r2, [r3, #4]

    // 3. If no repeated start (Sr = disable), set AUTOEND (bit 25)
    if (Sr == I2C_DISABLE_SR)
 80010d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d103      	bne.n	80010e8 <I2C_MasterSendData+0x4c>
    {
        cr2 |= (1 << 25);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010e6:	617b      	str	r3, [r7, #20]
    }
    pI2CHandle->pI2Cx->CR2 |= cr2;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6859      	ldr	r1, [r3, #4]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	605a      	str	r2, [r3, #4]

    // 4. Generate START condition
    I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff73 	bl	8000fe8 <I2C_GenerateStartCondition>

    // 5. Send all bytes
    while (Len > 0)
 8001102:	e012      	b.n	800112a <I2C_MasterSendData+0x8e>
    {
        // Wait until TX buffer is empty (TXE, bit 0 in ISR)
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 0)));
 8001104:	bf00      	nop
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0f8      	beq.n	8001106 <I2C_MasterSendData+0x6a>

        // Write data to TXDR
        pI2CHandle->pI2Cx->TXDR = *pTxBuffer;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28

        // Move to next byte
        pTxBuffer++;
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3301      	adds	r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
        Len--;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	607b      	str	r3, [r7, #4]
    while (Len > 0)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1e9      	bne.n	8001104 <I2C_MasterSendData+0x68>
    }

    // 6. Handle STOP condition or repeated start
    if (Sr == I2C_DISABLE_SR)
 8001130:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d110      	bne.n	800115a <I2C_MasterSendData+0xbe>
    {
        // Wait until STOP flag (bit 5 in ISR) is set
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 5)));
 8001138:	bf00      	nop
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f8      	beq.n	800113a <I2C_MasterSendData+0x9e>

        // Clear STOP flag by writing to ICR
        pI2CHandle->pI2Cx->ICR |= (1 << 5);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	69da      	ldr	r2, [r3, #28]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0220 	orr.w	r2, r2, #32
 8001156:	61da      	str	r2, [r3, #28]
    else
    {
        // If repeated start, wait for TC (transfer complete, bit 6)
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
    }
}
 8001158:	e007      	b.n	800116a <I2C_MasterSendData+0xce>
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
 800115a:	bf00      	nop
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f8      	beq.n	800115c <I2C_MasterSendData+0xc0>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <I2C_MasterReceiveData>:
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,
                           uint8_t *pRxBuffer,
                           uint8_t Len,
                           uint8_t SlaveAddr,
                           uint8_t Sr)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	4611      	mov	r1, r2
 800117e:	461a      	mov	r2, r3
 8001180:	460b      	mov	r3, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
    // 1. Wait until the bus is free (BUSY flag = 0, bit 15 in ISR)
    while (((pI2CHandle->pI2Cx->ISR >> 15) & 1) == 0);
 8001188:	bf00      	nop
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	0bdb      	lsrs	r3, r3, #15
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f7      	beq.n	800118a <I2C_MasterReceiveData+0x18>

    // 2. Configure CR2 register
    uint32_t cr2 = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
    cr2 |= (SlaveAddr << 1);   // Slave address
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
    cr2 |= (Len << 16);        // Number of bytes to read
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	041b      	lsls	r3, r3, #16
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]
    cr2 |= (0 << 10);          // Set direction = read (RD_WRN = 1 normally, 0 = write)
    if (Sr == I2C_DISABLE_SR)
 80011b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <I2C_MasterReceiveData+0x50>
    {
        cr2 |= (1 << 25);      // AUTOEND = 1 (stop condition after transfer)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011c0:	617b      	str	r3, [r7, #20]
    }

    // Load CR2 with settings
    pI2CHandle->pI2Cx->CR2 |= cr2;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]

    // 3. Generate START condition
    I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff06 	bl	8000fe8 <I2C_GenerateStartCondition>

    // 4. Read all bytes
    while (Len > 0)
 80011dc:	e013      	b.n	8001206 <I2C_MasterReceiveData+0x94>
    {
        // Wait until RXNE flag is set (bit 2 in ISR)
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 2)));
 80011de:	bf00      	nop
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f8      	beq.n	80011e0 <I2C_MasterReceiveData+0x6e>

        // Read received byte from RXDR
        *pRxBuffer = (uint8_t)pI2CHandle->pI2Cx->RXDR;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	701a      	strb	r2, [r3, #0]

        // Move buffer pointer and reduce length
        pRxBuffer++;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	3301      	adds	r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
        Len--;
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	3b01      	subs	r3, #1
 8001204:	71fb      	strb	r3, [r7, #7]
    while (Len > 0)
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1e8      	bne.n	80011de <I2C_MasterReceiveData+0x6c>
    }

    // 5. Handle STOP or repeated start
    if (Sr == I2C_DISABLE_SR)
 800120c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d110      	bne.n	8001236 <I2C_MasterReceiveData+0xc4>
    {
        // Wait until STOP flag (bit 5 in ISR) is set
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 5)));
 8001214:	bf00      	nop
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f8      	beq.n	8001216 <I2C_MasterReceiveData+0xa4>

        // Clear STOP flag in ICR
        pI2CHandle->pI2Cx->ICR |= (1 << 5);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69da      	ldr	r2, [r3, #28]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0220 	orr.w	r2, r2, #32
 8001232:	61da      	str	r2, [r3, #28]
    else
    {
        // If repeated start, wait for transfer complete (bit 6 in ISR)
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
    }
}
 8001234:	e007      	b.n	8001246 <I2C_MasterReceiveData+0xd4>
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
 8001236:	bf00      	nop
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f8      	beq.n	8001238 <I2C_MasterReceiveData+0xc6>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <memset>:
 800124e:	4402      	add	r2, r0
 8001250:	4603      	mov	r3, r0
 8001252:	4293      	cmp	r3, r2
 8001254:	d100      	bne.n	8001258 <memset+0xa>
 8001256:	4770      	bx	lr
 8001258:	f803 1b01 	strb.w	r1, [r3], #1
 800125c:	e7f9      	b.n	8001252 <memset+0x4>
	...

08001260 <__libc_init_array>:
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	4d0d      	ldr	r5, [pc, #52]	@ (8001298 <__libc_init_array+0x38>)
 8001264:	4c0d      	ldr	r4, [pc, #52]	@ (800129c <__libc_init_array+0x3c>)
 8001266:	1b64      	subs	r4, r4, r5
 8001268:	10a4      	asrs	r4, r4, #2
 800126a:	2600      	movs	r6, #0
 800126c:	42a6      	cmp	r6, r4
 800126e:	d109      	bne.n	8001284 <__libc_init_array+0x24>
 8001270:	4d0b      	ldr	r5, [pc, #44]	@ (80012a0 <__libc_init_array+0x40>)
 8001272:	4c0c      	ldr	r4, [pc, #48]	@ (80012a4 <__libc_init_array+0x44>)
 8001274:	f000 f818 	bl	80012a8 <_init>
 8001278:	1b64      	subs	r4, r4, r5
 800127a:	10a4      	asrs	r4, r4, #2
 800127c:	2600      	movs	r6, #0
 800127e:	42a6      	cmp	r6, r4
 8001280:	d105      	bne.n	800128e <__libc_init_array+0x2e>
 8001282:	bd70      	pop	{r4, r5, r6, pc}
 8001284:	f855 3b04 	ldr.w	r3, [r5], #4
 8001288:	4798      	blx	r3
 800128a:	3601      	adds	r6, #1
 800128c:	e7ee      	b.n	800126c <__libc_init_array+0xc>
 800128e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001292:	4798      	blx	r3
 8001294:	3601      	adds	r6, #1
 8001296:	e7f2      	b.n	800127e <__libc_init_array+0x1e>
 8001298:	08001340 	.word	0x08001340
 800129c:	08001340 	.word	0x08001340
 80012a0:	08001340 	.word	0x08001340
 80012a4:	08001344 	.word	0x08001344

080012a8 <_init>:
 80012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012aa:	bf00      	nop
 80012ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ae:	bc08      	pop	{r3}
 80012b0:	469e      	mov	lr, r3
 80012b2:	4770      	bx	lr

080012b4 <_fini>:
 80012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b6:	bf00      	nop
 80012b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ba:	bc08      	pop	{r3}
 80012bc:	469e      	mov	lr, r3
 80012be:	4770      	bx	lr

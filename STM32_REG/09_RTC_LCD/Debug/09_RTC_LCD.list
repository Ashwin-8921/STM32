
09_RTC_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001574  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001700  08001700  00002700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001780  08001780  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001780  08001780  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001780  08001780  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001780  08001780  00002780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001784  08001784  00002784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001788  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          00000190  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000027fb  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a08  00000000  00000000  00005881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e8  00000000  00000000  00006290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000021b  00000000  00000000  00006578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ce1  00000000  00000000  00006793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000039b6  00000000  00000000  0000a474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ce2b  00000000  00000000  0000de2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001ac55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001158  00000000  00000000  0001ac98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0001bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000005c 	.word	0x2000005c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080016e8 	.word	0x080016e8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000060 	.word	0x20000060
 80001c8:	080016e8 	.word	0x080016e8

080001cc <main>:
char* date_to_string(RTC_date_t *rtc_date);
void init_systick_timer(uint32_t tick_hz);


int main()
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	 RTC_time_t current_time;
	 RTC_date_t current_date;

	 printf("RTC test\n");
 80001d2:	481a      	ldr	r0, [pc, #104]	@ (800023c <main+0x70>)
 80001d4:	f000 ffa6 	bl	8001124 <puts>

	 if(ds1307_init())
 80001d8:	f000 f932 	bl	8000440 <ds1307_init>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d004      	beq.n	80001ec <main+0x20>
	 {
	     printf("RTC init has failed\n");
 80001e2:	4817      	ldr	r0, [pc, #92]	@ (8000240 <main+0x74>)
 80001e4:	f000 ff9e 	bl	8001124 <puts>
	     while(1);
 80001e8:	bf00      	nop
 80001ea:	e7fd      	b.n	80001e8 <main+0x1c>
	 }

	 init_systick_timer(1);
 80001ec:	2001      	movs	r0, #1
 80001ee:	f000 f829 	bl	8000244 <init_systick_timer>


	    current_date.day = FRIDAY;
 80001f2:	2306      	movs	r3, #6
 80001f4:	70fb      	strb	r3, [r7, #3]
	    current_date.date = 15;
 80001f6:	230f      	movs	r3, #15
 80001f8:	703b      	strb	r3, [r7, #0]
	    current_date.month = 1;
 80001fa:	2301      	movs	r3, #1
 80001fc:	707b      	strb	r3, [r7, #1]
	    current_date.year = 21;
 80001fe:	2315      	movs	r3, #21
 8000200:	70bb      	strb	r3, [r7, #2]

	    current_time.hours = 4;
 8000202:	2304      	movs	r3, #4
 8000204:	71bb      	strb	r3, [r7, #6]
	    current_time.minutes = 25;
 8000206:	2319      	movs	r3, #25
 8000208:	717b      	strb	r3, [r7, #5]
	    current_time.seconds = 41;
 800020a:	2329      	movs	r3, #41	@ 0x29
 800020c:	713b      	strb	r3, [r7, #4]
	    current_time.time_format = TIME_FORMAT_12HRS_PM;
 800020e:	2301      	movs	r3, #1
 8000210:	71fb      	strb	r3, [r7, #7]

	    ds1307_set_current_date(&current_date);
 8000212:	463b      	mov	r3, r7
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f9c3 	bl	80005a0 <ds1307_set_current_date>
	   	ds1307_set_current_time(&current_time);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f92d 	bl	800047c <ds1307_set_current_time>

	    ds1307_get_current_date(&current_date);
 8000222:	463b      	mov	r3, r7
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f9eb 	bl	8000600 <ds1307_get_current_date>
	    ds1307_get_current_time(&current_time);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f96e 	bl	800050e <ds1307_get_current_time>
 8000232:	2300      	movs	r3, #0

}
 8000234:	4618      	mov	r0, r3
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	08001700 	.word	0x08001700
 8000240:	0800170c 	.word	0x0800170c

08000244 <init_systick_timer>:
	return buf;
}


void init_systick_timer(uint32_t tick_hz)
{
 8000244:	b480      	push	{r7}
 8000246:	b087      	sub	sp, #28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 800024c:	4b14      	ldr	r3, [pc, #80]	@ (80002a0 <init_systick_timer+0x5c>)
 800024e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000250:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <init_systick_timer+0x60>)
 8000252:	613b      	str	r3, [r7, #16]
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000254:	4a14      	ldr	r2, [pc, #80]	@ (80002a8 <init_systick_timer+0x64>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	fbb2 f3f3 	udiv	r3, r2, r3
 800025c:	3b01      	subs	r3, #1
 800025e:	60fb      	str	r3, [r7, #12]

    *pSRVR &= ~(0x00FFFFFFFF);
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
    *pSRVR |= count_value;
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	431a      	orrs	r2, r3
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 1);
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f043 0202 	orr.w	r2, r3, #2
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f043 0204 	orr.w	r2, r3, #4
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 0);
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f043 0201 	orr.w	r2, r3, #1
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	371c      	adds	r7, #28
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	e000e014 	.word	0xe000e014
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	00f42400 	.word	0x00f42400

080002ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	e00a      	b.n	80002d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002be:	f3af 8000 	nop.w
 80002c2:	4601      	mov	r1, r0
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	1c5a      	adds	r2, r3, #1
 80002c8:	60ba      	str	r2, [r7, #8]
 80002ca:	b2ca      	uxtb	r2, r1
 80002cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	3301      	adds	r3, #1
 80002d2:	617b      	str	r3, [r7, #20]
 80002d4:	697a      	ldr	r2, [r7, #20]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	429a      	cmp	r2, r3
 80002da:	dbf0      	blt.n	80002be <_read+0x12>
  }

  return len;
 80002dc:	687b      	ldr	r3, [r7, #4]
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3718      	adds	r7, #24
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b086      	sub	sp, #24
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	60f8      	str	r0, [r7, #12]
 80002ee:	60b9      	str	r1, [r7, #8]
 80002f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	e009      	b.n	800030c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	1c5a      	adds	r2, r3, #1
 80002fc:	60ba      	str	r2, [r7, #8]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	4618      	mov	r0, r3
 8000302:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3301      	adds	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	697a      	ldr	r2, [r7, #20]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	429a      	cmp	r2, r3
 8000312:	dbf1      	blt.n	80002f8 <_write+0x12>
  }
  return len;
 8000314:	687b      	ldr	r3, [r7, #4]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <_close>:

int _close(int file)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800032a:	4618      	mov	r0, r3
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr

08000334 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000344:	605a      	str	r2, [r3, #4]
  return 0;
 8000346:	2300      	movs	r3, #0
}
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr

08000352 <_isatty>:

int _isatty(int file)
{
 8000352:	b480      	push	{r7}
 8000354:	b083      	sub	sp, #12
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800035a:	2301      	movs	r3, #1
}
 800035c:	4618      	mov	r0, r3
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr

08000366 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000366:	b480      	push	{r7}
 8000368:	b085      	sub	sp, #20
 800036a:	af00      	add	r7, sp, #0
 800036c:	60f8      	str	r0, [r7, #12]
 800036e:	60b9      	str	r1, [r7, #8]
 8000370:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000372:	2300      	movs	r3, #0
}
 8000374:	4618      	mov	r0, r3
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
	...

08000380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000388:	4a14      	ldr	r2, [pc, #80]	@ (80003dc <_sbrk+0x5c>)
 800038a:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <_sbrk+0x60>)
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000394:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <_sbrk+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d102      	bne.n	80003a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <_sbrk+0x64>)
 800039e:	4a12      	ldr	r2, [pc, #72]	@ (80003e8 <_sbrk+0x68>)
 80003a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003a2:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <_sbrk+0x64>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	693a      	ldr	r2, [r7, #16]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d207      	bcs.n	80003c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003b0:	f000 fff6 	bl	80013a0 <__errno>
 80003b4:	4603      	mov	r3, r0
 80003b6:	220c      	movs	r2, #12
 80003b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ba:	f04f 33ff 	mov.w	r3, #4294967295
 80003be:	e009      	b.n	80003d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003c0:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <_sbrk+0x64>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003c6:	4b07      	ldr	r3, [pc, #28]	@ (80003e4 <_sbrk+0x64>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4413      	add	r3, r2
 80003ce:	4a05      	ldr	r2, [pc, #20]	@ (80003e4 <_sbrk+0x64>)
 80003d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003d2:	68fb      	ldr	r3, [r7, #12]
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20018000 	.word	0x20018000
 80003e0:	00000400 	.word	0x00000400
 80003e4:	20000078 	.word	0x20000078
 80003e8:	200001f0 	.word	0x200001f0

080003ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ec:	480d      	ldr	r0, [pc, #52]	@ (8000424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480c      	ldr	r0, [pc, #48]	@ (8000428 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f6:	490d      	ldr	r1, [pc, #52]	@ (800042c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000430 <LoopForever+0xe>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	@ (8000434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800040c:	4c0a      	ldr	r4, [pc, #40]	@ (8000438 <LoopForever+0x16>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800041a:	f000 ffc7 	bl	80013ac <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800041e:	f7ff fed5 	bl	80001cc <main>

08000422 <LoopForever>:

LoopForever:
  b LoopForever
 8000422:	e7fe      	b.n	8000422 <LoopForever>
  ldr   r0, =_estack
 8000424:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800042c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000430:	08001788 	.word	0x08001788
  ldr r2, =_sbss
 8000434:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000438:	200001ec 	.word	0x200001ec

0800043c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC1_2_IRQHandler>
	...

08000440 <ds1307_init>:

I2C_Handle_t g_ds1307I2cHandle;


uint8_t ds1307_init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
	ds1307_i2c_pin_config();
 8000446:	f000 f8e5 	bl	8000614 <ds1307_i2c_pin_config>
	ds1307_i2c_config();
 800044a:	f000 f927 	bl	800069c <ds1307_i2c_config>
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800044e:	2101      	movs	r1, #1
 8000450:	4809      	ldr	r0, [pc, #36]	@ (8000478 <ds1307_init+0x38>)
 8000452:	f000 fb7c 	bl	8000b4e <I2C_PeripheralControl>

	ds1307_write(0x00, DS1307_ADDR_SEC);
 8000456:	2100      	movs	r1, #0
 8000458:	2000      	movs	r0, #0
 800045a:	f000 f931 	bl	80006c0 <ds1307_write>
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f94a 	bl	80006f8 <ds1307_read>
 8000464:	4603      	mov	r3, r0
 8000466:	71fb      	strb	r3, [r7, #7]
	return ((clock_state >> 7 ) & 0x1);
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	09db      	lsrs	r3, r3, #7
 800046c:	b2db      	uxtb	r3, r3
}
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40005400 	.word	0x40005400

0800047c <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_time_t  *rtc_time)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 f953 	bl	8000734 <binary_to_bcd>
 800048e:	4603      	mov	r3, r0
 8000490:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8000492:	7bbb      	ldrb	r3, [r7, #14]
 8000494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000498:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800049a:	7bbb      	ldrb	r3, [r7, #14]
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 f90e 	bl	80006c0 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	785b      	ldrb	r3, [r3, #1]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f943 	bl	8000734 <binary_to_bcd>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2101      	movs	r1, #1
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f904 	bl	80006c0 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f939 	bl	8000734 <binary_to_bcd>
 80004c2:	4603      	mov	r3, r0
 80004c4:	73fb      	strb	r3, [r7, #15]
	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	78db      	ldrb	r3, [r3, #3]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d104      	bne.n	80004d8 <ds1307_set_current_time+0x5c>
			hrs &= ~(1 << 6);
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004d4:	73fb      	strb	r3, [r7, #15]
 80004d6:	e011      	b.n	80004fc <ds1307_set_current_time+0x80>
	}
	else
	{
			hrs |= (1 << 6);
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004de:	73fb      	strb	r3, [r7, #15]
			hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1 << 5) : hrs & ~(1 << 5);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	78db      	ldrb	r3, [r3, #3]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d104      	bne.n	80004f2 <ds1307_set_current_time+0x76>
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	e003      	b.n	80004fa <ds1307_set_current_time+0x7e>
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	f023 0320 	bic.w	r3, r3, #32
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs, DS1307_ADDR_HRS);
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	2102      	movs	r1, #2
 8000500:	4618      	mov	r0, r3
 8000502:	f000 f8dd 	bl	80006c0 <ds1307_write>

}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <ds1307_get_current_time>:


void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b084      	sub	sp, #16
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000516:	2000      	movs	r0, #0
 8000518:	f000 f8ee 	bl	80006f8 <ds1307_read>
 800051c:	4603      	mov	r3, r0
 800051e:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000526:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);
 8000528:	7bbb      	ldrb	r3, [r7, #14]
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f92e 	bl	800078c <bcd_to_binary>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000538:	2001      	movs	r0, #1
 800053a:	f000 f8dd 	bl	80006f8 <ds1307_read>
 800053e:	4603      	mov	r3, r0
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f923 	bl	800078c <bcd_to_binary>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 800054e:	2002      	movs	r0, #2
 8000550:	f000 f8d2 	bl	80006f8 <ds1307_read>
 8000554:	4603      	mov	r3, r0
 8000556:	73fb      	strb	r3, [r7, #15]

	if(hrs & (1 << 6))
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800055e:	2b00      	cmp	r3, #0
 8000560:	d00f      	beq.n	8000582 <ds1307_get_current_time+0x74>
	{
		rtc_time->time_format = !((hrs & (1 << 5)) == 0);
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	f003 0320 	and.w	r3, r3, #32
 8000568:	2b00      	cmp	r3, #0
 800056a:	bf14      	ite	ne
 800056c:	2301      	movne	r3, #1
 800056e:	2300      	moveq	r3, #0
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e002      	b.n	8000588 <ds1307_get_current_time+0x7a>

	}
	else
	{
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2202      	movs	r2, #2
 8000586:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f8fe 	bl	800078c <bcd_to_binary>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	709a      	strb	r2, [r3, #2]

}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f8c1 	bl	8000734 <binary_to_bcd>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2104      	movs	r1, #4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f882 	bl	80006c0 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	785b      	ldrb	r3, [r3, #1]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f8b7 	bl	8000734 <binary_to_bcd>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2105      	movs	r1, #5
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f878 	bl	80006c0 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f8ad 	bl	8000734 <binary_to_bcd>
 80005da:	4603      	mov	r3, r0
 80005dc:	2106      	movs	r1, #6
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f86e 	bl	80006c0 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	78db      	ldrb	r3, [r3, #3]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f8a3 	bl	8000734 <binary_to_bcd>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2103      	movs	r1, #3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f864 	bl	80006c0 <ds1307_write>

}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
	...

08000614 <ds1307_i2c_pin_config>:




static void ds1307_i2c_pin_config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;
	memset(&i2c_sda,0,sizeof(i2c_sda));
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	220c      	movs	r2, #12
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fe5e 	bl	80012e4 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000628:	463b      	mov	r3, r7
 800062a:	220c      	movs	r2, #12
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fe58 	bl	80012e4 <memset>


	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <ds1307_i2c_pin_config+0x80>)
 8000636:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800063c:	2302      	movs	r3, #2
 800063e:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000640:	2307      	movs	r3, #7
 8000642:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000644:	2301      	movs	r3, #1
 8000646:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000648:	2301      	movs	r3, #1
 800064a:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800064c:	2302      	movs	r3, #2
 800064e:	74bb      	strb	r3, [r7, #18]
	GPIOB_PCLK_EN();
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <ds1307_i2c_pin_config+0x84>)
 8000652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000654:	4a10      	ldr	r2, [pc, #64]	@ (8000698 <ds1307_i2c_pin_config+0x84>)
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIO_Init(&i2c_sda);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f8ad 	bl	80007c0 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <ds1307_i2c_pin_config+0x80>)
 8000668:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800066a:	2304      	movs	r3, #4
 800066c:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800066e:	2302      	movs	r3, #2
 8000670:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000672:	2306      	movs	r3, #6
 8000674:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000676:	2301      	movs	r3, #1
 8000678:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800067a:	2301      	movs	r3, #1
 800067c:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800067e:	2302      	movs	r3, #2
 8000680:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 8000682:	463b      	mov	r3, r7
 8000684:	4618      	mov	r0, r3
 8000686:	f000 f89b 	bl	80007c0 <GPIO_Init>
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	48000400 	.word	0x48000400
 8000698:	40021000 	.word	0x40021000

0800069c <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <ds1307_i2c_config+0x1c>)
 80006a2:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <ds1307_i2c_config+0x20>)
 80006a4:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80006a6:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <ds1307_i2c_config+0x1c>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	715a      	strb	r2, [r3, #5]
	I2C_Init(&g_ds1307I2cHandle);
 80006ac:	4802      	ldr	r0, [pc, #8]	@ (80006b8 <ds1307_i2c_config+0x1c>)
 80006ae:	f000 fa69 	bl	8000b84 <I2C_Init>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000007c 	.word	0x2000007c
 80006bc:	40005400 	.word	0x40005400

080006c0 <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	4603      	mov	r3, r0
 80006c8:	460a      	mov	r2, r1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80006d8:	f107 010c 	add.w	r1, r7, #12
 80006dc:	2300      	movs	r3, #0
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2368      	movs	r3, #104	@ 0x68
 80006e2:	2202      	movs	r2, #2
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <ds1307_write+0x34>)
 80006e6:	f000 fa7d 	bl	8000be4 <I2C_MasterSendData>
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000007c 	.word	0x2000007c

080006f8 <ds1307_read>:


static uint8_t ds1307_read(uint8_t reg_addr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000702:	1df9      	adds	r1, r7, #7
 8000704:	2300      	movs	r3, #0
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2368      	movs	r3, #104	@ 0x68
 800070a:	2201      	movs	r2, #1
 800070c:	4808      	ldr	r0, [pc, #32]	@ (8000730 <ds1307_read+0x38>)
 800070e:	f000 fa69 	bl	8000be4 <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000712:	f107 010f 	add.w	r1, r7, #15
 8000716:	2300      	movs	r3, #0
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2368      	movs	r3, #104	@ 0x68
 800071c:	2201      	movs	r2, #1
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <ds1307_read+0x38>)
 8000720:	f000 facb 	bl	8000cba <I2C_MasterReceiveData>
	return data;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000007c 	.word	0x2000007c

08000734 <binary_to_bcd>:


static uint8_t binary_to_bcd(uint8_t value)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;
	bcd = value;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b09      	cmp	r3, #9
 8000746:	d919      	bls.n	800077c <binary_to_bcd+0x48>
	{
		m = value /10;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a0f      	ldr	r2, [pc, #60]	@ (8000788 <binary_to_bcd+0x54>)
 800074c:	fba2 2303 	umull	r2, r3, r2, r3
 8000750:	08db      	lsrs	r3, r3, #3
 8000752:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <binary_to_bcd+0x54>)
 8000758:	fba3 1302 	umull	r1, r3, r3, r2
 800075c:	08d9      	lsrs	r1, r3, #3
 800075e:	460b      	mov	r3, r1
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	440b      	add	r3, r1
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n;
 800076a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800076e:	011b      	lsls	r3, r3, #4
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000776:	4313      	orrs	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	cccccccd 	.word	0xcccccccd

0800078c <bcd_to_binary>:



static uint8_t bcd_to_binary(uint8_t value)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t)((value >> 4) * 10);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	091b      	lsrs	r3, r3, #4
 800079a:	b2db      	uxtb	r3, r3
 800079c:	461a      	mov	r2, r3
 800079e:	0092      	lsls	r2, r2, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t)0x0F;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f003 030f 	and.w	r3, r3, #15
 80007ac:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	4413      	add	r3, r2
 80007b4:	b2db      	uxtb	r3, r3
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <GPIO_Init>:

/* Initialization and de-initialization */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d822      	bhi.n	800081a <GPIO_Init+0x5a>
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	795b      	ldrb	r3, [r3, #5]
 80007d8:	461a      	mov	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	2103      	movs	r1, #3
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	400a      	ands	r2, r1
 8000802:	601a      	str	r2, [r3, #0]
			pGPIOHandle ->pGPIOx->MODER |= temp;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6819      	ldr	r1, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	430a      	orrs	r2, r1
 8000812:	601a      	str	r2, [r3, #0]
			temp=0;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e0e1      	b.n	80009de <GPIO_Init+0x21e>
		}
		else
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	795b      	ldrb	r3, [r3, #5]
 800081e:	461a      	mov	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	617b      	str	r3, [r7, #20]
					pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2103      	movs	r1, #3
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	400a      	ands	r2, r1
 8000848:	601a      	str	r2, [r3, #0]
					pGPIOHandle ->pGPIOx->MODER |= temp;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6819      	ldr	r1, [r3, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	430a      	orrs	r2, r1
 8000858:	601a      	str	r2, [r3, #0]
					temp=0;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
			if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	795b      	ldrb	r3, [r3, #5]
 8000862:	2b04      	cmp	r3, #4
 8000864:	d117      	bne.n	8000896 <GPIO_Init+0xd6>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000866:	4b47      	ldr	r3, [pc, #284]	@ (8000984 <GPIO_Init+0x1c4>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	7912      	ldrb	r2, [r2, #4]
 800086e:	4611      	mov	r1, r2
 8000870:	2201      	movs	r2, #1
 8000872:	408a      	lsls	r2, r1
 8000874:	4611      	mov	r1, r2
 8000876:	4a43      	ldr	r2, [pc, #268]	@ (8000984 <GPIO_Init+0x1c4>)
 8000878:	430b      	orrs	r3, r1
 800087a:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800087c:	4b41      	ldr	r3, [pc, #260]	@ (8000984 <GPIO_Init+0x1c4>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	7912      	ldrb	r2, [r2, #4]
 8000884:	4611      	mov	r1, r2
 8000886:	2201      	movs	r2, #1
 8000888:	408a      	lsls	r2, r1
 800088a:	43d2      	mvns	r2, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a3d      	ldr	r2, [pc, #244]	@ (8000984 <GPIO_Init+0x1c4>)
 8000890:	400b      	ands	r3, r1
 8000892:	6093      	str	r3, [r2, #8]
 8000894:	e035      	b.n	8000902 <GPIO_Init+0x142>
					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	795b      	ldrb	r3, [r3, #5]
 800089a:	2b05      	cmp	r3, #5
 800089c:	d117      	bne.n	80008ce <GPIO_Init+0x10e>
					{
						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800089e:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <GPIO_Init+0x1c4>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	7912      	ldrb	r2, [r2, #4]
 80008a6:	4611      	mov	r1, r2
 80008a8:	2201      	movs	r2, #1
 80008aa:	408a      	lsls	r2, r1
 80008ac:	4611      	mov	r1, r2
 80008ae:	4a35      	ldr	r2, [pc, #212]	@ (8000984 <GPIO_Init+0x1c4>)
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6093      	str	r3, [r2, #8]

						EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008b4:	4b33      	ldr	r3, [pc, #204]	@ (8000984 <GPIO_Init+0x1c4>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	7912      	ldrb	r2, [r2, #4]
 80008bc:	4611      	mov	r1, r2
 80008be:	2201      	movs	r2, #1
 80008c0:	408a      	lsls	r2, r1
 80008c2:	43d2      	mvns	r2, r2
 80008c4:	4611      	mov	r1, r2
 80008c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000984 <GPIO_Init+0x1c4>)
 80008c8:	400b      	ands	r3, r1
 80008ca:	60d3      	str	r3, [r2, #12]
 80008cc:	e019      	b.n	8000902 <GPIO_Init+0x142>

					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	795b      	ldrb	r3, [r3, #5]
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	d115      	bne.n	8000902 <GPIO_Init+0x142>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80008d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <GPIO_Init+0x1c4>)
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	7912      	ldrb	r2, [r2, #4]
 80008de:	4611      	mov	r1, r2
 80008e0:	2201      	movs	r2, #1
 80008e2:	408a      	lsls	r2, r1
 80008e4:	4611      	mov	r1, r2
 80008e6:	4a27      	ldr	r2, [pc, #156]	@ (8000984 <GPIO_Init+0x1c4>)
 80008e8:	430b      	orrs	r3, r1
 80008ea:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80008ec:	4b25      	ldr	r3, [pc, #148]	@ (8000984 <GPIO_Init+0x1c4>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	7912      	ldrb	r2, [r2, #4]
 80008f4:	4611      	mov	r1, r2
 80008f6:	2201      	movs	r2, #1
 80008f8:	408a      	lsls	r2, r1
 80008fa:	4611      	mov	r1, r2
 80008fc:	4a21      	ldr	r2, [pc, #132]	@ (8000984 <GPIO_Init+0x1c4>)
 80008fe:	430b      	orrs	r3, r1
 8000900:	6093      	str	r3, [r2, #8]
					}
				 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	791b      	ldrb	r3, [r3, #4]
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	74fb      	strb	r3, [r7, #19]
				 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	74bb      	strb	r3, [r7, #18]
				 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800091c:	d042      	beq.n	80009a4 <GPIO_Init+0x1e4>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a19      	ldr	r2, [pc, #100]	@ (8000988 <GPIO_Init+0x1c8>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d02b      	beq.n	8000980 <GPIO_Init+0x1c0>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a17      	ldr	r2, [pc, #92]	@ (800098c <GPIO_Init+0x1cc>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d024      	beq.n	800097c <GPIO_Init+0x1bc>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a16      	ldr	r2, [pc, #88]	@ (8000990 <GPIO_Init+0x1d0>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d01d      	beq.n	8000978 <GPIO_Init+0x1b8>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a14      	ldr	r2, [pc, #80]	@ (8000994 <GPIO_Init+0x1d4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d016      	beq.n	8000974 <GPIO_Init+0x1b4>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a13      	ldr	r2, [pc, #76]	@ (8000998 <GPIO_Init+0x1d8>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d00f      	beq.n	8000970 <GPIO_Init+0x1b0>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a11      	ldr	r2, [pc, #68]	@ (800099c <GPIO_Init+0x1dc>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d008      	beq.n	800096c <GPIO_Init+0x1ac>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a10      	ldr	r2, [pc, #64]	@ (80009a0 <GPIO_Init+0x1e0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d101      	bne.n	8000968 <GPIO_Init+0x1a8>
 8000964:	2307      	movs	r3, #7
 8000966:	e01e      	b.n	80009a6 <GPIO_Init+0x1e6>
 8000968:	2300      	movs	r3, #0
 800096a:	e01c      	b.n	80009a6 <GPIO_Init+0x1e6>
 800096c:	2306      	movs	r3, #6
 800096e:	e01a      	b.n	80009a6 <GPIO_Init+0x1e6>
 8000970:	2305      	movs	r3, #5
 8000972:	e018      	b.n	80009a6 <GPIO_Init+0x1e6>
 8000974:	2304      	movs	r3, #4
 8000976:	e016      	b.n	80009a6 <GPIO_Init+0x1e6>
 8000978:	2303      	movs	r3, #3
 800097a:	e014      	b.n	80009a6 <GPIO_Init+0x1e6>
 800097c:	2302      	movs	r3, #2
 800097e:	e012      	b.n	80009a6 <GPIO_Init+0x1e6>
 8000980:	2301      	movs	r3, #1
 8000982:	e010      	b.n	80009a6 <GPIO_Init+0x1e6>
 8000984:	40010400 	.word	0x40010400
 8000988:	48000400 	.word	0x48000400
 800098c:	48000800 	.word	0x48000800
 8000990:	48000c00 	.word	0x48000c00
 8000994:	48001000 	.word	0x48001000
 8000998:	48001400 	.word	0x48001400
 800099c:	48001800 	.word	0x48001800
 80009a0:	48001c00 	.word	0x48001c00
 80009a4:	2300      	movs	r3, #0
 80009a6:	747b      	strb	r3, [r7, #17]
				 SYSCFG_PCLK_EN();
 80009a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000b24 <GPIO_Init+0x364>)
 80009aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ac:	4a5d      	ldr	r2, [pc, #372]	@ (8000b24 <GPIO_Init+0x364>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6613      	str	r3, [r2, #96]	@ 0x60
				 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 80009b4:	7c7a      	ldrb	r2, [r7, #17]
 80009b6:	7cbb      	ldrb	r3, [r7, #18]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	fa02 f103 	lsl.w	r1, r2, r3
 80009be:	4a5a      	ldr	r2, [pc, #360]	@ (8000b28 <GPIO_Init+0x368>)
 80009c0:	7cfb      	ldrb	r3, [r7, #19]
 80009c2:	3302      	adds	r3, #2
 80009c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80009c8:	4b58      	ldr	r3, [pc, #352]	@ (8000b2c <GPIO_Init+0x36c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	7912      	ldrb	r2, [r2, #4]
 80009d0:	4611      	mov	r1, r2
 80009d2:	2201      	movs	r2, #1
 80009d4:	408a      	lsls	r2, r1
 80009d6:	4611      	mov	r1, r2
 80009d8:	4a54      	ldr	r2, [pc, #336]	@ (8000b2c <GPIO_Init+0x36c>)
 80009da:	430b      	orrs	r3, r1
 80009dc:	6013      	str	r3, [r2, #0]
		}

		temp=0;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	799b      	ldrb	r3, [r3, #6]
 80009e6:	461a      	mov	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2103      	movs	r1, #3
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	400a      	ands	r2, r1
 8000a10:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6899      	ldr	r1, [r3, #8]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	609a      	str	r2, [r3, #8]
		temp=0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	79db      	ldrb	r3, [r3, #7]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	791b      	ldrb	r3, [r3, #4]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68da      	ldr	r2, [r3, #12]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2103      	movs	r1, #3
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	400a      	ands	r2, r1
 8000a54:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68d9      	ldr	r1, [r3, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	60da      	str	r2, [r3, #12]
		temp=0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7a1b      	ldrb	r3, [r3, #8]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	4619      	mov	r1, r3
 8000a86:	2301      	movs	r3, #1
 8000a88:	408b      	lsls	r3, r1
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	400a      	ands	r2, r1
 8000a94:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6859      	ldr	r1, [r3, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	605a      	str	r2, [r3, #4]
		temp=0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	795b      	ldrb	r3, [r3, #5]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d132      	bne.n	8000b18 <GPIO_Init+0x358>
		{
			uint32_t temp1 ,temp2;
			temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	791b      	ldrb	r3, [r3, #4]
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	60fb      	str	r3, [r7, #12]
			temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	791b      	ldrb	r3, [r3, #4]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	60bb      	str	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	3208      	adds	r2, #8
 8000ace:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4011      	ands	r1, r2
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	3208      	adds	r2, #8
 8000aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	3208      	adds	r2, #8
 8000af6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7a5b      	ldrb	r3, [r3, #9]
 8000afe:	4619      	mov	r1, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	fa01 f303 	lsl.w	r3, r1, r3
 8000b08:	4619      	mov	r1, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4311      	orrs	r1, r2
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	3208      	adds	r2, #8
 8000b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}




}
 8000b18:	bf00      	nop
 8000b1a:	371c      	adds	r7, #28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010000 	.word	0x40010000
 8000b2c:	40010400 	.word	0x40010400

08000b30 <I2C_GenerateStartCondition>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

// Function to generate a START condition on I2C bus
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    // Set the START bit (bit 13) in CR2 register
    pI2Cx->CR2 |= (1 << 13);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	605a      	str	r2, [r3, #4]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <I2C_PeripheralControl>:



// Enable or disable the given I2C peripheral
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d106      	bne.n	8000b6e <I2C_PeripheralControl+0x20>
    {
        // Set bit 0 (PE - Peripheral Enable) in CR1 → I2C ON
        pI2Cx->CR1 |= (1 << 0);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f043 0201 	orr.w	r2, r3, #1
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
    else
    {
        // Clear bit 0 (PE) in CR1 → I2C OFF
        pI2Cx->CR1 &= ~(1 << 0);
    }
}
 8000b6c:	e005      	b.n	8000b7a <I2C_PeripheralControl+0x2c>
        pI2Cx->CR1 &= ~(1 << 0);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f023 0201 	bic.w	r2, r3, #1
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <I2C_Init>:
}


// Initialize I2C peripheral
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]

    // 1. Set ACK control (bit 15 of CR2)
    tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 15;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	795b      	ldrb	r3, [r3, #5]
 8000b94:	03db      	lsls	r3, r3, #15
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->CR2 |= tempreg;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6859      	ldr	r1, [r3, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	605a      	str	r2, [r3, #4]

    // 2. Set timing for ~100kHz I2C speed
    pI2CHandle->pI2Cx->TIMINGR |= 0x00411313;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6919      	ldr	r1, [r3, #16]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <I2C_Init+0x5c>)
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	6113      	str	r3, [r2, #16]

    // 3. Set device own address (shifted left by 1 for 7-bit addr)
    tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	791b      	ldrb	r3, [r3, #4]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6899      	ldr	r1, [r3, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	609a      	str	r2, [r3, #8]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	00411313 	.word	0x00411313

08000be4 <I2C_MasterSendData>:
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,
                        uint8_t *pTxBuffer,
                        uint32_t Len,
                        uint8_t SlaveAddr,
                        uint8_t Sr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	70fb      	strb	r3, [r7, #3]
    // 1. Wait until I2C is not busy (BUSY flag in ISR, bit 15)
    while (((pI2CHandle->pI2Cx->ISR >> 15) & 1));
 8000bf2:	bf00      	nop
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	0bdb      	lsrs	r3, r3, #15
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1f7      	bne.n	8000bf4 <I2C_MasterSendData+0x10>

    // 2. Prepare CR2 register: set slave address + number of bytes
    uint32_t cr2 = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
    pI2CHandle->pI2Cx->CR2 |= (SlaveAddr << 1) | (Len << 16);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6859      	ldr	r1, [r3, #4]
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	005a      	lsls	r2, r3, #1
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	041b      	lsls	r3, r3, #16
 8000c16:	431a      	orrs	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	605a      	str	r2, [r3, #4]

    // 3. If no repeated start (Sr = disable), set AUTOEND (bit 25)
    if (Sr == I2C_DISABLE_SR)
 8000c20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d103      	bne.n	8000c30 <I2C_MasterSendData+0x4c>
    {
        cr2 |= (1 << 25);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c2e:	617b      	str	r3, [r7, #20]
    }
    pI2CHandle->pI2Cx->CR2 |= cr2;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6859      	ldr	r1, [r3, #4]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	605a      	str	r2, [r3, #4]

    // 4. Generate START condition
    I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff73 	bl	8000b30 <I2C_GenerateStartCondition>

    // 5. Send all bytes
    while (Len > 0)
 8000c4a:	e012      	b.n	8000c72 <I2C_MasterSendData+0x8e>
    {
        // Wait until TX buffer is empty (TXE, bit 0 in ISR)
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 0)));
 8000c4c:	bf00      	nop
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f8      	beq.n	8000c4e <I2C_MasterSendData+0x6a>

        // Write data to TXDR
        pI2CHandle->pI2Cx->TXDR = *pTxBuffer;
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28

        // Move to next byte
        pTxBuffer++;
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
        Len--;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
    while (Len > 0)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1e9      	bne.n	8000c4c <I2C_MasterSendData+0x68>
    }

    // 6. Handle STOP condition or repeated start
    if (Sr == I2C_DISABLE_SR)
 8000c78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d110      	bne.n	8000ca2 <I2C_MasterSendData+0xbe>
    {
        // Wait until STOP flag (bit 5 in ISR) is set
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 5)));
 8000c80:	bf00      	nop
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0320 	and.w	r3, r3, #32
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f8      	beq.n	8000c82 <I2C_MasterSendData+0x9e>

        // Clear STOP flag by writing to ICR
        pI2CHandle->pI2Cx->ICR |= (1 << 5);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	69da      	ldr	r2, [r3, #28]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0220 	orr.w	r2, r2, #32
 8000c9e:	61da      	str	r2, [r3, #28]
    else
    {
        // If repeated start, wait for TC (transfer complete, bit 6)
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
    }
}
 8000ca0:	e007      	b.n	8000cb2 <I2C_MasterSendData+0xce>
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
 8000ca2:	bf00      	nop
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0f8      	beq.n	8000ca4 <I2C_MasterSendData+0xc0>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <I2C_MasterReceiveData>:
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,
                           uint8_t *pRxBuffer,
                           uint8_t Len,
                           uint8_t SlaveAddr,
                           uint8_t Sr)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	460b      	mov	r3, r1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	71bb      	strb	r3, [r7, #6]
    // 1. Wait until the bus is free (BUSY flag = 0, bit 15 in ISR)
    while (((pI2CHandle->pI2Cx->ISR >> 15) & 1) == 0);
 8000cd0:	bf00      	nop
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	0bdb      	lsrs	r3, r3, #15
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f7      	beq.n	8000cd2 <I2C_MasterReceiveData+0x18>

    // 2. Configure CR2 register
    uint32_t cr2 = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
    cr2 |= (SlaveAddr << 1);   // Slave address
 8000ce6:	79bb      	ldrb	r3, [r7, #6]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]
    cr2 |= (Len << 16);        // Number of bytes to read
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]
    cr2 |= (0 << 10);          // Set direction = read (RD_WRN = 1 normally, 0 = write)
    if (Sr == I2C_DISABLE_SR)
 8000cfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d103      	bne.n	8000d0a <I2C_MasterReceiveData+0x50>
    {
        cr2 |= (1 << 25);      // AUTOEND = 1 (stop condition after transfer)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d08:	617b      	str	r3, [r7, #20]
    }

    // Load CR2 with settings
    pI2CHandle->pI2Cx->CR2 |= cr2;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6859      	ldr	r1, [r3, #4]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	605a      	str	r2, [r3, #4]

    // 3. Generate START condition
    I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff06 	bl	8000b30 <I2C_GenerateStartCondition>

    // 4. Read all bytes
    while (Len > 0)
 8000d24:	e013      	b.n	8000d4e <I2C_MasterReceiveData+0x94>
    {
        // Wait until RXNE flag is set (bit 2 in ISR)
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 2)));
 8000d26:	bf00      	nop
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f8      	beq.n	8000d28 <I2C_MasterReceiveData+0x6e>

        // Read received byte from RXDR
        *pRxBuffer = (uint8_t)pI2CHandle->pI2Cx->RXDR;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	701a      	strb	r2, [r3, #0]

        // Move buffer pointer and reduce length
        pRxBuffer++;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
        Len--;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	71fb      	strb	r3, [r7, #7]
    while (Len > 0)
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1e8      	bne.n	8000d26 <I2C_MasterReceiveData+0x6c>
    }

    // 5. Handle STOP or repeated start
    if (Sr == I2C_DISABLE_SR)
 8000d54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d110      	bne.n	8000d7e <I2C_MasterReceiveData+0xc4>
    {
        // Wait until STOP flag (bit 5 in ISR) is set
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 5)));
 8000d5c:	bf00      	nop
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f8      	beq.n	8000d5e <I2C_MasterReceiveData+0xa4>

        // Clear STOP flag in ICR
        pI2CHandle->pI2Cx->ICR |= (1 << 5);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	69da      	ldr	r2, [r3, #28]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0220 	orr.w	r2, r2, #32
 8000d7a:	61da      	str	r2, [r3, #28]
    else
    {
        // If repeated start, wait for transfer complete (bit 6 in ISR)
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
    }
}
 8000d7c:	e007      	b.n	8000d8e <I2C_MasterReceiveData+0xd4>
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
 8000d7e:	bf00      	nop
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f8      	beq.n	8000d80 <I2C_MasterReceiveData+0xc6>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <sbrk_aligned>:
 8000d98:	b570      	push	{r4, r5, r6, lr}
 8000d9a:	4e0f      	ldr	r6, [pc, #60]	@ (8000dd8 <sbrk_aligned+0x40>)
 8000d9c:	460c      	mov	r4, r1
 8000d9e:	6831      	ldr	r1, [r6, #0]
 8000da0:	4605      	mov	r5, r0
 8000da2:	b911      	cbnz	r1, 8000daa <sbrk_aligned+0x12>
 8000da4:	f000 fada 	bl	800135c <_sbrk_r>
 8000da8:	6030      	str	r0, [r6, #0]
 8000daa:	4621      	mov	r1, r4
 8000dac:	4628      	mov	r0, r5
 8000dae:	f000 fad5 	bl	800135c <_sbrk_r>
 8000db2:	1c43      	adds	r3, r0, #1
 8000db4:	d103      	bne.n	8000dbe <sbrk_aligned+0x26>
 8000db6:	f04f 34ff 	mov.w	r4, #4294967295
 8000dba:	4620      	mov	r0, r4
 8000dbc:	bd70      	pop	{r4, r5, r6, pc}
 8000dbe:	1cc4      	adds	r4, r0, #3
 8000dc0:	f024 0403 	bic.w	r4, r4, #3
 8000dc4:	42a0      	cmp	r0, r4
 8000dc6:	d0f8      	beq.n	8000dba <sbrk_aligned+0x22>
 8000dc8:	1a21      	subs	r1, r4, r0
 8000dca:	4628      	mov	r0, r5
 8000dcc:	f000 fac6 	bl	800135c <_sbrk_r>
 8000dd0:	3001      	adds	r0, #1
 8000dd2:	d1f2      	bne.n	8000dba <sbrk_aligned+0x22>
 8000dd4:	e7ef      	b.n	8000db6 <sbrk_aligned+0x1e>
 8000dd6:	bf00      	nop
 8000dd8:	200000a0 	.word	0x200000a0

08000ddc <_malloc_r>:
 8000ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000de0:	1ccd      	adds	r5, r1, #3
 8000de2:	f025 0503 	bic.w	r5, r5, #3
 8000de6:	3508      	adds	r5, #8
 8000de8:	2d0c      	cmp	r5, #12
 8000dea:	bf38      	it	cc
 8000dec:	250c      	movcc	r5, #12
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	4606      	mov	r6, r0
 8000df2:	db01      	blt.n	8000df8 <_malloc_r+0x1c>
 8000df4:	42a9      	cmp	r1, r5
 8000df6:	d904      	bls.n	8000e02 <_malloc_r+0x26>
 8000df8:	230c      	movs	r3, #12
 8000dfa:	6033      	str	r3, [r6, #0]
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ed8 <_malloc_r+0xfc>
 8000e06:	f000 f869 	bl	8000edc <__malloc_lock>
 8000e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8000e0e:	461c      	mov	r4, r3
 8000e10:	bb44      	cbnz	r4, 8000e64 <_malloc_r+0x88>
 8000e12:	4629      	mov	r1, r5
 8000e14:	4630      	mov	r0, r6
 8000e16:	f7ff ffbf 	bl	8000d98 <sbrk_aligned>
 8000e1a:	1c43      	adds	r3, r0, #1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	d158      	bne.n	8000ed2 <_malloc_r+0xf6>
 8000e20:	f8d8 4000 	ldr.w	r4, [r8]
 8000e24:	4627      	mov	r7, r4
 8000e26:	2f00      	cmp	r7, #0
 8000e28:	d143      	bne.n	8000eb2 <_malloc_r+0xd6>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d04b      	beq.n	8000ec6 <_malloc_r+0xea>
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	4639      	mov	r1, r7
 8000e32:	4630      	mov	r0, r6
 8000e34:	eb04 0903 	add.w	r9, r4, r3
 8000e38:	f000 fa90 	bl	800135c <_sbrk_r>
 8000e3c:	4581      	cmp	r9, r0
 8000e3e:	d142      	bne.n	8000ec6 <_malloc_r+0xea>
 8000e40:	6821      	ldr	r1, [r4, #0]
 8000e42:	1a6d      	subs	r5, r5, r1
 8000e44:	4629      	mov	r1, r5
 8000e46:	4630      	mov	r0, r6
 8000e48:	f7ff ffa6 	bl	8000d98 <sbrk_aligned>
 8000e4c:	3001      	adds	r0, #1
 8000e4e:	d03a      	beq.n	8000ec6 <_malloc_r+0xea>
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	442b      	add	r3, r5
 8000e54:	6023      	str	r3, [r4, #0]
 8000e56:	f8d8 3000 	ldr.w	r3, [r8]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	bb62      	cbnz	r2, 8000eb8 <_malloc_r+0xdc>
 8000e5e:	f8c8 7000 	str.w	r7, [r8]
 8000e62:	e00f      	b.n	8000e84 <_malloc_r+0xa8>
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	1b52      	subs	r2, r2, r5
 8000e68:	d420      	bmi.n	8000eac <_malloc_r+0xd0>
 8000e6a:	2a0b      	cmp	r2, #11
 8000e6c:	d917      	bls.n	8000e9e <_malloc_r+0xc2>
 8000e6e:	1961      	adds	r1, r4, r5
 8000e70:	42a3      	cmp	r3, r4
 8000e72:	6025      	str	r5, [r4, #0]
 8000e74:	bf18      	it	ne
 8000e76:	6059      	strne	r1, [r3, #4]
 8000e78:	6863      	ldr	r3, [r4, #4]
 8000e7a:	bf08      	it	eq
 8000e7c:	f8c8 1000 	streq.w	r1, [r8]
 8000e80:	5162      	str	r2, [r4, r5]
 8000e82:	604b      	str	r3, [r1, #4]
 8000e84:	4630      	mov	r0, r6
 8000e86:	f000 f82f 	bl	8000ee8 <__malloc_unlock>
 8000e8a:	f104 000b 	add.w	r0, r4, #11
 8000e8e:	1d23      	adds	r3, r4, #4
 8000e90:	f020 0007 	bic.w	r0, r0, #7
 8000e94:	1ac2      	subs	r2, r0, r3
 8000e96:	bf1c      	itt	ne
 8000e98:	1a1b      	subne	r3, r3, r0
 8000e9a:	50a3      	strne	r3, [r4, r2]
 8000e9c:	e7af      	b.n	8000dfe <_malloc_r+0x22>
 8000e9e:	6862      	ldr	r2, [r4, #4]
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	bf0c      	ite	eq
 8000ea4:	f8c8 2000 	streq.w	r2, [r8]
 8000ea8:	605a      	strne	r2, [r3, #4]
 8000eaa:	e7eb      	b.n	8000e84 <_malloc_r+0xa8>
 8000eac:	4623      	mov	r3, r4
 8000eae:	6864      	ldr	r4, [r4, #4]
 8000eb0:	e7ae      	b.n	8000e10 <_malloc_r+0x34>
 8000eb2:	463c      	mov	r4, r7
 8000eb4:	687f      	ldr	r7, [r7, #4]
 8000eb6:	e7b6      	b.n	8000e26 <_malloc_r+0x4a>
 8000eb8:	461a      	mov	r2, r3
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	42a3      	cmp	r3, r4
 8000ebe:	d1fb      	bne.n	8000eb8 <_malloc_r+0xdc>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	6053      	str	r3, [r2, #4]
 8000ec4:	e7de      	b.n	8000e84 <_malloc_r+0xa8>
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	6033      	str	r3, [r6, #0]
 8000eca:	4630      	mov	r0, r6
 8000ecc:	f000 f80c 	bl	8000ee8 <__malloc_unlock>
 8000ed0:	e794      	b.n	8000dfc <_malloc_r+0x20>
 8000ed2:	6005      	str	r5, [r0, #0]
 8000ed4:	e7d6      	b.n	8000e84 <_malloc_r+0xa8>
 8000ed6:	bf00      	nop
 8000ed8:	200000a4 	.word	0x200000a4

08000edc <__malloc_lock>:
 8000edc:	4801      	ldr	r0, [pc, #4]	@ (8000ee4 <__malloc_lock+0x8>)
 8000ede:	f000 ba8a 	b.w	80013f6 <__retarget_lock_acquire_recursive>
 8000ee2:	bf00      	nop
 8000ee4:	200001e8 	.word	0x200001e8

08000ee8 <__malloc_unlock>:
 8000ee8:	4801      	ldr	r0, [pc, #4]	@ (8000ef0 <__malloc_unlock+0x8>)
 8000eea:	f000 ba85 	b.w	80013f8 <__retarget_lock_release_recursive>
 8000eee:	bf00      	nop
 8000ef0:	200001e8 	.word	0x200001e8

08000ef4 <std>:
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	b510      	push	{r4, lr}
 8000ef8:	4604      	mov	r4, r0
 8000efa:	e9c0 3300 	strd	r3, r3, [r0]
 8000efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f02:	6083      	str	r3, [r0, #8]
 8000f04:	8181      	strh	r1, [r0, #12]
 8000f06:	6643      	str	r3, [r0, #100]	@ 0x64
 8000f08:	81c2      	strh	r2, [r0, #14]
 8000f0a:	6183      	str	r3, [r0, #24]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2208      	movs	r2, #8
 8000f10:	305c      	adds	r0, #92	@ 0x5c
 8000f12:	f000 f9e7 	bl	80012e4 <memset>
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <std+0x58>)
 8000f18:	6263      	str	r3, [r4, #36]	@ 0x24
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <std+0x5c>)
 8000f1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <std+0x60>)
 8000f20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <std+0x64>)
 8000f24:	6323      	str	r3, [r4, #48]	@ 0x30
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <std+0x68>)
 8000f28:	6224      	str	r4, [r4, #32]
 8000f2a:	429c      	cmp	r4, r3
 8000f2c:	d006      	beq.n	8000f3c <std+0x48>
 8000f2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000f32:	4294      	cmp	r4, r2
 8000f34:	d002      	beq.n	8000f3c <std+0x48>
 8000f36:	33d0      	adds	r3, #208	@ 0xd0
 8000f38:	429c      	cmp	r4, r3
 8000f3a:	d105      	bne.n	8000f48 <std+0x54>
 8000f3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f44:	f000 ba56 	b.w	80013f4 <__retarget_lock_init_recursive>
 8000f48:	bd10      	pop	{r4, pc}
 8000f4a:	bf00      	nop
 8000f4c:	08001135 	.word	0x08001135
 8000f50:	08001157 	.word	0x08001157
 8000f54:	0800118f 	.word	0x0800118f
 8000f58:	080011b3 	.word	0x080011b3
 8000f5c:	200000a8 	.word	0x200000a8

08000f60 <stdio_exit_handler>:
 8000f60:	4a02      	ldr	r2, [pc, #8]	@ (8000f6c <stdio_exit_handler+0xc>)
 8000f62:	4903      	ldr	r1, [pc, #12]	@ (8000f70 <stdio_exit_handler+0x10>)
 8000f64:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <stdio_exit_handler+0x14>)
 8000f66:	f000 b869 	b.w	800103c <_fwalk_sglue>
 8000f6a:	bf00      	nop
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	08001591 	.word	0x08001591
 8000f74:	20000010 	.word	0x20000010

08000f78 <cleanup_stdio>:
 8000f78:	6841      	ldr	r1, [r0, #4]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <cleanup_stdio+0x34>)
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	b510      	push	{r4, lr}
 8000f80:	4604      	mov	r4, r0
 8000f82:	d001      	beq.n	8000f88 <cleanup_stdio+0x10>
 8000f84:	f000 fb04 	bl	8001590 <_fflush_r>
 8000f88:	68a1      	ldr	r1, [r4, #8]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <cleanup_stdio+0x38>)
 8000f8c:	4299      	cmp	r1, r3
 8000f8e:	d002      	beq.n	8000f96 <cleanup_stdio+0x1e>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f000 fafd 	bl	8001590 <_fflush_r>
 8000f96:	68e1      	ldr	r1, [r4, #12]
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <cleanup_stdio+0x3c>)
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d004      	beq.n	8000fa8 <cleanup_stdio+0x30>
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fa4:	f000 baf4 	b.w	8001590 <_fflush_r>
 8000fa8:	bd10      	pop	{r4, pc}
 8000faa:	bf00      	nop
 8000fac:	200000a8 	.word	0x200000a8
 8000fb0:	20000110 	.word	0x20000110
 8000fb4:	20000178 	.word	0x20000178

08000fb8 <global_stdio_init.part.0>:
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <global_stdio_init.part.0+0x30>)
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	@ (8000fec <global_stdio_init.part.0+0x34>)
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff0 <global_stdio_init.part.0+0x38>)
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	f7ff ff94 	bl	8000ef4 <std>
 8000fcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2109      	movs	r1, #9
 8000fd4:	f7ff ff8e 	bl	8000ef4 <std>
 8000fd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000fdc:	2202      	movs	r2, #2
 8000fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fe2:	2112      	movs	r1, #18
 8000fe4:	f7ff bf86 	b.w	8000ef4 <std>
 8000fe8:	200001e0 	.word	0x200001e0
 8000fec:	200000a8 	.word	0x200000a8
 8000ff0:	08000f61 	.word	0x08000f61

08000ff4 <__sfp_lock_acquire>:
 8000ff4:	4801      	ldr	r0, [pc, #4]	@ (8000ffc <__sfp_lock_acquire+0x8>)
 8000ff6:	f000 b9fe 	b.w	80013f6 <__retarget_lock_acquire_recursive>
 8000ffa:	bf00      	nop
 8000ffc:	200001e9 	.word	0x200001e9

08001000 <__sfp_lock_release>:
 8001000:	4801      	ldr	r0, [pc, #4]	@ (8001008 <__sfp_lock_release+0x8>)
 8001002:	f000 b9f9 	b.w	80013f8 <__retarget_lock_release_recursive>
 8001006:	bf00      	nop
 8001008:	200001e9 	.word	0x200001e9

0800100c <__sinit>:
 800100c:	b510      	push	{r4, lr}
 800100e:	4604      	mov	r4, r0
 8001010:	f7ff fff0 	bl	8000ff4 <__sfp_lock_acquire>
 8001014:	6a23      	ldr	r3, [r4, #32]
 8001016:	b11b      	cbz	r3, 8001020 <__sinit+0x14>
 8001018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800101c:	f7ff bff0 	b.w	8001000 <__sfp_lock_release>
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__sinit+0x28>)
 8001022:	6223      	str	r3, [r4, #32]
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <__sinit+0x2c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f5      	bne.n	8001018 <__sinit+0xc>
 800102c:	f7ff ffc4 	bl	8000fb8 <global_stdio_init.part.0>
 8001030:	e7f2      	b.n	8001018 <__sinit+0xc>
 8001032:	bf00      	nop
 8001034:	08000f79 	.word	0x08000f79
 8001038:	200001e0 	.word	0x200001e0

0800103c <_fwalk_sglue>:
 800103c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001040:	4607      	mov	r7, r0
 8001042:	4688      	mov	r8, r1
 8001044:	4614      	mov	r4, r2
 8001046:	2600      	movs	r6, #0
 8001048:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800104c:	f1b9 0901 	subs.w	r9, r9, #1
 8001050:	d505      	bpl.n	800105e <_fwalk_sglue+0x22>
 8001052:	6824      	ldr	r4, [r4, #0]
 8001054:	2c00      	cmp	r4, #0
 8001056:	d1f7      	bne.n	8001048 <_fwalk_sglue+0xc>
 8001058:	4630      	mov	r0, r6
 800105a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800105e:	89ab      	ldrh	r3, [r5, #12]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d907      	bls.n	8001074 <_fwalk_sglue+0x38>
 8001064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001068:	3301      	adds	r3, #1
 800106a:	d003      	beq.n	8001074 <_fwalk_sglue+0x38>
 800106c:	4629      	mov	r1, r5
 800106e:	4638      	mov	r0, r7
 8001070:	47c0      	blx	r8
 8001072:	4306      	orrs	r6, r0
 8001074:	3568      	adds	r5, #104	@ 0x68
 8001076:	e7e9      	b.n	800104c <_fwalk_sglue+0x10>

08001078 <_puts_r>:
 8001078:	6a03      	ldr	r3, [r0, #32]
 800107a:	b570      	push	{r4, r5, r6, lr}
 800107c:	6884      	ldr	r4, [r0, #8]
 800107e:	4605      	mov	r5, r0
 8001080:	460e      	mov	r6, r1
 8001082:	b90b      	cbnz	r3, 8001088 <_puts_r+0x10>
 8001084:	f7ff ffc2 	bl	800100c <__sinit>
 8001088:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800108a:	07db      	lsls	r3, r3, #31
 800108c:	d405      	bmi.n	800109a <_puts_r+0x22>
 800108e:	89a3      	ldrh	r3, [r4, #12]
 8001090:	0598      	lsls	r0, r3, #22
 8001092:	d402      	bmi.n	800109a <_puts_r+0x22>
 8001094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001096:	f000 f9ae 	bl	80013f6 <__retarget_lock_acquire_recursive>
 800109a:	89a3      	ldrh	r3, [r4, #12]
 800109c:	0719      	lsls	r1, r3, #28
 800109e:	d502      	bpl.n	80010a6 <_puts_r+0x2e>
 80010a0:	6923      	ldr	r3, [r4, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d135      	bne.n	8001112 <_puts_r+0x9a>
 80010a6:	4621      	mov	r1, r4
 80010a8:	4628      	mov	r0, r5
 80010aa:	f000 f8c5 	bl	8001238 <__swsetup_r>
 80010ae:	b380      	cbz	r0, 8001112 <_puts_r+0x9a>
 80010b0:	f04f 35ff 	mov.w	r5, #4294967295
 80010b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80010b6:	07da      	lsls	r2, r3, #31
 80010b8:	d405      	bmi.n	80010c6 <_puts_r+0x4e>
 80010ba:	89a3      	ldrh	r3, [r4, #12]
 80010bc:	059b      	lsls	r3, r3, #22
 80010be:	d402      	bmi.n	80010c6 <_puts_r+0x4e>
 80010c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010c2:	f000 f999 	bl	80013f8 <__retarget_lock_release_recursive>
 80010c6:	4628      	mov	r0, r5
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da04      	bge.n	80010d8 <_puts_r+0x60>
 80010ce:	69a2      	ldr	r2, [r4, #24]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dc17      	bgt.n	8001104 <_puts_r+0x8c>
 80010d4:	290a      	cmp	r1, #10
 80010d6:	d015      	beq.n	8001104 <_puts_r+0x8c>
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	6022      	str	r2, [r4, #0]
 80010de:	7019      	strb	r1, [r3, #0]
 80010e0:	68a3      	ldr	r3, [r4, #8]
 80010e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010e6:	3b01      	subs	r3, #1
 80010e8:	60a3      	str	r3, [r4, #8]
 80010ea:	2900      	cmp	r1, #0
 80010ec:	d1ed      	bne.n	80010ca <_puts_r+0x52>
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	da11      	bge.n	8001116 <_puts_r+0x9e>
 80010f2:	4622      	mov	r2, r4
 80010f4:	210a      	movs	r1, #10
 80010f6:	4628      	mov	r0, r5
 80010f8:	f000 f85f 	bl	80011ba <__swbuf_r>
 80010fc:	3001      	adds	r0, #1
 80010fe:	d0d7      	beq.n	80010b0 <_puts_r+0x38>
 8001100:	250a      	movs	r5, #10
 8001102:	e7d7      	b.n	80010b4 <_puts_r+0x3c>
 8001104:	4622      	mov	r2, r4
 8001106:	4628      	mov	r0, r5
 8001108:	f000 f857 	bl	80011ba <__swbuf_r>
 800110c:	3001      	adds	r0, #1
 800110e:	d1e7      	bne.n	80010e0 <_puts_r+0x68>
 8001110:	e7ce      	b.n	80010b0 <_puts_r+0x38>
 8001112:	3e01      	subs	r6, #1
 8001114:	e7e4      	b.n	80010e0 <_puts_r+0x68>
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	6022      	str	r2, [r4, #0]
 800111c:	220a      	movs	r2, #10
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e7ee      	b.n	8001100 <_puts_r+0x88>
	...

08001124 <puts>:
 8001124:	4b02      	ldr	r3, [pc, #8]	@ (8001130 <puts+0xc>)
 8001126:	4601      	mov	r1, r0
 8001128:	6818      	ldr	r0, [r3, #0]
 800112a:	f7ff bfa5 	b.w	8001078 <_puts_r>
 800112e:	bf00      	nop
 8001130:	2000000c 	.word	0x2000000c

08001134 <__sread>:
 8001134:	b510      	push	{r4, lr}
 8001136:	460c      	mov	r4, r1
 8001138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800113c:	f000 f8fc 	bl	8001338 <_read_r>
 8001140:	2800      	cmp	r0, #0
 8001142:	bfab      	itete	ge
 8001144:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001146:	89a3      	ldrhlt	r3, [r4, #12]
 8001148:	181b      	addge	r3, r3, r0
 800114a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800114e:	bfac      	ite	ge
 8001150:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001152:	81a3      	strhlt	r3, [r4, #12]
 8001154:	bd10      	pop	{r4, pc}

08001156 <__swrite>:
 8001156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800115a:	461f      	mov	r7, r3
 800115c:	898b      	ldrh	r3, [r1, #12]
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	4605      	mov	r5, r0
 8001162:	460c      	mov	r4, r1
 8001164:	4616      	mov	r6, r2
 8001166:	d505      	bpl.n	8001174 <__swrite+0x1e>
 8001168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800116c:	2302      	movs	r3, #2
 800116e:	2200      	movs	r2, #0
 8001170:	f000 f8d0 	bl	8001314 <_lseek_r>
 8001174:	89a3      	ldrh	r3, [r4, #12]
 8001176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800117a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800117e:	81a3      	strh	r3, [r4, #12]
 8001180:	4632      	mov	r2, r6
 8001182:	463b      	mov	r3, r7
 8001184:	4628      	mov	r0, r5
 8001186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800118a:	f000 b8f7 	b.w	800137c <_write_r>

0800118e <__sseek>:
 800118e:	b510      	push	{r4, lr}
 8001190:	460c      	mov	r4, r1
 8001192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001196:	f000 f8bd 	bl	8001314 <_lseek_r>
 800119a:	1c43      	adds	r3, r0, #1
 800119c:	89a3      	ldrh	r3, [r4, #12]
 800119e:	bf15      	itete	ne
 80011a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80011a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80011a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80011aa:	81a3      	strheq	r3, [r4, #12]
 80011ac:	bf18      	it	ne
 80011ae:	81a3      	strhne	r3, [r4, #12]
 80011b0:	bd10      	pop	{r4, pc}

080011b2 <__sclose>:
 80011b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b6:	f000 b89d 	b.w	80012f4 <_close_r>

080011ba <__swbuf_r>:
 80011ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011bc:	460e      	mov	r6, r1
 80011be:	4614      	mov	r4, r2
 80011c0:	4605      	mov	r5, r0
 80011c2:	b118      	cbz	r0, 80011cc <__swbuf_r+0x12>
 80011c4:	6a03      	ldr	r3, [r0, #32]
 80011c6:	b90b      	cbnz	r3, 80011cc <__swbuf_r+0x12>
 80011c8:	f7ff ff20 	bl	800100c <__sinit>
 80011cc:	69a3      	ldr	r3, [r4, #24]
 80011ce:	60a3      	str	r3, [r4, #8]
 80011d0:	89a3      	ldrh	r3, [r4, #12]
 80011d2:	071a      	lsls	r2, r3, #28
 80011d4:	d501      	bpl.n	80011da <__swbuf_r+0x20>
 80011d6:	6923      	ldr	r3, [r4, #16]
 80011d8:	b943      	cbnz	r3, 80011ec <__swbuf_r+0x32>
 80011da:	4621      	mov	r1, r4
 80011dc:	4628      	mov	r0, r5
 80011de:	f000 f82b 	bl	8001238 <__swsetup_r>
 80011e2:	b118      	cbz	r0, 80011ec <__swbuf_r+0x32>
 80011e4:	f04f 37ff 	mov.w	r7, #4294967295
 80011e8:	4638      	mov	r0, r7
 80011ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	6922      	ldr	r2, [r4, #16]
 80011f0:	1a98      	subs	r0, r3, r2
 80011f2:	6963      	ldr	r3, [r4, #20]
 80011f4:	b2f6      	uxtb	r6, r6
 80011f6:	4283      	cmp	r3, r0
 80011f8:	4637      	mov	r7, r6
 80011fa:	dc05      	bgt.n	8001208 <__swbuf_r+0x4e>
 80011fc:	4621      	mov	r1, r4
 80011fe:	4628      	mov	r0, r5
 8001200:	f000 f9c6 	bl	8001590 <_fflush_r>
 8001204:	2800      	cmp	r0, #0
 8001206:	d1ed      	bne.n	80011e4 <__swbuf_r+0x2a>
 8001208:	68a3      	ldr	r3, [r4, #8]
 800120a:	3b01      	subs	r3, #1
 800120c:	60a3      	str	r3, [r4, #8]
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	6022      	str	r2, [r4, #0]
 8001214:	701e      	strb	r6, [r3, #0]
 8001216:	6962      	ldr	r2, [r4, #20]
 8001218:	1c43      	adds	r3, r0, #1
 800121a:	429a      	cmp	r2, r3
 800121c:	d004      	beq.n	8001228 <__swbuf_r+0x6e>
 800121e:	89a3      	ldrh	r3, [r4, #12]
 8001220:	07db      	lsls	r3, r3, #31
 8001222:	d5e1      	bpl.n	80011e8 <__swbuf_r+0x2e>
 8001224:	2e0a      	cmp	r6, #10
 8001226:	d1df      	bne.n	80011e8 <__swbuf_r+0x2e>
 8001228:	4621      	mov	r1, r4
 800122a:	4628      	mov	r0, r5
 800122c:	f000 f9b0 	bl	8001590 <_fflush_r>
 8001230:	2800      	cmp	r0, #0
 8001232:	d0d9      	beq.n	80011e8 <__swbuf_r+0x2e>
 8001234:	e7d6      	b.n	80011e4 <__swbuf_r+0x2a>
	...

08001238 <__swsetup_r>:
 8001238:	b538      	push	{r3, r4, r5, lr}
 800123a:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <__swsetup_r+0xa8>)
 800123c:	4605      	mov	r5, r0
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	460c      	mov	r4, r1
 8001242:	b118      	cbz	r0, 800124c <__swsetup_r+0x14>
 8001244:	6a03      	ldr	r3, [r0, #32]
 8001246:	b90b      	cbnz	r3, 800124c <__swsetup_r+0x14>
 8001248:	f7ff fee0 	bl	800100c <__sinit>
 800124c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001250:	0719      	lsls	r1, r3, #28
 8001252:	d422      	bmi.n	800129a <__swsetup_r+0x62>
 8001254:	06da      	lsls	r2, r3, #27
 8001256:	d407      	bmi.n	8001268 <__swsetup_r+0x30>
 8001258:	2209      	movs	r2, #9
 800125a:	602a      	str	r2, [r5, #0]
 800125c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001260:	81a3      	strh	r3, [r4, #12]
 8001262:	f04f 30ff 	mov.w	r0, #4294967295
 8001266:	e033      	b.n	80012d0 <__swsetup_r+0x98>
 8001268:	0758      	lsls	r0, r3, #29
 800126a:	d512      	bpl.n	8001292 <__swsetup_r+0x5a>
 800126c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800126e:	b141      	cbz	r1, 8001282 <__swsetup_r+0x4a>
 8001270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001274:	4299      	cmp	r1, r3
 8001276:	d002      	beq.n	800127e <__swsetup_r+0x46>
 8001278:	4628      	mov	r0, r5
 800127a:	f000 f8bf 	bl	80013fc <_free_r>
 800127e:	2300      	movs	r3, #0
 8001280:	6363      	str	r3, [r4, #52]	@ 0x34
 8001282:	89a3      	ldrh	r3, [r4, #12]
 8001284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001288:	81a3      	strh	r3, [r4, #12]
 800128a:	2300      	movs	r3, #0
 800128c:	6063      	str	r3, [r4, #4]
 800128e:	6923      	ldr	r3, [r4, #16]
 8001290:	6023      	str	r3, [r4, #0]
 8001292:	89a3      	ldrh	r3, [r4, #12]
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	81a3      	strh	r3, [r4, #12]
 800129a:	6923      	ldr	r3, [r4, #16]
 800129c:	b94b      	cbnz	r3, 80012b2 <__swsetup_r+0x7a>
 800129e:	89a3      	ldrh	r3, [r4, #12]
 80012a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80012a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012a8:	d003      	beq.n	80012b2 <__swsetup_r+0x7a>
 80012aa:	4621      	mov	r1, r4
 80012ac:	4628      	mov	r0, r5
 80012ae:	f000 f9bd 	bl	800162c <__smakebuf_r>
 80012b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012b6:	f013 0201 	ands.w	r2, r3, #1
 80012ba:	d00a      	beq.n	80012d2 <__swsetup_r+0x9a>
 80012bc:	2200      	movs	r2, #0
 80012be:	60a2      	str	r2, [r4, #8]
 80012c0:	6962      	ldr	r2, [r4, #20]
 80012c2:	4252      	negs	r2, r2
 80012c4:	61a2      	str	r2, [r4, #24]
 80012c6:	6922      	ldr	r2, [r4, #16]
 80012c8:	b942      	cbnz	r2, 80012dc <__swsetup_r+0xa4>
 80012ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80012ce:	d1c5      	bne.n	800125c <__swsetup_r+0x24>
 80012d0:	bd38      	pop	{r3, r4, r5, pc}
 80012d2:	0799      	lsls	r1, r3, #30
 80012d4:	bf58      	it	pl
 80012d6:	6962      	ldrpl	r2, [r4, #20]
 80012d8:	60a2      	str	r2, [r4, #8]
 80012da:	e7f4      	b.n	80012c6 <__swsetup_r+0x8e>
 80012dc:	2000      	movs	r0, #0
 80012de:	e7f7      	b.n	80012d0 <__swsetup_r+0x98>
 80012e0:	2000000c 	.word	0x2000000c

080012e4 <memset>:
 80012e4:	4402      	add	r2, r0
 80012e6:	4603      	mov	r3, r0
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d100      	bne.n	80012ee <memset+0xa>
 80012ec:	4770      	bx	lr
 80012ee:	f803 1b01 	strb.w	r1, [r3], #1
 80012f2:	e7f9      	b.n	80012e8 <memset+0x4>

080012f4 <_close_r>:
 80012f4:	b538      	push	{r3, r4, r5, lr}
 80012f6:	4d06      	ldr	r5, [pc, #24]	@ (8001310 <_close_r+0x1c>)
 80012f8:	2300      	movs	r3, #0
 80012fa:	4604      	mov	r4, r0
 80012fc:	4608      	mov	r0, r1
 80012fe:	602b      	str	r3, [r5, #0]
 8001300:	f7ff f80d 	bl	800031e <_close>
 8001304:	1c43      	adds	r3, r0, #1
 8001306:	d102      	bne.n	800130e <_close_r+0x1a>
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	b103      	cbz	r3, 800130e <_close_r+0x1a>
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	bd38      	pop	{r3, r4, r5, pc}
 8001310:	200001e4 	.word	0x200001e4

08001314 <_lseek_r>:
 8001314:	b538      	push	{r3, r4, r5, lr}
 8001316:	4d07      	ldr	r5, [pc, #28]	@ (8001334 <_lseek_r+0x20>)
 8001318:	4604      	mov	r4, r0
 800131a:	4608      	mov	r0, r1
 800131c:	4611      	mov	r1, r2
 800131e:	2200      	movs	r2, #0
 8001320:	602a      	str	r2, [r5, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	f7ff f81f 	bl	8000366 <_lseek>
 8001328:	1c43      	adds	r3, r0, #1
 800132a:	d102      	bne.n	8001332 <_lseek_r+0x1e>
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	b103      	cbz	r3, 8001332 <_lseek_r+0x1e>
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	bd38      	pop	{r3, r4, r5, pc}
 8001334:	200001e4 	.word	0x200001e4

08001338 <_read_r>:
 8001338:	b538      	push	{r3, r4, r5, lr}
 800133a:	4d07      	ldr	r5, [pc, #28]	@ (8001358 <_read_r+0x20>)
 800133c:	4604      	mov	r4, r0
 800133e:	4608      	mov	r0, r1
 8001340:	4611      	mov	r1, r2
 8001342:	2200      	movs	r2, #0
 8001344:	602a      	str	r2, [r5, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	f7fe ffb0 	bl	80002ac <_read>
 800134c:	1c43      	adds	r3, r0, #1
 800134e:	d102      	bne.n	8001356 <_read_r+0x1e>
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	b103      	cbz	r3, 8001356 <_read_r+0x1e>
 8001354:	6023      	str	r3, [r4, #0]
 8001356:	bd38      	pop	{r3, r4, r5, pc}
 8001358:	200001e4 	.word	0x200001e4

0800135c <_sbrk_r>:
 800135c:	b538      	push	{r3, r4, r5, lr}
 800135e:	4d06      	ldr	r5, [pc, #24]	@ (8001378 <_sbrk_r+0x1c>)
 8001360:	2300      	movs	r3, #0
 8001362:	4604      	mov	r4, r0
 8001364:	4608      	mov	r0, r1
 8001366:	602b      	str	r3, [r5, #0]
 8001368:	f7ff f80a 	bl	8000380 <_sbrk>
 800136c:	1c43      	adds	r3, r0, #1
 800136e:	d102      	bne.n	8001376 <_sbrk_r+0x1a>
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	b103      	cbz	r3, 8001376 <_sbrk_r+0x1a>
 8001374:	6023      	str	r3, [r4, #0]
 8001376:	bd38      	pop	{r3, r4, r5, pc}
 8001378:	200001e4 	.word	0x200001e4

0800137c <_write_r>:
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	4d07      	ldr	r5, [pc, #28]	@ (800139c <_write_r+0x20>)
 8001380:	4604      	mov	r4, r0
 8001382:	4608      	mov	r0, r1
 8001384:	4611      	mov	r1, r2
 8001386:	2200      	movs	r2, #0
 8001388:	602a      	str	r2, [r5, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	f7fe ffab 	bl	80002e6 <_write>
 8001390:	1c43      	adds	r3, r0, #1
 8001392:	d102      	bne.n	800139a <_write_r+0x1e>
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	b103      	cbz	r3, 800139a <_write_r+0x1e>
 8001398:	6023      	str	r3, [r4, #0]
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	200001e4 	.word	0x200001e4

080013a0 <__errno>:
 80013a0:	4b01      	ldr	r3, [pc, #4]	@ (80013a8 <__errno+0x8>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2000000c 	.word	0x2000000c

080013ac <__libc_init_array>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4d0d      	ldr	r5, [pc, #52]	@ (80013e4 <__libc_init_array+0x38>)
 80013b0:	4c0d      	ldr	r4, [pc, #52]	@ (80013e8 <__libc_init_array+0x3c>)
 80013b2:	1b64      	subs	r4, r4, r5
 80013b4:	10a4      	asrs	r4, r4, #2
 80013b6:	2600      	movs	r6, #0
 80013b8:	42a6      	cmp	r6, r4
 80013ba:	d109      	bne.n	80013d0 <__libc_init_array+0x24>
 80013bc:	4d0b      	ldr	r5, [pc, #44]	@ (80013ec <__libc_init_array+0x40>)
 80013be:	4c0c      	ldr	r4, [pc, #48]	@ (80013f0 <__libc_init_array+0x44>)
 80013c0:	f000 f992 	bl	80016e8 <_init>
 80013c4:	1b64      	subs	r4, r4, r5
 80013c6:	10a4      	asrs	r4, r4, #2
 80013c8:	2600      	movs	r6, #0
 80013ca:	42a6      	cmp	r6, r4
 80013cc:	d105      	bne.n	80013da <__libc_init_array+0x2e>
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d4:	4798      	blx	r3
 80013d6:	3601      	adds	r6, #1
 80013d8:	e7ee      	b.n	80013b8 <__libc_init_array+0xc>
 80013da:	f855 3b04 	ldr.w	r3, [r5], #4
 80013de:	4798      	blx	r3
 80013e0:	3601      	adds	r6, #1
 80013e2:	e7f2      	b.n	80013ca <__libc_init_array+0x1e>
 80013e4:	08001780 	.word	0x08001780
 80013e8:	08001780 	.word	0x08001780
 80013ec:	08001780 	.word	0x08001780
 80013f0:	08001784 	.word	0x08001784

080013f4 <__retarget_lock_init_recursive>:
 80013f4:	4770      	bx	lr

080013f6 <__retarget_lock_acquire_recursive>:
 80013f6:	4770      	bx	lr

080013f8 <__retarget_lock_release_recursive>:
 80013f8:	4770      	bx	lr
	...

080013fc <_free_r>:
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	4605      	mov	r5, r0
 8001400:	2900      	cmp	r1, #0
 8001402:	d041      	beq.n	8001488 <_free_r+0x8c>
 8001404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001408:	1f0c      	subs	r4, r1, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	bfb8      	it	lt
 800140e:	18e4      	addlt	r4, r4, r3
 8001410:	f7ff fd64 	bl	8000edc <__malloc_lock>
 8001414:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <_free_r+0x90>)
 8001416:	6813      	ldr	r3, [r2, #0]
 8001418:	b933      	cbnz	r3, 8001428 <_free_r+0x2c>
 800141a:	6063      	str	r3, [r4, #4]
 800141c:	6014      	str	r4, [r2, #0]
 800141e:	4628      	mov	r0, r5
 8001420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001424:	f7ff bd60 	b.w	8000ee8 <__malloc_unlock>
 8001428:	42a3      	cmp	r3, r4
 800142a:	d908      	bls.n	800143e <_free_r+0x42>
 800142c:	6820      	ldr	r0, [r4, #0]
 800142e:	1821      	adds	r1, r4, r0
 8001430:	428b      	cmp	r3, r1
 8001432:	bf01      	itttt	eq
 8001434:	6819      	ldreq	r1, [r3, #0]
 8001436:	685b      	ldreq	r3, [r3, #4]
 8001438:	1809      	addeq	r1, r1, r0
 800143a:	6021      	streq	r1, [r4, #0]
 800143c:	e7ed      	b.n	800141a <_free_r+0x1e>
 800143e:	461a      	mov	r2, r3
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	b10b      	cbz	r3, 8001448 <_free_r+0x4c>
 8001444:	42a3      	cmp	r3, r4
 8001446:	d9fa      	bls.n	800143e <_free_r+0x42>
 8001448:	6811      	ldr	r1, [r2, #0]
 800144a:	1850      	adds	r0, r2, r1
 800144c:	42a0      	cmp	r0, r4
 800144e:	d10b      	bne.n	8001468 <_free_r+0x6c>
 8001450:	6820      	ldr	r0, [r4, #0]
 8001452:	4401      	add	r1, r0
 8001454:	1850      	adds	r0, r2, r1
 8001456:	4283      	cmp	r3, r0
 8001458:	6011      	str	r1, [r2, #0]
 800145a:	d1e0      	bne.n	800141e <_free_r+0x22>
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	6053      	str	r3, [r2, #4]
 8001462:	4408      	add	r0, r1
 8001464:	6010      	str	r0, [r2, #0]
 8001466:	e7da      	b.n	800141e <_free_r+0x22>
 8001468:	d902      	bls.n	8001470 <_free_r+0x74>
 800146a:	230c      	movs	r3, #12
 800146c:	602b      	str	r3, [r5, #0]
 800146e:	e7d6      	b.n	800141e <_free_r+0x22>
 8001470:	6820      	ldr	r0, [r4, #0]
 8001472:	1821      	adds	r1, r4, r0
 8001474:	428b      	cmp	r3, r1
 8001476:	bf04      	itt	eq
 8001478:	6819      	ldreq	r1, [r3, #0]
 800147a:	685b      	ldreq	r3, [r3, #4]
 800147c:	6063      	str	r3, [r4, #4]
 800147e:	bf04      	itt	eq
 8001480:	1809      	addeq	r1, r1, r0
 8001482:	6021      	streq	r1, [r4, #0]
 8001484:	6054      	str	r4, [r2, #4]
 8001486:	e7ca      	b.n	800141e <_free_r+0x22>
 8001488:	bd38      	pop	{r3, r4, r5, pc}
 800148a:	bf00      	nop
 800148c:	200000a4 	.word	0x200000a4

08001490 <__sflush_r>:
 8001490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001496:	0716      	lsls	r6, r2, #28
 8001498:	4605      	mov	r5, r0
 800149a:	460c      	mov	r4, r1
 800149c:	d454      	bmi.n	8001548 <__sflush_r+0xb8>
 800149e:	684b      	ldr	r3, [r1, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	dc02      	bgt.n	80014aa <__sflush_r+0x1a>
 80014a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dd48      	ble.n	800153c <__sflush_r+0xac>
 80014aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80014ac:	2e00      	cmp	r6, #0
 80014ae:	d045      	beq.n	800153c <__sflush_r+0xac>
 80014b0:	2300      	movs	r3, #0
 80014b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80014b6:	682f      	ldr	r7, [r5, #0]
 80014b8:	6a21      	ldr	r1, [r4, #32]
 80014ba:	602b      	str	r3, [r5, #0]
 80014bc:	d030      	beq.n	8001520 <__sflush_r+0x90>
 80014be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	0759      	lsls	r1, r3, #29
 80014c4:	d505      	bpl.n	80014d2 <__sflush_r+0x42>
 80014c6:	6863      	ldr	r3, [r4, #4]
 80014c8:	1ad2      	subs	r2, r2, r3
 80014ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80014cc:	b10b      	cbz	r3, 80014d2 <__sflush_r+0x42>
 80014ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014d0:	1ad2      	subs	r2, r2, r3
 80014d2:	2300      	movs	r3, #0
 80014d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80014d6:	6a21      	ldr	r1, [r4, #32]
 80014d8:	4628      	mov	r0, r5
 80014da:	47b0      	blx	r6
 80014dc:	1c43      	adds	r3, r0, #1
 80014de:	89a3      	ldrh	r3, [r4, #12]
 80014e0:	d106      	bne.n	80014f0 <__sflush_r+0x60>
 80014e2:	6829      	ldr	r1, [r5, #0]
 80014e4:	291d      	cmp	r1, #29
 80014e6:	d82b      	bhi.n	8001540 <__sflush_r+0xb0>
 80014e8:	4a28      	ldr	r2, [pc, #160]	@ (800158c <__sflush_r+0xfc>)
 80014ea:	40ca      	lsrs	r2, r1
 80014ec:	07d6      	lsls	r6, r2, #31
 80014ee:	d527      	bpl.n	8001540 <__sflush_r+0xb0>
 80014f0:	2200      	movs	r2, #0
 80014f2:	6062      	str	r2, [r4, #4]
 80014f4:	04d9      	lsls	r1, r3, #19
 80014f6:	6922      	ldr	r2, [r4, #16]
 80014f8:	6022      	str	r2, [r4, #0]
 80014fa:	d504      	bpl.n	8001506 <__sflush_r+0x76>
 80014fc:	1c42      	adds	r2, r0, #1
 80014fe:	d101      	bne.n	8001504 <__sflush_r+0x74>
 8001500:	682b      	ldr	r3, [r5, #0]
 8001502:	b903      	cbnz	r3, 8001506 <__sflush_r+0x76>
 8001504:	6560      	str	r0, [r4, #84]	@ 0x54
 8001506:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001508:	602f      	str	r7, [r5, #0]
 800150a:	b1b9      	cbz	r1, 800153c <__sflush_r+0xac>
 800150c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001510:	4299      	cmp	r1, r3
 8001512:	d002      	beq.n	800151a <__sflush_r+0x8a>
 8001514:	4628      	mov	r0, r5
 8001516:	f7ff ff71 	bl	80013fc <_free_r>
 800151a:	2300      	movs	r3, #0
 800151c:	6363      	str	r3, [r4, #52]	@ 0x34
 800151e:	e00d      	b.n	800153c <__sflush_r+0xac>
 8001520:	2301      	movs	r3, #1
 8001522:	4628      	mov	r0, r5
 8001524:	47b0      	blx	r6
 8001526:	4602      	mov	r2, r0
 8001528:	1c50      	adds	r0, r2, #1
 800152a:	d1c9      	bne.n	80014c0 <__sflush_r+0x30>
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0c6      	beq.n	80014c0 <__sflush_r+0x30>
 8001532:	2b1d      	cmp	r3, #29
 8001534:	d001      	beq.n	800153a <__sflush_r+0xaa>
 8001536:	2b16      	cmp	r3, #22
 8001538:	d11d      	bne.n	8001576 <__sflush_r+0xe6>
 800153a:	602f      	str	r7, [r5, #0]
 800153c:	2000      	movs	r0, #0
 800153e:	e021      	b.n	8001584 <__sflush_r+0xf4>
 8001540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001544:	b21b      	sxth	r3, r3
 8001546:	e01a      	b.n	800157e <__sflush_r+0xee>
 8001548:	690f      	ldr	r7, [r1, #16]
 800154a:	2f00      	cmp	r7, #0
 800154c:	d0f6      	beq.n	800153c <__sflush_r+0xac>
 800154e:	0793      	lsls	r3, r2, #30
 8001550:	680e      	ldr	r6, [r1, #0]
 8001552:	bf08      	it	eq
 8001554:	694b      	ldreq	r3, [r1, #20]
 8001556:	600f      	str	r7, [r1, #0]
 8001558:	bf18      	it	ne
 800155a:	2300      	movne	r3, #0
 800155c:	1bf6      	subs	r6, r6, r7
 800155e:	608b      	str	r3, [r1, #8]
 8001560:	2e00      	cmp	r6, #0
 8001562:	ddeb      	ble.n	800153c <__sflush_r+0xac>
 8001564:	6a21      	ldr	r1, [r4, #32]
 8001566:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800156a:	4633      	mov	r3, r6
 800156c:	463a      	mov	r2, r7
 800156e:	4628      	mov	r0, r5
 8001570:	47e0      	blx	ip
 8001572:	2800      	cmp	r0, #0
 8001574:	dc07      	bgt.n	8001586 <__sflush_r+0xf6>
 8001576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800157a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800157e:	81a3      	strh	r3, [r4, #12]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001586:	4407      	add	r7, r0
 8001588:	1a36      	subs	r6, r6, r0
 800158a:	e7e9      	b.n	8001560 <__sflush_r+0xd0>
 800158c:	20400001 	.word	0x20400001

08001590 <_fflush_r>:
 8001590:	b538      	push	{r3, r4, r5, lr}
 8001592:	690b      	ldr	r3, [r1, #16]
 8001594:	4605      	mov	r5, r0
 8001596:	460c      	mov	r4, r1
 8001598:	b913      	cbnz	r3, 80015a0 <_fflush_r+0x10>
 800159a:	2500      	movs	r5, #0
 800159c:	4628      	mov	r0, r5
 800159e:	bd38      	pop	{r3, r4, r5, pc}
 80015a0:	b118      	cbz	r0, 80015aa <_fflush_r+0x1a>
 80015a2:	6a03      	ldr	r3, [r0, #32]
 80015a4:	b90b      	cbnz	r3, 80015aa <_fflush_r+0x1a>
 80015a6:	f7ff fd31 	bl	800100c <__sinit>
 80015aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f3      	beq.n	800159a <_fflush_r+0xa>
 80015b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80015b4:	07d0      	lsls	r0, r2, #31
 80015b6:	d404      	bmi.n	80015c2 <_fflush_r+0x32>
 80015b8:	0599      	lsls	r1, r3, #22
 80015ba:	d402      	bmi.n	80015c2 <_fflush_r+0x32>
 80015bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015be:	f7ff ff1a 	bl	80013f6 <__retarget_lock_acquire_recursive>
 80015c2:	4628      	mov	r0, r5
 80015c4:	4621      	mov	r1, r4
 80015c6:	f7ff ff63 	bl	8001490 <__sflush_r>
 80015ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015cc:	07da      	lsls	r2, r3, #31
 80015ce:	4605      	mov	r5, r0
 80015d0:	d4e4      	bmi.n	800159c <_fflush_r+0xc>
 80015d2:	89a3      	ldrh	r3, [r4, #12]
 80015d4:	059b      	lsls	r3, r3, #22
 80015d6:	d4e1      	bmi.n	800159c <_fflush_r+0xc>
 80015d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015da:	f7ff ff0d 	bl	80013f8 <__retarget_lock_release_recursive>
 80015de:	e7dd      	b.n	800159c <_fflush_r+0xc>

080015e0 <__swhatbuf_r>:
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	460c      	mov	r4, r1
 80015e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e8:	2900      	cmp	r1, #0
 80015ea:	b096      	sub	sp, #88	@ 0x58
 80015ec:	4615      	mov	r5, r2
 80015ee:	461e      	mov	r6, r3
 80015f0:	da0d      	bge.n	800160e <__swhatbuf_r+0x2e>
 80015f2:	89a3      	ldrh	r3, [r4, #12]
 80015f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	bf14      	ite	ne
 80015fe:	2340      	movne	r3, #64	@ 0x40
 8001600:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001604:	2000      	movs	r0, #0
 8001606:	6031      	str	r1, [r6, #0]
 8001608:	602b      	str	r3, [r5, #0]
 800160a:	b016      	add	sp, #88	@ 0x58
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	466a      	mov	r2, sp
 8001610:	f000 f848 	bl	80016a4 <_fstat_r>
 8001614:	2800      	cmp	r0, #0
 8001616:	dbec      	blt.n	80015f2 <__swhatbuf_r+0x12>
 8001618:	9901      	ldr	r1, [sp, #4]
 800161a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800161e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001622:	4259      	negs	r1, r3
 8001624:	4159      	adcs	r1, r3
 8001626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800162a:	e7eb      	b.n	8001604 <__swhatbuf_r+0x24>

0800162c <__smakebuf_r>:
 800162c:	898b      	ldrh	r3, [r1, #12]
 800162e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001630:	079d      	lsls	r5, r3, #30
 8001632:	4606      	mov	r6, r0
 8001634:	460c      	mov	r4, r1
 8001636:	d507      	bpl.n	8001648 <__smakebuf_r+0x1c>
 8001638:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800163c:	6023      	str	r3, [r4, #0]
 800163e:	6123      	str	r3, [r4, #16]
 8001640:	2301      	movs	r3, #1
 8001642:	6163      	str	r3, [r4, #20]
 8001644:	b003      	add	sp, #12
 8001646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001648:	ab01      	add	r3, sp, #4
 800164a:	466a      	mov	r2, sp
 800164c:	f7ff ffc8 	bl	80015e0 <__swhatbuf_r>
 8001650:	9f00      	ldr	r7, [sp, #0]
 8001652:	4605      	mov	r5, r0
 8001654:	4639      	mov	r1, r7
 8001656:	4630      	mov	r0, r6
 8001658:	f7ff fbc0 	bl	8000ddc <_malloc_r>
 800165c:	b948      	cbnz	r0, 8001672 <__smakebuf_r+0x46>
 800165e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001662:	059a      	lsls	r2, r3, #22
 8001664:	d4ee      	bmi.n	8001644 <__smakebuf_r+0x18>
 8001666:	f023 0303 	bic.w	r3, r3, #3
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	81a3      	strh	r3, [r4, #12]
 8001670:	e7e2      	b.n	8001638 <__smakebuf_r+0xc>
 8001672:	89a3      	ldrh	r3, [r4, #12]
 8001674:	6020      	str	r0, [r4, #0]
 8001676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167a:	81a3      	strh	r3, [r4, #12]
 800167c:	9b01      	ldr	r3, [sp, #4]
 800167e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001682:	b15b      	cbz	r3, 800169c <__smakebuf_r+0x70>
 8001684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001688:	4630      	mov	r0, r6
 800168a:	f000 f81d 	bl	80016c8 <_isatty_r>
 800168e:	b128      	cbz	r0, 800169c <__smakebuf_r+0x70>
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	f023 0303 	bic.w	r3, r3, #3
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	81a3      	strh	r3, [r4, #12]
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	431d      	orrs	r5, r3
 80016a0:	81a5      	strh	r5, [r4, #12]
 80016a2:	e7cf      	b.n	8001644 <__smakebuf_r+0x18>

080016a4 <_fstat_r>:
 80016a4:	b538      	push	{r3, r4, r5, lr}
 80016a6:	4d07      	ldr	r5, [pc, #28]	@ (80016c4 <_fstat_r+0x20>)
 80016a8:	2300      	movs	r3, #0
 80016aa:	4604      	mov	r4, r0
 80016ac:	4608      	mov	r0, r1
 80016ae:	4611      	mov	r1, r2
 80016b0:	602b      	str	r3, [r5, #0]
 80016b2:	f7fe fe3f 	bl	8000334 <_fstat>
 80016b6:	1c43      	adds	r3, r0, #1
 80016b8:	d102      	bne.n	80016c0 <_fstat_r+0x1c>
 80016ba:	682b      	ldr	r3, [r5, #0]
 80016bc:	b103      	cbz	r3, 80016c0 <_fstat_r+0x1c>
 80016be:	6023      	str	r3, [r4, #0]
 80016c0:	bd38      	pop	{r3, r4, r5, pc}
 80016c2:	bf00      	nop
 80016c4:	200001e4 	.word	0x200001e4

080016c8 <_isatty_r>:
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4d06      	ldr	r5, [pc, #24]	@ (80016e4 <_isatty_r+0x1c>)
 80016cc:	2300      	movs	r3, #0
 80016ce:	4604      	mov	r4, r0
 80016d0:	4608      	mov	r0, r1
 80016d2:	602b      	str	r3, [r5, #0]
 80016d4:	f7fe fe3d 	bl	8000352 <_isatty>
 80016d8:	1c43      	adds	r3, r0, #1
 80016da:	d102      	bne.n	80016e2 <_isatty_r+0x1a>
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	b103      	cbz	r3, 80016e2 <_isatty_r+0x1a>
 80016e0:	6023      	str	r3, [r4, #0]
 80016e2:	bd38      	pop	{r3, r4, r5, pc}
 80016e4:	200001e4 	.word	0x200001e4

080016e8 <_init>:
 80016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ea:	bf00      	nop
 80016ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ee:	bc08      	pop	{r3}
 80016f0:	469e      	mov	lr, r3
 80016f2:	4770      	bx	lr

080016f4 <_fini>:
 80016f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f6:	bf00      	nop
 80016f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016fa:	bc08      	pop	{r3}
 80016fc:	469e      	mov	lr, r3
 80016fe:	4770      	bx	lr

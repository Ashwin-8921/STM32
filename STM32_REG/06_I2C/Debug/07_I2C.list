
07_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000920  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000aac  08000aac  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000aac  08000aac  00002010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000aac  08000aac  00002010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000aac  08000aac  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aac  08000aac  00001aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ab0  08000ab0  00001ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08000ab4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002010  2**0
                  CONTENTS
 10 .bss          00000040  20000010  20000010  00002010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00002010  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001328  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000458  00000000  00000000  00003362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  000037c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d2  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001a07  00000000  00000000  000039ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000183f  00000000  00000000  000053c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000663c  00000000  00000000  00006c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000d23c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003d4  00000000  00000000  0000d280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0000d654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000a94 	.word	0x08000a94

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08000a94 	.word	0x08000a94

080001cc <I2C1_GPIOInits>:

uint8_t some_data[] = "hello from STM";  // Data to send via I2C

// Initialize I2C1 GPIO pins (SCL and SDA)
void I2C1_GPIOInits(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
    GPIO_Handle_t I2CPins;

    I2CPins.pGPIOx = GPIOB;
 80001d2:	4b10      	ldr	r3, [pc, #64]	@ (8000214 <I2C1_GPIOInits+0x48>)
 80001d4:	607b      	str	r3, [r7, #4]
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;   // Alternate function
 80001d6:	2302      	movs	r3, #2
 80001d8:	727b      	strb	r3, [r7, #9]
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD; // Open-drain
 80001da:	2301      	movs	r3, #1
 80001dc:	733b      	strb	r3, [r7, #12]
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU; // Pull-up
 80001de:	2301      	movs	r3, #1
 80001e0:	72fb      	strb	r3, [r7, #11]
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;           // AF4 for I2C
 80001e2:	2304      	movs	r3, #4
 80001e4:	737b      	strb	r3, [r7, #13]
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001e6:	2302      	movs	r3, #2
 80001e8:	72bb      	strb	r3, [r7, #10]
    GPIO_PeriClockControl(GPIOB, ENABLE);
 80001ea:	2101      	movs	r1, #1
 80001ec:	4809      	ldr	r0, [pc, #36]	@ (8000214 <I2C1_GPIOInits+0x48>)
 80001ee:	f000 f889 	bl	8000304 <GPIO_PeriClockControl>

    // SCL pin PB6
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80001f2:	2306      	movs	r3, #6
 80001f4:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f951 	bl	80004a0 <GPIO_Init>

    // SDA pin PB7
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80001fe:	2307      	movs	r3, #7
 8000200:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4618      	mov	r0, r3
 8000206:	f000 f94b 	bl	80004a0 <GPIO_Init>
}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	48000400 	.word	0x48000400

08000218 <I2C1_Inits>:

// Initialize I2C1 peripheral
void I2C1_Inits(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
    I2C1Handle.pI2Cx = I2C1;
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <I2C1_Inits+0x20>)
 800021e:	4a07      	ldr	r2, [pc, #28]	@ (800023c <I2C1_Inits+0x24>)
 8000220:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;  // Enable ACK
 8000222:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <I2C1_Inits+0x20>)
 8000224:	2201      	movs	r2, #1
 8000226:	715a      	strb	r2, [r3, #5]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;       // STM32 own address
 8000228:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <I2C1_Inits+0x20>)
 800022a:	2261      	movs	r2, #97	@ 0x61
 800022c:	711a      	strb	r2, [r3, #4]

    I2C_Init(&I2C1Handle);
 800022e:	4802      	ldr	r0, [pc, #8]	@ (8000238 <I2C1_Inits+0x20>)
 8000230:	f000 fb70 	bl	8000914 <I2C_Init>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	2000002c 	.word	0x2000002c
 800023c:	40005400 	.word	0x40005400

08000240 <delay>:

// Simple delay function
void delay(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
    for(uint32_t i = 0; i < 250000; i++);
 8000246:	2300      	movs	r3, #0
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	e002      	b.n	8000252 <delay+0x12>
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	3301      	adds	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a04      	ldr	r2, [pc, #16]	@ (8000268 <delay+0x28>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d9f8      	bls.n	800024c <delay+0xc>
}
 800025a:	bf00      	nop
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	0003d08f 	.word	0x0003d08f

0800026c <main>:

int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af02      	add	r7, sp, #8
    // Initialize I2C1 GPIO and peripheral
    I2C_PeriClockControl(I2C1, ENABLE);
 8000272:	2101      	movs	r1, #1
 8000274:	480b      	ldr	r0, [pc, #44]	@ (80002a4 <main+0x38>)
 8000276:	f000 faf5 	bl	8000864 <I2C_PeriClockControl>
    I2C1_GPIOInits();
 800027a:	f7ff ffa7 	bl	80001cc <I2C1_GPIOInits>
    I2C1_Inits();
 800027e:	f7ff ffcb 	bl	8000218 <I2C1_Inits>
    I2C_PeripheralControl(I2C1, ENABLE);
 8000282:	2101      	movs	r1, #1
 8000284:	4807      	ldr	r0, [pc, #28]	@ (80002a4 <main+0x38>)
 8000286:	f000 fad2 	bl	800082e <I2C_PeripheralControl>

    while(1)
    {
        // Send data "I2C" to slave device via I2C
        I2C_MasterSendData(&I2C1Handle, some_data, sizeof(some_data)-1, SLAVE_ADDR, 0);
 800028a:	2300      	movs	r3, #0
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2368      	movs	r3, #104	@ 0x68
 8000290:	220e      	movs	r2, #14
 8000292:	4905      	ldr	r1, [pc, #20]	@ (80002a8 <main+0x3c>)
 8000294:	4805      	ldr	r0, [pc, #20]	@ (80002ac <main+0x40>)
 8000296:	f000 fb6d 	bl	8000974 <I2C_MasterSendData>

        // Delay between transmissions
        delay();
 800029a:	f7ff ffd1 	bl	8000240 <delay>
        I2C_MasterSendData(&I2C1Handle, some_data, sizeof(some_data)-1, SLAVE_ADDR, 0);
 800029e:	bf00      	nop
 80002a0:	e7f3      	b.n	800028a <main+0x1e>
 80002a2:	bf00      	nop
 80002a4:	40005400 	.word	0x40005400
 80002a8:	20000000 	.word	0x20000000
 80002ac:	2000002c 	.word	0x2000002c

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	@ (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	@ (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 fbb5 	bl	8000a4c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002e2:	f7ff ffc3 	bl	800026c <main>

080002e6 <LoopForever>:

LoopForever:
  b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80002f4:	08000ab4 	.word	0x08000ab4
  ldr r2, =_sbss
 80002f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80002fc:	20000050 	.word	0x20000050

08000300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC1_2_IRQHandler>
	...

08000304 <GPIO_PeriClockControl>:

/* Peripheral clock setup */

// This function enables or disables peripheral clock for the given GPIO port
void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx , uint8_t EnorDi)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]


	if(EnorDi == ENABLE)
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d157      	bne.n	80003c6 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800031e:	4b58      	ldr	r3, [pc, #352]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000322:	4a57      	ldr	r2, [pc, #348]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	64d3      	str	r3, [r2, #76]	@ 0x4c
				{
					GPIOH_PCLK_DI();
				}
	}

}
 800032a:	e0a3      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a55      	ldr	r2, [pc, #340]	@ (8000484 <GPIO_PeriClockControl+0x180>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000334:	4b52      	ldr	r3, [pc, #328]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000338:	4a51      	ldr	r2, [pc, #324]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000340:	e098      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a50      	ldr	r2, [pc, #320]	@ (8000488 <GPIO_PeriClockControl+0x184>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800034a:	4b4d      	ldr	r3, [pc, #308]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800034e:	4a4c      	ldr	r2, [pc, #304]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000356:	e08d      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a4c      	ldr	r2, [pc, #304]	@ (800048c <GPIO_PeriClockControl+0x188>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000360:	4b47      	ldr	r3, [pc, #284]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000364:	4a46      	ldr	r2, [pc, #280]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800036c:	e082      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a47      	ldr	r2, [pc, #284]	@ (8000490 <GPIO_PeriClockControl+0x18c>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000376:	4b42      	ldr	r3, [pc, #264]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037a:	4a41      	ldr	r2, [pc, #260]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000382:	e077      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a43      	ldr	r2, [pc, #268]	@ (8000494 <GPIO_PeriClockControl+0x190>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800038c:	4b3c      	ldr	r3, [pc, #240]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800038e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000390:	4a3b      	ldr	r2, [pc, #236]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000398:	e06c      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a3e      	ldr	r2, [pc, #248]	@ (8000498 <GPIO_PeriClockControl+0x194>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003a2:	4b37      	ldr	r3, [pc, #220]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	4a36      	ldr	r2, [pc, #216]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ae:	e061      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a3a      	ldr	r2, [pc, #232]	@ (800049c <GPIO_PeriClockControl+0x198>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d15d      	bne.n	8000474 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80003b8:	4b31      	ldr	r3, [pc, #196]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003bc:	4a30      	ldr	r2, [pc, #192]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003c4:	e056      	b.n	8000474 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 80003ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003d4:	f023 0301 	bic.w	r3, r3, #1
 80003d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003da:	e04b      	b.n	8000474 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOB)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a29      	ldr	r2, [pc, #164]	@ (8000484 <GPIO_PeriClockControl+0x180>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80003e4:	4b26      	ldr	r3, [pc, #152]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e8:	4a25      	ldr	r2, [pc, #148]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003ea:	f023 0302 	bic.w	r3, r3, #2
 80003ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003f0:	e040      	b.n	8000474 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOC)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a24      	ldr	r2, [pc, #144]	@ (8000488 <GPIO_PeriClockControl+0x184>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80003fa:	4b21      	ldr	r3, [pc, #132]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fe:	4a20      	ldr	r2, [pc, #128]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000400:	f023 0304 	bic.w	r3, r3, #4
 8000404:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000406:	e035      	b.n	8000474 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOD)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a20      	ldr	r2, [pc, #128]	@ (800048c <GPIO_PeriClockControl+0x188>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000414:	4a1a      	ldr	r2, [pc, #104]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000416:	f023 0308 	bic.w	r3, r3, #8
 800041a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800041c:	e02a      	b.n	8000474 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOE)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a1b      	ldr	r2, [pc, #108]	@ (8000490 <GPIO_PeriClockControl+0x18c>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 8000426:	4b16      	ldr	r3, [pc, #88]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	4a15      	ldr	r2, [pc, #84]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800042c:	f023 0310 	bic.w	r3, r3, #16
 8000430:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000432:	e01f      	b.n	8000474 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOF)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a17      	ldr	r2, [pc, #92]	@ (8000494 <GPIO_PeriClockControl+0x190>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 800043c:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800043e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000440:	4a0f      	ldr	r2, [pc, #60]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000442:	f023 0320 	bic.w	r3, r3, #32
 8000446:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000448:	e014      	b.n	8000474 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOG)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a12      	ldr	r2, [pc, #72]	@ (8000498 <GPIO_PeriClockControl+0x194>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 8000452:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 8000458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800045c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800045e:	e009      	b.n	8000474 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOH)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a0e      	ldr	r2, [pc, #56]	@ (800049c <GPIO_PeriClockControl+0x198>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d105      	bne.n	8000474 <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8000468:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800046a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <GPIO_PeriClockControl+0x17c>)
 800046e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000472:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	48000400 	.word	0x48000400
 8000488:	48000800 	.word	0x48000800
 800048c:	48000c00 	.word	0x48000c00
 8000490:	48001000 	.word	0x48001000
 8000494:	48001400 	.word	0x48001400
 8000498:	48001800 	.word	0x48001800
 800049c:	48001c00 	.word	0x48001c00

080004a0 <GPIO_Init>:

/* Initialization and de-initialization */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b087      	sub	sp, #28
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	795b      	ldrb	r3, [r3, #5]
 80004b0:	2b03      	cmp	r3, #3
 80004b2:	d822      	bhi.n	80004fa <GPIO_Init+0x5a>
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	795b      	ldrb	r3, [r3, #5]
 80004b8:	461a      	mov	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	2103      	movs	r1, #3
 80004d4:	fa01 f303 	lsl.w	r3, r1, r3
 80004d8:	43db      	mvns	r3, r3
 80004da:	4619      	mov	r1, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	400a      	ands	r2, r1
 80004e2:	601a      	str	r2, [r3, #0]
			pGPIOHandle ->pGPIOx->MODER |= temp;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	6819      	ldr	r1, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	697a      	ldr	r2, [r7, #20]
 80004f0:	430a      	orrs	r2, r1
 80004f2:	601a      	str	r2, [r3, #0]
			temp=0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	e0e1      	b.n	80006be <GPIO_Init+0x21e>
		}
		else
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	795b      	ldrb	r3, [r3, #5]
 80004fe:	461a      	mov	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	791b      	ldrb	r3, [r3, #4]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
					pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	2103      	movs	r1, #3
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	4619      	mov	r1, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	400a      	ands	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
					pGPIOHandle ->pGPIOx->MODER |= temp;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6819      	ldr	r1, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	430a      	orrs	r2, r1
 8000538:	601a      	str	r2, [r3, #0]
					temp=0;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
			if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	795b      	ldrb	r3, [r3, #5]
 8000542:	2b04      	cmp	r3, #4
 8000544:	d117      	bne.n	8000576 <GPIO_Init+0xd6>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000546:	4b47      	ldr	r3, [pc, #284]	@ (8000664 <GPIO_Init+0x1c4>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	7912      	ldrb	r2, [r2, #4]
 800054e:	4611      	mov	r1, r2
 8000550:	2201      	movs	r2, #1
 8000552:	408a      	lsls	r2, r1
 8000554:	4611      	mov	r1, r2
 8000556:	4a43      	ldr	r2, [pc, #268]	@ (8000664 <GPIO_Init+0x1c4>)
 8000558:	430b      	orrs	r3, r1
 800055a:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055c:	4b41      	ldr	r3, [pc, #260]	@ (8000664 <GPIO_Init+0x1c4>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7912      	ldrb	r2, [r2, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	2201      	movs	r2, #1
 8000568:	408a      	lsls	r2, r1
 800056a:	43d2      	mvns	r2, r2
 800056c:	4611      	mov	r1, r2
 800056e:	4a3d      	ldr	r2, [pc, #244]	@ (8000664 <GPIO_Init+0x1c4>)
 8000570:	400b      	ands	r3, r1
 8000572:	6093      	str	r3, [r2, #8]
 8000574:	e035      	b.n	80005e2 <GPIO_Init+0x142>
					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	2b05      	cmp	r3, #5
 800057c:	d117      	bne.n	80005ae <GPIO_Init+0x10e>
					{
						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800057e:	4b39      	ldr	r3, [pc, #228]	@ (8000664 <GPIO_Init+0x1c4>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	7912      	ldrb	r2, [r2, #4]
 8000586:	4611      	mov	r1, r2
 8000588:	2201      	movs	r2, #1
 800058a:	408a      	lsls	r2, r1
 800058c:	4611      	mov	r1, r2
 800058e:	4a35      	ldr	r2, [pc, #212]	@ (8000664 <GPIO_Init+0x1c4>)
 8000590:	430b      	orrs	r3, r1
 8000592:	6093      	str	r3, [r2, #8]

						EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000594:	4b33      	ldr	r3, [pc, #204]	@ (8000664 <GPIO_Init+0x1c4>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7912      	ldrb	r2, [r2, #4]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a2f      	ldr	r2, [pc, #188]	@ (8000664 <GPIO_Init+0x1c4>)
 80005a8:	400b      	ands	r3, r1
 80005aa:	60d3      	str	r3, [r2, #12]
 80005ac:	e019      	b.n	80005e2 <GPIO_Init+0x142>

					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	2b06      	cmp	r3, #6
 80005b4:	d115      	bne.n	80005e2 <GPIO_Init+0x142>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000664 <GPIO_Init+0x1c4>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7912      	ldrb	r2, [r2, #4]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a27      	ldr	r2, [pc, #156]	@ (8000664 <GPIO_Init+0x1c4>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005cc:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <GPIO_Init+0x1c4>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <GPIO_Init+0x1c4>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	6093      	str	r3, [r2, #8]
					}
				 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	089b      	lsrs	r3, r3, #2
 80005e8:	74fb      	strb	r3, [r7, #19]
				 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	f003 0303 	and.w	r3, r3, #3
 80005f2:	74bb      	strb	r3, [r7, #18]
				 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80005fc:	d042      	beq.n	8000684 <GPIO_Init+0x1e4>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a19      	ldr	r2, [pc, #100]	@ (8000668 <GPIO_Init+0x1c8>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d02b      	beq.n	8000660 <GPIO_Init+0x1c0>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a17      	ldr	r2, [pc, #92]	@ (800066c <GPIO_Init+0x1cc>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d024      	beq.n	800065c <GPIO_Init+0x1bc>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a16      	ldr	r2, [pc, #88]	@ (8000670 <GPIO_Init+0x1d0>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d01d      	beq.n	8000658 <GPIO_Init+0x1b8>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a14      	ldr	r2, [pc, #80]	@ (8000674 <GPIO_Init+0x1d4>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d016      	beq.n	8000654 <GPIO_Init+0x1b4>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a13      	ldr	r2, [pc, #76]	@ (8000678 <GPIO_Init+0x1d8>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d00f      	beq.n	8000650 <GPIO_Init+0x1b0>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a11      	ldr	r2, [pc, #68]	@ (800067c <GPIO_Init+0x1dc>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d008      	beq.n	800064c <GPIO_Init+0x1ac>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a10      	ldr	r2, [pc, #64]	@ (8000680 <GPIO_Init+0x1e0>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d101      	bne.n	8000648 <GPIO_Init+0x1a8>
 8000644:	2307      	movs	r3, #7
 8000646:	e01e      	b.n	8000686 <GPIO_Init+0x1e6>
 8000648:	2300      	movs	r3, #0
 800064a:	e01c      	b.n	8000686 <GPIO_Init+0x1e6>
 800064c:	2306      	movs	r3, #6
 800064e:	e01a      	b.n	8000686 <GPIO_Init+0x1e6>
 8000650:	2305      	movs	r3, #5
 8000652:	e018      	b.n	8000686 <GPIO_Init+0x1e6>
 8000654:	2304      	movs	r3, #4
 8000656:	e016      	b.n	8000686 <GPIO_Init+0x1e6>
 8000658:	2303      	movs	r3, #3
 800065a:	e014      	b.n	8000686 <GPIO_Init+0x1e6>
 800065c:	2302      	movs	r3, #2
 800065e:	e012      	b.n	8000686 <GPIO_Init+0x1e6>
 8000660:	2301      	movs	r3, #1
 8000662:	e010      	b.n	8000686 <GPIO_Init+0x1e6>
 8000664:	40010400 	.word	0x40010400
 8000668:	48000400 	.word	0x48000400
 800066c:	48000800 	.word	0x48000800
 8000670:	48000c00 	.word	0x48000c00
 8000674:	48001000 	.word	0x48001000
 8000678:	48001400 	.word	0x48001400
 800067c:	48001800 	.word	0x48001800
 8000680:	48001c00 	.word	0x48001c00
 8000684:	2300      	movs	r3, #0
 8000686:	747b      	strb	r3, [r7, #17]
				 SYSCFG_PCLK_EN();
 8000688:	4b5e      	ldr	r3, [pc, #376]	@ (8000804 <GPIO_Init+0x364>)
 800068a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800068c:	4a5d      	ldr	r2, [pc, #372]	@ (8000804 <GPIO_Init+0x364>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6613      	str	r3, [r2, #96]	@ 0x60
				 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 8000694:	7c7a      	ldrb	r2, [r7, #17]
 8000696:	7cbb      	ldrb	r3, [r7, #18]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	fa02 f103 	lsl.w	r1, r2, r3
 800069e:	4a5a      	ldr	r2, [pc, #360]	@ (8000808 <GPIO_Init+0x368>)
 80006a0:	7cfb      	ldrb	r3, [r7, #19]
 80006a2:	3302      	adds	r3, #2
 80006a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006a8:	4b58      	ldr	r3, [pc, #352]	@ (800080c <GPIO_Init+0x36c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7912      	ldrb	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	2201      	movs	r2, #1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a54      	ldr	r2, [pc, #336]	@ (800080c <GPIO_Init+0x36c>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6013      	str	r3, [r2, #0]
		}

		temp=0;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	799b      	ldrb	r3, [r3, #6]
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	2103      	movs	r1, #3
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	43db      	mvns	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	400a      	ands	r2, r1
 80006f0:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6899      	ldr	r1, [r3, #8]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	430a      	orrs	r2, r1
 8000700:	609a      	str	r2, [r3, #8]
		temp=0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	79db      	ldrb	r3, [r3, #7]
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	68da      	ldr	r2, [r3, #12]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	2103      	movs	r1, #3
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43db      	mvns	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	400a      	ands	r2, r1
 8000734:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	68d9      	ldr	r1, [r3, #12]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	430a      	orrs	r2, r1
 8000744:	60da      	str	r2, [r3, #12]
		temp=0;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7a1b      	ldrb	r3, [r3, #8]
 800074e:	461a      	mov	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	685a      	ldr	r2, [r3, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	4619      	mov	r1, r3
 8000766:	2301      	movs	r3, #1
 8000768:	408b      	lsls	r3, r1
 800076a:	43db      	mvns	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	400a      	ands	r2, r1
 8000774:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6859      	ldr	r1, [r3, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	430a      	orrs	r2, r1
 8000784:	605a      	str	r2, [r3, #4]
		temp=0;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	795b      	ldrb	r3, [r3, #5]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d132      	bne.n	80007f8 <GPIO_Init+0x358>
		{
			uint32_t temp1 ,temp2;
			temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	08db      	lsrs	r3, r3, #3
 8000798:	b2db      	uxtb	r3, r3
 800079a:	60fb      	str	r3, [r7, #12]
			temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	f003 0307 	and.w	r3, r3, #7
 80007a4:	60bb      	str	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	3208      	adds	r2, #8
 80007ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	210f      	movs	r1, #15
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	43db      	mvns	r3, r3
 80007be:	4619      	mov	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4011      	ands	r1, r2
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	3208      	adds	r2, #8
 80007ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	3208      	adds	r2, #8
 80007d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7a5b      	ldrb	r3, [r3, #9]
 80007de:	4619      	mov	r1, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	fa01 f303 	lsl.w	r3, r1, r3
 80007e8:	4619      	mov	r1, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4311      	orrs	r1, r2
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	3208      	adds	r2, #8
 80007f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}




}
 80007f8:	bf00      	nop
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	40010000 	.word	0x40010000
 800080c:	40010400 	.word	0x40010400

08000810 <I2C_GenerateStartCondition>:
#include"stm32l4xx_i2c_driver.h"


// Function to generate a START condition on I2C bus
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    // Set the START bit (bit 13) in CR2 register
    pI2Cx->CR2 |= (1 << 13);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	605a      	str	r2, [r3, #4]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <I2C_PeripheralControl>:



// Enable or disable the given I2C peripheral
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	460b      	mov	r3, r1
 8000838:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d106      	bne.n	800084e <I2C_PeripheralControl+0x20>
    {
        // Set bit 0 (PE - Peripheral Enable) in CR1 → I2C ON
        pI2Cx->CR1 |= (1 << 0);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f043 0201 	orr.w	r2, r3, #1
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	601a      	str	r2, [r3, #0]
    else
    {
        // Clear bit 0 (PE) in CR1 → I2C OFF
        pI2Cx->CR1 &= ~(1 << 0);
    }
}
 800084c:	e005      	b.n	800085a <I2C_PeripheralControl+0x2c>
        pI2Cx->CR1 &= ~(1 << 0);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f023 0201 	bic.w	r2, r3, #1
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <I2C_PeriClockControl>:



// Enable or disable peripheral clock for the given I2C instance
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d120      	bne.n	80008b8 <I2C_PeriClockControl+0x54>
    {
        // Turn ON clock for the selected I2C peripheral
        if(pI2Cx == I2C1)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a22      	ldr	r2, [pc, #136]	@ (8000904 <I2C_PeriClockControl+0xa0>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d106      	bne.n	800088c <I2C_PeriClockControl+0x28>
        {
            I2C1_PCLK_EN();   // Enable clock for I2C1
 800087e:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000882:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 8000884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000888:	6593      	str	r3, [r2, #88]	@ 0x58
        else if (pI2Cx == I2C3)
        {
            I2C3_PCLK_DI();   // Disable clock for I2C3
        }
    }
}
 800088a:	e035      	b.n	80008f8 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a1f      	ldr	r2, [pc, #124]	@ (800090c <I2C_PeriClockControl+0xa8>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d106      	bne.n	80008a2 <I2C_PeriClockControl+0x3e>
            I2C2_PCLK_EN();   // Enable clock for I2C2
 8000894:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 8000896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000898:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 800089a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800089e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008a0:	e02a      	b.n	80008f8 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C3)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000910 <I2C_PeriClockControl+0xac>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d126      	bne.n	80008f8 <I2C_PeriClockControl+0x94>
            I2C3_PCLK_EN();   // Enable clock for I2C3
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 80008b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008b4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008b6:	e01f      	b.n	80008f8 <I2C_PeriClockControl+0x94>
        if(pI2Cx == I2C1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <I2C_PeriClockControl+0xa0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d106      	bne.n	80008ce <I2C_PeriClockControl+0x6a>
            I2C1_PCLK_DI();   // Disable clock for I2C1
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 80008c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c4:	4a10      	ldr	r2, [pc, #64]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 80008c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80008ca:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008cc:	e014      	b.n	80008f8 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C2)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a0e      	ldr	r2, [pc, #56]	@ (800090c <I2C_PeriClockControl+0xa8>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d106      	bne.n	80008e4 <I2C_PeriClockControl+0x80>
            I2C2_PCLK_DI();   // Disable clock for I2C2
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	4a0b      	ldr	r2, [pc, #44]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 80008dc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80008e0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008e2:	e009      	b.n	80008f8 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C3)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <I2C_PeriClockControl+0xac>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d105      	bne.n	80008f8 <I2C_PeriClockControl+0x94>
            I2C3_PCLK_DI();   // Disable clock for I2C3
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 80008ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f0:	4a05      	ldr	r2, [pc, #20]	@ (8000908 <I2C_PeriClockControl+0xa4>)
 80008f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80008f6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40005400 	.word	0x40005400
 8000908:	40021000 	.word	0x40021000
 800090c:	40005800 	.word	0x40005800
 8000910:	40005c00 	.word	0x40005c00

08000914 <I2C_Init>:


// Initialize I2C peripheral
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]

    // 1. Set ACK control (bit 15 of CR2)
    tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 15;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	795b      	ldrb	r3, [r3, #5]
 8000924:	03db      	lsls	r3, r3, #15
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	4313      	orrs	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->CR2 |= tempreg;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6859      	ldr	r1, [r3, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	430a      	orrs	r2, r1
 800093a:	605a      	str	r2, [r3, #4]

    // 2. Set timing for ~100kHz I2C speed
    pI2CHandle->pI2Cx->TIMINGR |= 0x00411313;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6919      	ldr	r1, [r3, #16]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <I2C_Init+0x5c>)
 8000948:	430b      	orrs	r3, r1
 800094a:	6113      	str	r3, [r2, #16]

    // 3. Set device own address (shifted left by 1 for 7-bit addr)
    tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	791b      	ldrb	r3, [r3, #4]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6899      	ldr	r1, [r3, #8]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	430a      	orrs	r2, r1
 8000962:	609a      	str	r2, [r3, #8]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	00411313 	.word	0x00411313

08000974 <I2C_MasterSendData>:
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,
                        uint8_t *pTxBuffer,
                        uint32_t Len,
                        uint8_t SlaveAddr,
                        uint8_t Sr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	70fb      	strb	r3, [r7, #3]
    // 1. Wait until I2C is not busy (BUSY flag in ISR, bit 15)
    while (((pI2CHandle->pI2Cx->ISR >> 15) & 1));
 8000982:	bf00      	nop
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	0bdb      	lsrs	r3, r3, #15
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1f7      	bne.n	8000984 <I2C_MasterSendData+0x10>

    // 2. Prepare CR2 register: set slave address + number of bytes
    uint32_t cr2 = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
    pI2CHandle->pI2Cx->CR2 |= (SlaveAddr << 1) | (Len << 16);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6859      	ldr	r1, [r3, #4]
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	005a      	lsls	r2, r3, #1
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	041b      	lsls	r3, r3, #16
 80009a6:	431a      	orrs	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	430a      	orrs	r2, r1
 80009ae:	605a      	str	r2, [r3, #4]

    // 3. If no repeated start (Sr = disable), set AUTOEND (bit 25)
    if (Sr == I2C_DISABLE_SR)
 80009b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d103      	bne.n	80009c0 <I2C_MasterSendData+0x4c>
    {
        cr2 |= (1 << 25);
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009be:	617b      	str	r3, [r7, #20]
    }
    pI2CHandle->pI2Cx->CR2 |= cr2;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6859      	ldr	r1, [r3, #4]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	605a      	str	r2, [r3, #4]

    // 4. Generate START condition
    I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff1b 	bl	8000810 <I2C_GenerateStartCondition>

    // 5. Send all bytes
    while (Len > 0)
 80009da:	e012      	b.n	8000a02 <I2C_MasterSendData+0x8e>
    {
        // Wait until TX buffer is empty (TXE, bit 0 in ISR)
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 0)));
 80009dc:	bf00      	nop
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f8      	beq.n	80009de <I2C_MasterSendData+0x6a>

        // Write data to TXDR
        pI2CHandle->pI2Cx->TXDR = *pTxBuffer;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28

        // Move to next byte
        pTxBuffer++;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	3301      	adds	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
        Len--;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
    while (Len > 0)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e9      	bne.n	80009dc <I2C_MasterSendData+0x68>
    }

    // 6. Handle STOP condition or repeated start
    if (Sr == I2C_DISABLE_SR)
 8000a08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d110      	bne.n	8000a32 <I2C_MasterSendData+0xbe>
    {
        // Wait until STOP flag (bit 5 in ISR) is set
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 5)));
 8000a10:	bf00      	nop
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0320 	and.w	r3, r3, #32
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0f8      	beq.n	8000a12 <I2C_MasterSendData+0x9e>

        // Clear STOP flag by writing to ICR
        pI2CHandle->pI2Cx->ICR |= (1 << 5);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	69da      	ldr	r2, [r3, #28]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f042 0220 	orr.w	r2, r2, #32
 8000a2e:	61da      	str	r2, [r3, #28]
    else
    {
        // If repeated start, wait for TC (transfer complete, bit 6)
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
    }
}
 8000a30:	e007      	b.n	8000a42 <I2C_MasterSendData+0xce>
        while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
 8000a32:	bf00      	nop
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0f8      	beq.n	8000a34 <I2C_MasterSendData+0xc0>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <__libc_init_array>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a84 <__libc_init_array+0x38>)
 8000a50:	4c0d      	ldr	r4, [pc, #52]	@ (8000a88 <__libc_init_array+0x3c>)
 8000a52:	1b64      	subs	r4, r4, r5
 8000a54:	10a4      	asrs	r4, r4, #2
 8000a56:	2600      	movs	r6, #0
 8000a58:	42a6      	cmp	r6, r4
 8000a5a:	d109      	bne.n	8000a70 <__libc_init_array+0x24>
 8000a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a8c <__libc_init_array+0x40>)
 8000a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a90 <__libc_init_array+0x44>)
 8000a60:	f000 f818 	bl	8000a94 <_init>
 8000a64:	1b64      	subs	r4, r4, r5
 8000a66:	10a4      	asrs	r4, r4, #2
 8000a68:	2600      	movs	r6, #0
 8000a6a:	42a6      	cmp	r6, r4
 8000a6c:	d105      	bne.n	8000a7a <__libc_init_array+0x2e>
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a74:	4798      	blx	r3
 8000a76:	3601      	adds	r6, #1
 8000a78:	e7ee      	b.n	8000a58 <__libc_init_array+0xc>
 8000a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7e:	4798      	blx	r3
 8000a80:	3601      	adds	r6, #1
 8000a82:	e7f2      	b.n	8000a6a <__libc_init_array+0x1e>
 8000a84:	08000aac 	.word	0x08000aac
 8000a88:	08000aac 	.word	0x08000aac
 8000a8c:	08000aac 	.word	0x08000aac
 8000a90:	08000ab0 	.word	0x08000ab0

08000a94 <_init>:
 8000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a96:	bf00      	nop
 8000a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a9a:	bc08      	pop	{r3}
 8000a9c:	469e      	mov	lr, r3
 8000a9e:	4770      	bx	lr

08000aa0 <_fini>:
 8000aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa2:	bf00      	nop
 8000aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa6:	bc08      	pop	{r3}
 8000aa8:	469e      	mov	lr, r3
 8000aaa:	4770      	bx	lr

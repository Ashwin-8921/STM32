
stm_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001774  08001774  00002774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017d4  080017d4  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080017d4  080017d4  000027d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017dc  080017dc  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017dc  080017dc  000027dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017e0  080017e0  000027e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  080017e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003050  2**0
                  CONTENTS
 10 .bss          0000018c  20000050  20000050  00003050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  00003050  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001782  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005b8  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00004db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000da  00000000  00000000  00004ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b44  00000000  00000000  00004fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ece  00000000  00000000  00007b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000aad6  00000000  00000000  000099dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000144b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000920  00000000  00000000  000144f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00014e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800175c 	.word	0x0800175c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	0800175c 	.word	0x0800175c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:
// USART2 handle
USART_Handle_t usart2_handle;

// Simple delay function
void delay(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
    for(uint32_t i = 0 ; i < 250000 ; i++);
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e002      	b.n	8000292 <delay+0x12>
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <delay+0x28>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d9f8      	bls.n	800028c <delay+0xc>
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	0003d08f 	.word	0x0003d08f

080002ac <USART2_Init>:

// Initialize USART2 peripheral
void USART2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;
 80002b0:	4b0d      	ldr	r3, [pc, #52]	@ (80002e8 <USART2_Init+0x3c>)
 80002b2:	4a0e      	ldr	r2, [pc, #56]	@ (80002ec <USART2_Init+0x40>)
 80002b4:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;   // baud rate 115200
 80002b6:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <USART2_Init+0x3c>)
 80002b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002bc:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE; // no HW flow
 80002be:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <USART2_Init+0x3c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;          // TX & RX mode
 80002c4:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <USART2_Init+0x3c>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1; // 1 stop bit
 80002ca:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <USART2_Init+0x3c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS; // 8-bit word
 80002d0:	4b05      	ldr	r3, [pc, #20]	@ (80002e8 <USART2_Init+0x3c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE; // no parity
 80002d6:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <USART2_Init+0x3c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);  // initialize USART2
 80002dc:	4802      	ldr	r0, [pc, #8]	@ (80002e8 <USART2_Init+0x3c>)
 80002de:	f000 fc62 	bl	8000ba6 <USART_Init>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	2000006c 	.word	0x2000006c
 80002ec:	40004400 	.word	0x40004400

080002f0 <USART2_GPIOInit>:

// Initialize GPIO pins for USART2
void USART2_GPIOInit(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart2_gpio;
    memset(&usart2_gpio,0,sizeof(usart2_gpio));
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	220c      	movs	r2, #12
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fdaf 	bl	8000e60 <memset>

    usart2_gpio.pGPIOx = GPIOA;
 8000302:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000306:	607b      	str	r3, [r7, #4]
    usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;      // alternate function
 8000308:	2302      	movs	r3, #2
 800030a:	727b      	strb	r3, [r7, #9]
    usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;     // push-pull
 800030c:	2300      	movs	r3, #0
 800030e:	733b      	strb	r3, [r7, #12]
    usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;   // pull-up
 8000310:	2301      	movs	r3, #1
 8000312:	72fb      	strb	r3, [r7, #11]
    usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;     // fast speed
 8000314:	2302      	movs	r3, #2
 8000316:	72bb      	strb	r3, [r7, #10]
    usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;              // AF7 for USART2
 8000318:	2307      	movs	r3, #7
 800031a:	737b      	strb	r3, [r7, #13]

    // TX pin (PA2)
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800031c:	2302      	movs	r3, #2
 800031e:	723b      	strb	r3, [r7, #8]
    GPIOA_PCLK_EN(); // enable clock for GPIOA
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <USART2_GPIOInit+0x58>)
 8000322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000324:	4a08      	ldr	r2, [pc, #32]	@ (8000348 <USART2_GPIOInit+0x58>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIO_Init(&usart2_gpio);
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f9a6 	bl	8000680 <GPIO_Init>

    // RX pin (PA3)
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000334:	2303      	movs	r3, #3
 8000336:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_gpio);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f9a0 	bl	8000680 <GPIO_Init>
}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40021000 	.word	0x40021000

0800034c <main>:

int main(void)
{
 800034c:	b5b0      	push	{r4, r5, r7, lr}
 800034e:	b092      	sub	sp, #72	@ 0x48
 8000350:	af00      	add	r7, sp, #0
    // LED GPIO configuration
    GPIO_Handle_t GpioLed;
    GpioLed.pGPIOx = GPIOA;
 8000352:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000356:	63bb      	str	r3, [r7, #56]	@ 0x38
    GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;      // LED on PA5
 8000358:	2305      	movs	r3, #5
 800035a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;        // output mode
 800035e:	2301      	movs	r3, #1
 8000360:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000364:	2302      	movs	r3, #2
 8000366:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;    // push-pull
 800036a:	2300      	movs	r3, #0
 800036c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;  // no pull-up/down
 8000370:	2300      	movs	r3, #0
 8000372:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    GPIO_PeriClockControl(GPIOA, ENABLE);
 8000376:	2101      	movs	r1, #1
 8000378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037c:	f000 f8b2 	bl	80004e4 <GPIO_PeriClockControl>
    GPIO_Init(&GpioLed);
 8000380:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f97b 	bl	8000680 <GPIO_Init>

    // Initialize UART GPIO and peripheral
    USART2_GPIOInit();
 800038a:	f7ff ffb1 	bl	80002f0 <USART2_GPIOInit>
    USART2_Init();
 800038e:	f7ff ff8d 	bl	80002ac <USART2_Init>
    USART_PeripheralControl(USART2, ENABLE);  // enable USART2 peripheral
 8000392:	2101      	movs	r1, #1
 8000394:	481f      	ldr	r0, [pc, #124]	@ (8000414 <main+0xc8>)
 8000396:	f000 fbd7 	bl	8000b48 <USART_PeripheralControl>

    // Send initial message over UART
    uint8_t msg[] = "UART Transmission Start:\r\n";
 800039a:	4b1f      	ldr	r3, [pc, #124]	@ (8000418 <main+0xcc>)
 800039c:	f107 041c 	add.w	r4, r7, #28
 80003a0:	461d      	mov	r5, r3
 80003a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003aa:	c403      	stmia	r4!, {r0, r1}
 80003ac:	8022      	strh	r2, [r4, #0]
 80003ae:	3402      	adds	r4, #2
 80003b0:	0c13      	lsrs	r3, r2, #16
 80003b2:	7023      	strb	r3, [r4, #0]
    USART_SendData(&usart2_handle, msg, strlen((char*)msg));
 80003b4:	f107 031c 	add.w	r3, r7, #28
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff09 	bl	80001d0 <strlen>
 80003be:	4602      	mov	r2, r0
 80003c0:	f107 031c 	add.w	r3, r7, #28
 80003c4:	4619      	mov	r1, r3
 80003c6:	4815      	ldr	r0, [pc, #84]	@ (800041c <main+0xd0>)
 80003c8:	f000 fc6a 	bl	8000ca0 <USART_SendData>
    delay();
 80003cc:	f7ff ff58 	bl	8000280 <delay>

    // Receive a single character from UART
    uint8_t c = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	76fb      	strb	r3, [r7, #27]
    USART_ReceiveData(&usart2_handle, &c, 1);
 80003d4:	f107 031b 	add.w	r3, r7, #27
 80003d8:	2201      	movs	r2, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	480f      	ldr	r0, [pc, #60]	@ (800041c <main+0xd0>)
 80003de:	f000 fcad 	bl	8000d3c <USART_ReceiveData>

    // Optional: Turn on LED if character is 'a'
    if(c == 'a')
 80003e2:	7efb      	ldrb	r3, [r7, #27]
 80003e4:	2b61      	cmp	r3, #97	@ 0x61
 80003e6:	d105      	bne.n	80003f4 <main+0xa8>
    {
        GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2105      	movs	r1, #5
 80003ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f0:	f000 fafe 	bl	80009f0 <GPIO_WriteToOutputPin>

    }


    char buffer[20];
    int len = snprintf(buffer, sizeof(buffer), "received: %c\r\n", c);
 80003f4:	7efb      	ldrb	r3, [r7, #27]
 80003f6:	1d38      	adds	r0, r7, #4
 80003f8:	4a09      	ldr	r2, [pc, #36]	@ (8000420 <main+0xd4>)
 80003fa:	2114      	movs	r1, #20
 80003fc:	f000 fcfa 	bl	8000df4 <sniprintf>
 8000400:	6478      	str	r0, [r7, #68]	@ 0x44

    // Send formatted string over UART
    USART_SendData(&usart2_handle, (uint8_t*)buffer, len);
 8000402:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	4804      	ldr	r0, [pc, #16]	@ (800041c <main+0xd0>)
 800040a:	f000 fc49 	bl	8000ca0 <USART_SendData>

    while(1);  // infinite loop
 800040e:	bf00      	nop
 8000410:	e7fd      	b.n	800040e <main+0xc2>
 8000412:	bf00      	nop
 8000414:	40004400 	.word	0x40004400
 8000418:	08001784 	.word	0x08001784
 800041c:	2000006c 	.word	0x2000006c
 8000420:	08001774 	.word	0x08001774

08000424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800042c:	4a14      	ldr	r2, [pc, #80]	@ (8000480 <_sbrk+0x5c>)
 800042e:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <_sbrk+0x60>)
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000438:	4b13      	ldr	r3, [pc, #76]	@ (8000488 <_sbrk+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d102      	bne.n	8000446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000440:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <_sbrk+0x64>)
 8000442:	4a12      	ldr	r2, [pc, #72]	@ (800048c <_sbrk+0x68>)
 8000444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000446:	4b10      	ldr	r3, [pc, #64]	@ (8000488 <_sbrk+0x64>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	693a      	ldr	r2, [r7, #16]
 8000450:	429a      	cmp	r2, r3
 8000452:	d207      	bcs.n	8000464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000454:	f000 fd0c 	bl	8000e70 <__errno>
 8000458:	4603      	mov	r3, r0
 800045a:	220c      	movs	r2, #12
 800045c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	e009      	b.n	8000478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000464:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <_sbrk+0x64>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800046a:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <_sbrk+0x64>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	4a05      	ldr	r2, [pc, #20]	@ (8000488 <_sbrk+0x64>)
 8000474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000476:	68fb      	ldr	r3, [r7, #12]
}
 8000478:	4618      	mov	r0, r3
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20018000 	.word	0x20018000
 8000484:	00000400 	.word	0x00000400
 8000488:	20000090 	.word	0x20000090
 800048c:	200001e0 	.word	0x200001e0

08000490 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000490:	480d      	ldr	r0, [pc, #52]	@ (80004c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000492:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000494:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000498:	480c      	ldr	r0, [pc, #48]	@ (80004cc <LoopForever+0x6>)
  ldr r1, =_edata
 800049a:	490d      	ldr	r1, [pc, #52]	@ (80004d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800049c:	4a0d      	ldr	r2, [pc, #52]	@ (80004d4 <LoopForever+0xe>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	@ (80004d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b0:	4c0a      	ldr	r4, [pc, #40]	@ (80004dc <LoopForever+0x16>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80004be:	f000 fcdd 	bl	8000e7c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80004c2:	f7ff ff43 	bl	800034c <main>

080004c6 <LoopForever>:

LoopForever:
  b LoopForever
 80004c6:	e7fe      	b.n	80004c6 <LoopForever>
  ldr   r0, =_estack
 80004c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d0:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80004d4:	080017e4 	.word	0x080017e4
  ldr r2, =_sbss
 80004d8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80004dc:	200001dc 	.word	0x200001dc

080004e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC1_2_IRQHandler>
	...

080004e4 <GPIO_PeriClockControl>:

/* Peripheral clock setup */

// This function enables or disables peripheral clock for the given GPIO port
void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx , uint8_t EnorDi)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]


	if(EnorDi == ENABLE)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d157      	bne.n	80005a6 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80004fe:	4b58      	ldr	r3, [pc, #352]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a57      	ldr	r2, [pc, #348]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
				{
					GPIOH_PCLK_DI();
				}
	}

}
 800050a:	e0a3      	b.n	8000654 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a55      	ldr	r2, [pc, #340]	@ (8000664 <GPIO_PeriClockControl+0x180>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000514:	4b52      	ldr	r3, [pc, #328]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000518:	4a51      	ldr	r2, [pc, #324]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000520:	e098      	b.n	8000654 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a50      	ldr	r2, [pc, #320]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800052a:	4b4d      	ldr	r3, [pc, #308]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	4a4c      	ldr	r2, [pc, #304]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000536:	e08d      	b.n	8000654 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a4c      	ldr	r2, [pc, #304]	@ (800066c <GPIO_PeriClockControl+0x188>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d106      	bne.n	800054e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000540:	4b47      	ldr	r3, [pc, #284]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000544:	4a46      	ldr	r2, [pc, #280]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800054c:	e082      	b.n	8000654 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a47      	ldr	r2, [pc, #284]	@ (8000670 <GPIO_PeriClockControl+0x18c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d106      	bne.n	8000564 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000556:	4b42      	ldr	r3, [pc, #264]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	4a41      	ldr	r2, [pc, #260]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 800055c:	f043 0310 	orr.w	r3, r3, #16
 8000560:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000562:	e077      	b.n	8000654 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a43      	ldr	r2, [pc, #268]	@ (8000674 <GPIO_PeriClockControl+0x190>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d106      	bne.n	800057a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800056c:	4b3c      	ldr	r3, [pc, #240]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 800056e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000570:	4a3b      	ldr	r2, [pc, #236]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000572:	f043 0320 	orr.w	r3, r3, #32
 8000576:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000578:	e06c      	b.n	8000654 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a3e      	ldr	r2, [pc, #248]	@ (8000678 <GPIO_PeriClockControl+0x194>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d106      	bne.n	8000590 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000582:	4b37      	ldr	r3, [pc, #220]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a36      	ldr	r2, [pc, #216]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800058e:	e061      	b.n	8000654 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a3a      	ldr	r2, [pc, #232]	@ (800067c <GPIO_PeriClockControl+0x198>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d15d      	bne.n	8000654 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000598:	4b31      	ldr	r3, [pc, #196]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 800059a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059c:	4a30      	ldr	r2, [pc, #192]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 800059e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005a4:	e056      	b.n	8000654 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80005ac:	d106      	bne.n	80005bc <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 80005ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 80005b4:	f023 0301 	bic.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005ba:	e04b      	b.n	8000654 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOB)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a29      	ldr	r2, [pc, #164]	@ (8000664 <GPIO_PeriClockControl+0x180>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d106      	bne.n	80005d2 <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80005c4:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 80005c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c8:	4a25      	ldr	r2, [pc, #148]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 80005ca:	f023 0302 	bic.w	r3, r3, #2
 80005ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005d0:	e040      	b.n	8000654 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOC)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a24      	ldr	r2, [pc, #144]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d106      	bne.n	80005e8 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80005da:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	4a20      	ldr	r2, [pc, #128]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 80005e0:	f023 0304 	bic.w	r3, r3, #4
 80005e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005e6:	e035      	b.n	8000654 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOD)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a20      	ldr	r2, [pc, #128]	@ (800066c <GPIO_PeriClockControl+0x188>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d106      	bne.n	80005fe <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 80005f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 80005f6:	f023 0308 	bic.w	r3, r3, #8
 80005fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005fc:	e02a      	b.n	8000654 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOE)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a1b      	ldr	r2, [pc, #108]	@ (8000670 <GPIO_PeriClockControl+0x18c>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d106      	bne.n	8000614 <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 8000606:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	4a15      	ldr	r2, [pc, #84]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 800060c:	f023 0310 	bic.w	r3, r3, #16
 8000610:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000612:	e01f      	b.n	8000654 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOF)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <GPIO_PeriClockControl+0x190>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d106      	bne.n	800062a <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 800061e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000620:	4a0f      	ldr	r2, [pc, #60]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000622:	f023 0320 	bic.w	r3, r3, #32
 8000626:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000628:	e014      	b.n	8000654 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOG)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <GPIO_PeriClockControl+0x194>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d106      	bne.n	8000640 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 8000638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800063e:	e009      	b.n	8000654 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOH)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a0e      	ldr	r2, [pc, #56]	@ (800067c <GPIO_PeriClockControl+0x198>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d105      	bne.n	8000654 <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <GPIO_PeriClockControl+0x17c>)
 800064e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000
 8000664:	48000400 	.word	0x48000400
 8000668:	48000800 	.word	0x48000800
 800066c:	48000c00 	.word	0x48000c00
 8000670:	48001000 	.word	0x48001000
 8000674:	48001400 	.word	0x48001400
 8000678:	48001800 	.word	0x48001800
 800067c:	48001c00 	.word	0x48001c00

08000680 <GPIO_Init>:

/* Initialization and de-initialization */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000680:	b480      	push	{r7}
 8000682:	b087      	sub	sp, #28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	795b      	ldrb	r3, [r3, #5]
 8000690:	2b03      	cmp	r3, #3
 8000692:	d822      	bhi.n	80006da <GPIO_Init+0x5a>
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	795b      	ldrb	r3, [r3, #5]
 8000698:	461a      	mov	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	791b      	ldrb	r3, [r3, #4]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	2103      	movs	r1, #3
 80006b4:	fa01 f303 	lsl.w	r3, r1, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	4619      	mov	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	400a      	ands	r2, r1
 80006c2:	601a      	str	r2, [r3, #0]
			pGPIOHandle ->pGPIOx->MODER |= temp;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6819      	ldr	r1, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	430a      	orrs	r2, r1
 80006d2:	601a      	str	r2, [r3, #0]
			temp=0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	e0e1      	b.n	800089e <GPIO_Init+0x21e>
		}
		else
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
					pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	2103      	movs	r1, #3
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	400a      	ands	r2, r1
 8000708:	601a      	str	r2, [r3, #0]
					pGPIOHandle ->pGPIOx->MODER |= temp;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6819      	ldr	r1, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	430a      	orrs	r2, r1
 8000718:	601a      	str	r2, [r3, #0]
					temp=0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
			if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	795b      	ldrb	r3, [r3, #5]
 8000722:	2b04      	cmp	r3, #4
 8000724:	d117      	bne.n	8000756 <GPIO_Init+0xd6>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000726:	4b47      	ldr	r3, [pc, #284]	@ (8000844 <GPIO_Init+0x1c4>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	7912      	ldrb	r2, [r2, #4]
 800072e:	4611      	mov	r1, r2
 8000730:	2201      	movs	r2, #1
 8000732:	408a      	lsls	r2, r1
 8000734:	4611      	mov	r1, r2
 8000736:	4a43      	ldr	r2, [pc, #268]	@ (8000844 <GPIO_Init+0x1c4>)
 8000738:	430b      	orrs	r3, r1
 800073a:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073c:	4b41      	ldr	r3, [pc, #260]	@ (8000844 <GPIO_Init+0x1c4>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	7912      	ldrb	r2, [r2, #4]
 8000744:	4611      	mov	r1, r2
 8000746:	2201      	movs	r2, #1
 8000748:	408a      	lsls	r2, r1
 800074a:	43d2      	mvns	r2, r2
 800074c:	4611      	mov	r1, r2
 800074e:	4a3d      	ldr	r2, [pc, #244]	@ (8000844 <GPIO_Init+0x1c4>)
 8000750:	400b      	ands	r3, r1
 8000752:	6093      	str	r3, [r2, #8]
 8000754:	e035      	b.n	80007c2 <GPIO_Init+0x142>
					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	795b      	ldrb	r3, [r3, #5]
 800075a:	2b05      	cmp	r3, #5
 800075c:	d117      	bne.n	800078e <GPIO_Init+0x10e>
					{
						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800075e:	4b39      	ldr	r3, [pc, #228]	@ (8000844 <GPIO_Init+0x1c4>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	7912      	ldrb	r2, [r2, #4]
 8000766:	4611      	mov	r1, r2
 8000768:	2201      	movs	r2, #1
 800076a:	408a      	lsls	r2, r1
 800076c:	4611      	mov	r1, r2
 800076e:	4a35      	ldr	r2, [pc, #212]	@ (8000844 <GPIO_Init+0x1c4>)
 8000770:	430b      	orrs	r3, r1
 8000772:	6093      	str	r3, [r2, #8]

						EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000774:	4b33      	ldr	r3, [pc, #204]	@ (8000844 <GPIO_Init+0x1c4>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	7912      	ldrb	r2, [r2, #4]
 800077c:	4611      	mov	r1, r2
 800077e:	2201      	movs	r2, #1
 8000780:	408a      	lsls	r2, r1
 8000782:	43d2      	mvns	r2, r2
 8000784:	4611      	mov	r1, r2
 8000786:	4a2f      	ldr	r2, [pc, #188]	@ (8000844 <GPIO_Init+0x1c4>)
 8000788:	400b      	ands	r3, r1
 800078a:	60d3      	str	r3, [r2, #12]
 800078c:	e019      	b.n	80007c2 <GPIO_Init+0x142>

					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	2b06      	cmp	r3, #6
 8000794:	d115      	bne.n	80007c2 <GPIO_Init+0x142>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <GPIO_Init+0x1c4>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	7912      	ldrb	r2, [r2, #4]
 800079e:	4611      	mov	r1, r2
 80007a0:	2201      	movs	r2, #1
 80007a2:	408a      	lsls	r2, r1
 80007a4:	4611      	mov	r1, r2
 80007a6:	4a27      	ldr	r2, [pc, #156]	@ (8000844 <GPIO_Init+0x1c4>)
 80007a8:	430b      	orrs	r3, r1
 80007aa:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80007ac:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <GPIO_Init+0x1c4>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7912      	ldrb	r2, [r2, #4]
 80007b4:	4611      	mov	r1, r2
 80007b6:	2201      	movs	r2, #1
 80007b8:	408a      	lsls	r2, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a21      	ldr	r2, [pc, #132]	@ (8000844 <GPIO_Init+0x1c4>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	6093      	str	r3, [r2, #8]
					}
				 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	089b      	lsrs	r3, r3, #2
 80007c8:	74fb      	strb	r3, [r7, #19]
				 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	f003 0303 	and.w	r3, r3, #3
 80007d2:	74bb      	strb	r3, [r7, #18]
				 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80007dc:	d042      	beq.n	8000864 <GPIO_Init+0x1e4>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a19      	ldr	r2, [pc, #100]	@ (8000848 <GPIO_Init+0x1c8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d02b      	beq.n	8000840 <GPIO_Init+0x1c0>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a17      	ldr	r2, [pc, #92]	@ (800084c <GPIO_Init+0x1cc>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d024      	beq.n	800083c <GPIO_Init+0x1bc>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a16      	ldr	r2, [pc, #88]	@ (8000850 <GPIO_Init+0x1d0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d01d      	beq.n	8000838 <GPIO_Init+0x1b8>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a14      	ldr	r2, [pc, #80]	@ (8000854 <GPIO_Init+0x1d4>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d016      	beq.n	8000834 <GPIO_Init+0x1b4>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a13      	ldr	r2, [pc, #76]	@ (8000858 <GPIO_Init+0x1d8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d00f      	beq.n	8000830 <GPIO_Init+0x1b0>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a11      	ldr	r2, [pc, #68]	@ (800085c <GPIO_Init+0x1dc>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d008      	beq.n	800082c <GPIO_Init+0x1ac>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a10      	ldr	r2, [pc, #64]	@ (8000860 <GPIO_Init+0x1e0>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d101      	bne.n	8000828 <GPIO_Init+0x1a8>
 8000824:	2307      	movs	r3, #7
 8000826:	e01e      	b.n	8000866 <GPIO_Init+0x1e6>
 8000828:	2300      	movs	r3, #0
 800082a:	e01c      	b.n	8000866 <GPIO_Init+0x1e6>
 800082c:	2306      	movs	r3, #6
 800082e:	e01a      	b.n	8000866 <GPIO_Init+0x1e6>
 8000830:	2305      	movs	r3, #5
 8000832:	e018      	b.n	8000866 <GPIO_Init+0x1e6>
 8000834:	2304      	movs	r3, #4
 8000836:	e016      	b.n	8000866 <GPIO_Init+0x1e6>
 8000838:	2303      	movs	r3, #3
 800083a:	e014      	b.n	8000866 <GPIO_Init+0x1e6>
 800083c:	2302      	movs	r3, #2
 800083e:	e012      	b.n	8000866 <GPIO_Init+0x1e6>
 8000840:	2301      	movs	r3, #1
 8000842:	e010      	b.n	8000866 <GPIO_Init+0x1e6>
 8000844:	40010400 	.word	0x40010400
 8000848:	48000400 	.word	0x48000400
 800084c:	48000800 	.word	0x48000800
 8000850:	48000c00 	.word	0x48000c00
 8000854:	48001000 	.word	0x48001000
 8000858:	48001400 	.word	0x48001400
 800085c:	48001800 	.word	0x48001800
 8000860:	48001c00 	.word	0x48001c00
 8000864:	2300      	movs	r3, #0
 8000866:	747b      	strb	r3, [r7, #17]
				 SYSCFG_PCLK_EN();
 8000868:	4b5e      	ldr	r3, [pc, #376]	@ (80009e4 <GPIO_Init+0x364>)
 800086a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086c:	4a5d      	ldr	r2, [pc, #372]	@ (80009e4 <GPIO_Init+0x364>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6613      	str	r3, [r2, #96]	@ 0x60
				 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 8000874:	7c7a      	ldrb	r2, [r7, #17]
 8000876:	7cbb      	ldrb	r3, [r7, #18]
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	fa02 f103 	lsl.w	r1, r2, r3
 800087e:	4a5a      	ldr	r2, [pc, #360]	@ (80009e8 <GPIO_Init+0x368>)
 8000880:	7cfb      	ldrb	r3, [r7, #19]
 8000882:	3302      	adds	r3, #2
 8000884:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000888:	4b58      	ldr	r3, [pc, #352]	@ (80009ec <GPIO_Init+0x36c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	7912      	ldrb	r2, [r2, #4]
 8000890:	4611      	mov	r1, r2
 8000892:	2201      	movs	r2, #1
 8000894:	408a      	lsls	r2, r1
 8000896:	4611      	mov	r1, r2
 8000898:	4a54      	ldr	r2, [pc, #336]	@ (80009ec <GPIO_Init+0x36c>)
 800089a:	430b      	orrs	r3, r1
 800089c:	6013      	str	r3, [r2, #0]
		}

		temp=0;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	799b      	ldrb	r3, [r3, #6]
 80008a6:	461a      	mov	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	2103      	movs	r1, #3
 80008c2:	fa01 f303 	lsl.w	r3, r1, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	4619      	mov	r1, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	400a      	ands	r2, r1
 80008d0:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6899      	ldr	r1, [r3, #8]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	697a      	ldr	r2, [r7, #20]
 80008de:	430a      	orrs	r2, r1
 80008e0:	609a      	str	r2, [r3, #8]
		temp=0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	79db      	ldrb	r3, [r3, #7]
 80008ea:	461a      	mov	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	68da      	ldr	r2, [r3, #12]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2103      	movs	r1, #3
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	400a      	ands	r2, r1
 8000914:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	68d9      	ldr	r1, [r3, #12]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	430a      	orrs	r2, r1
 8000924:	60da      	str	r2, [r3, #12]
		temp=0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7a1b      	ldrb	r3, [r3, #8]
 800092e:	461a      	mov	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	4619      	mov	r1, r3
 8000946:	2301      	movs	r3, #1
 8000948:	408b      	lsls	r3, r1
 800094a:	43db      	mvns	r3, r3
 800094c:	4619      	mov	r1, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	400a      	ands	r2, r1
 8000954:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6859      	ldr	r1, [r3, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	430a      	orrs	r2, r1
 8000964:	605a      	str	r2, [r3, #4]
		temp=0;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	795b      	ldrb	r3, [r3, #5]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d132      	bne.n	80009d8 <GPIO_Init+0x358>
		{
			uint32_t temp1 ,temp2;
			temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	791b      	ldrb	r3, [r3, #4]
 8000976:	08db      	lsrs	r3, r3, #3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	60fb      	str	r3, [r7, #12]
			temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	791b      	ldrb	r3, [r3, #4]
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	60bb      	str	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	3208      	adds	r2, #8
 800098e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	210f      	movs	r1, #15
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	4619      	mov	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4011      	ands	r1, r2
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	3208      	adds	r2, #8
 80009aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	3208      	adds	r2, #8
 80009b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7a5b      	ldrb	r3, [r3, #9]
 80009be:	4619      	mov	r1, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	4619      	mov	r1, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4311      	orrs	r1, r2
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	3208      	adds	r2, #8
 80009d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}




}
 80009d8:	bf00      	nop
 80009da:	371c      	adds	r7, #28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010000 	.word	0x40010000
 80009ec:	40010400 	.word	0x40010400

080009f0 <GPIO_WriteToOutputPin>:

}


void GPIO_WriteToOutputPin(GPIO_Regdef_t *pGPIOx , uint8_t PinNumber, uint8_t value)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
 80009fc:	4613      	mov	r3, r2
 80009fe:	70bb      	strb	r3, [r7, #2]
	if(value==GPIO_PIN_SET)
 8000a00:	78bb      	ldrb	r3, [r7, #2]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d109      	bne.n	8000a1a <GPIO_WriteToOutputPin+0x2a>
		{
			pGPIOx->ODR |= 1<<PinNumber;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	78fa      	ldrb	r2, [r7, #3]
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a12:	431a      	orrs	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	615a      	str	r2, [r3, #20]
		else
		{
			pGPIOx->ODR &= ~(1<<PinNumber);
		}

}
 8000a18:	e009      	b.n	8000a2e <GPIO_WriteToOutputPin+0x3e>
			pGPIOx->ODR &= ~(1<<PinNumber);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	78fa      	ldrb	r2, [r7, #3]
 8000a20:	2101      	movs	r1, #1
 8000a22:	fa01 f202 	lsl.w	r2, r1, r2
 8000a26:	43d2      	mvns	r2, r2
 8000a28:	401a      	ands	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	615a      	str	r2, [r3, #20]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <USART_PeriClockControl>:
/*
 *  Peripheral Clock Control
 */

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d136      	bne.n	8000ab8 <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a38      	ldr	r2, [pc, #224]	@ (8000b30 <USART_PeriClockControl+0xf8>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d106      	bne.n	8000a60 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000a52:	4b38      	ldr	r3, [pc, #224]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a56:	4a37      	ldr	r2, [pc, #220]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5c:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000a5e:	e061      	b.n	8000b24 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a35      	ldr	r2, [pc, #212]	@ (8000b38 <USART_PeriClockControl+0x100>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d106      	bne.n	8000a76 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000a68:	4b32      	ldr	r3, [pc, #200]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6c:	4a31      	ldr	r2, [pc, #196]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a72:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a74:	e056      	b.n	8000b24 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a30      	ldr	r2, [pc, #192]	@ (8000b3c <USART_PeriClockControl+0x104>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d106      	bne.n	8000a8c <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a2c      	ldr	r2, [pc, #176]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a8a:	e04b      	b.n	8000b24 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b40 <USART_PeriClockControl+0x108>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d106      	bne.n	8000aa2 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000a94:	4b27      	ldr	r3, [pc, #156]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a98:	4a26      	ldr	r2, [pc, #152]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000a9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a9e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000aa0:	e040      	b.n	8000b24 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a27      	ldr	r2, [pc, #156]	@ (8000b44 <USART_PeriClockControl+0x10c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d13c      	bne.n	8000b24 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 8000aaa:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aae:	4a21      	ldr	r2, [pc, #132]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000ab0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ab4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000ab6:	e035      	b.n	8000b24 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a1d      	ldr	r2, [pc, #116]	@ (8000b30 <USART_PeriClockControl+0xf8>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d106      	bne.n	8000ace <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000aca:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000acc:	e02a      	b.n	8000b24 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	@ (8000b38 <USART_PeriClockControl+0x100>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d106      	bne.n	8000ae4 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 8000ad6:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000adc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000ae0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000ae2:	e01f      	b.n	8000b24 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a15      	ldr	r2, [pc, #84]	@ (8000b3c <USART_PeriClockControl+0x104>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d106      	bne.n	8000afa <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af0:	4a10      	ldr	r2, [pc, #64]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000af6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000af8:	e014      	b.n	8000b24 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <USART_PeriClockControl+0x108>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d106      	bne.n	8000b10 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	4a0b      	ldr	r2, [pc, #44]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000b08:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000b0c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000b0e:	e009      	b.n	8000b24 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <USART_PeriClockControl+0x10c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d105      	bne.n	8000b24 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1c:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <USART_PeriClockControl+0xfc>)
 8000b1e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000b22:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40013800 	.word	0x40013800
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40004800 	.word	0x40004800
 8000b40:	40004c00 	.word	0x40004c00
 8000b44:	40005000 	.word	0x40005000

08000b48 <USART_PeripheralControl>:



void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d106      	bne.n	8000b68 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f043 0201 	orr.w	r2, r3, #1
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]
	}else{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 8000b66:	e005      	b.n	8000b74 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f023 0201 	bic.w	r2, r3, #1
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	601a      	str	r2, [r3, #0]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <USART_GetFlagStatus>:




uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	69da      	ldr	r2, [r3, #28]
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <USART_Init>:
 */



void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]

    // 1. Enable peripheral clock for the given USART
    USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff3d 	bl	8000a38 <USART_PeriClockControl>

    // 2. Configure USART mode (TX, RX, or both)
    if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	791b      	ldrb	r3, [r3, #4]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d104      	bne.n	8000bd0 <USART_Init+0x2a>
    {
        tempreg |= (1 << USART_CR1_RE);   // Enable Receiver
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e010      	b.n	8000bf2 <USART_Init+0x4c>
    }
    else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	791b      	ldrb	r3, [r3, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d104      	bne.n	8000be2 <USART_Init+0x3c>
    {
        tempreg |= (1 << USART_CR1_TE);   // Enable Transmitter
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f043 0308 	orr.w	r3, r3, #8
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	e007      	b.n	8000bf2 <USART_Init+0x4c>
    }
    else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	791b      	ldrb	r3, [r3, #4]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d103      	bne.n	8000bf2 <USART_Init+0x4c>
    {
        tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE)); // Enable both TX & RX
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f043 030c 	orr.w	r3, r3, #12
 8000bf0:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure word length
    tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7b5b      	ldrb	r3, [r3, #13]
 8000bf6:	031b      	lsls	r3, r3, #12
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]

    // 4. Configure parity control
    if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7b9b      	ldrb	r3, [r3, #14]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d104      	bne.n	8000c10 <USART_Init+0x6a>
    {
        tempreg |= (1 << USART_CR1_PCE);  // Enable Even parity
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	e00b      	b.n	8000c28 <USART_Init+0x82>
    }
    else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7b9b      	ldrb	r3, [r3, #14]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d107      	bne.n	8000c28 <USART_Init+0x82>
    {
        tempreg |= (1 << USART_CR1_PCE);  // Enable Parity
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c1e:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << USART_CR1_PS);   // Select Odd parity
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c26:	60fb      	str	r3, [r7, #12]
    }

    // Load CR1 register
    pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	601a      	str	r2, [r3, #0]

    // 5. Configure stop bits
    tempreg = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
    tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7b1b      	ldrb	r3, [r3, #12]
 8000c38:	031b      	lsls	r3, r3, #12
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
    pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	605a      	str	r2, [r3, #4]

    // 6. Configure hardware flow control
    tempreg = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
    if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7bdb      	ldrb	r3, [r3, #15]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d104      	bne.n	8000c5e <USART_Init+0xb8>
    {
        tempreg |= (1 << USART_CR3_CTSE); // Enable CTS
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	e014      	b.n	8000c88 <USART_Init+0xe2>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7bdb      	ldrb	r3, [r3, #15]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d104      	bne.n	8000c70 <USART_Init+0xca>
    {
        tempreg |= (1 << USART_CR3_RTSE); // Enable RTS
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	e00b      	b.n	8000c88 <USART_Init+0xe2>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7bdb      	ldrb	r3, [r3, #15]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d107      	bne.n	8000c88 <USART_Init+0xe2>
    {
        tempreg |= (1 << USART_CR3_CTSE); // Enable CTS
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7e:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << USART_CR3_RTSE); // Enable RTS
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c86:	60fb      	str	r3, [r7, #12]
    }

    // Load CR3 register
    pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	609a      	str	r2, [r3, #8]

    // 7. Configure baud rate
    pUSARTHandle->pUSARTx->BRR = 0x25;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2225      	movs	r2, #37	@ 0x25
 8000c96:	60da      	str	r2, [r3, #12]
   // USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <USART_SendData>:
/*
 *  UART Send Data
 */

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
    uint16_t *pdata;

    // Loop through all bytes to be transmitted
    for (uint32_t i = 0; i < Len; i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e031      	b.n	8000d16 <USART_SendData+0x76>
    {
        // 1. Wait until TXE (Transmit Data Register Empty) flag is set
        while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000cb2:	bf00      	nop
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2180      	movs	r1, #128	@ 0x80
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff5f 	bl	8000b7e <USART_GetFlagStatus>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f6      	beq.n	8000cb4 <USART_SendData+0x14>

        // 2. Check word length
        if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	7b5b      	ldrb	r3, [r3, #13]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d118      	bne.n	8000d00 <USART_SendData+0x60>
        {
            // If 9-bit data frame
            pdata = (uint16_t*) pTxBuffer;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	613b      	str	r3, [r7, #16]
            pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF); // Send 9 bits
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28

            // If parity is disabled → 9 bits used (2 bytes), so move buffer by 2
            if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	7b9b      	ldrb	r3, [r3, #14]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d106      	bne.n	8000cf8 <USART_SendData+0x58>
            {
                pTxBuffer++;
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
                pTxBuffer++;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	e00b      	b.n	8000d10 <USART_SendData+0x70>
            }
            else
            {
                // If parity enabled , 8 data bits + 1 parity bit, so move buffer by 1
                pTxBuffer++;
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	e007      	b.n	8000d10 <USART_SendData+0x70>
            }
        }
        else
        {
            // If 8-bit data frame
            pUSARTHandle->pUSARTx->TDR = (*pTxBuffer & (uint8_t)0xFF); // Send 8 bits
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	781a      	ldrb	r2, [r3, #0]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	629a      	str	r2, [r3, #40]	@ 0x28
            pTxBuffer++;  // Move to next byte
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < Len; i++)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d3c9      	bcc.n	8000cb2 <USART_SendData+0x12>
        }
    }

    // 3. Wait for TC (Transmission Complete) flag before returning
    while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000d1e:	bf00      	nop
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2140      	movs	r1, #64	@ 0x40
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff29 	bl	8000b7e <USART_GetFlagStatus>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f6      	beq.n	8000d20 <USART_SendData+0x80>
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <USART_ReceiveData>:
/*
 *  UART Send Data
 */

void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
    // Loop until all bytes are received
    for (uint32_t i = 0; i < Len; i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e048      	b.n	8000de0 <USART_ReceiveData+0xa4>
    {
        // Wait until RXNE (Receive Data Register Not Empty) flag is set
        while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_RXNE));
 8000d4e:	bf00      	nop
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2120      	movs	r1, #32
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff11 	bl	8000b7e <USART_GetFlagStatus>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f6      	beq.n	8000d50 <USART_ReceiveData+0x14>

        // Check word length
        if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	7b5b      	ldrb	r3, [r3, #13]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d11d      	bne.n	8000da6 <USART_ReceiveData+0x6a>
        {
            // 9-bit data frame
            if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	7b9b      	ldrb	r3, [r3, #14]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10f      	bne.n	8000d92 <USART_ReceiveData+0x56>
            {
                // No parity, all 9 bits are data
                *((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->RDR & (uint16_t)0x01FF);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	801a      	strh	r2, [r3, #0]
                pRxBuffer++;
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	3301      	adds	r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
                pRxBuffer++;   // Increment by 2 bytes
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	e023      	b.n	8000dda <USART_ReceiveData+0x9e>
            }
            else
            {
                // Parity enabled, only 8 bits are data
                *pRxBuffer = (pUSARTHandle->pUSARTx->RDR & (uint8_t)0xFF);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	701a      	strb	r2, [r3, #0]
                pRxBuffer++;  // Increment by 1 byte
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	3301      	adds	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	e019      	b.n	8000dda <USART_ReceiveData+0x9e>
            }
        }
        else
        {
            // 8-bit data frame
            if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	7b9b      	ldrb	r3, [r3, #14]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d109      	bne.n	8000dc2 <USART_ReceiveData+0x86>
            {
                // No parity, all 8 bits are data
                *pRxBuffer = (uint8_t)(pUSARTHandle->pUSARTx->RDR & (uint8_t)0x7F);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e008      	b.n	8000dd4 <USART_ReceiveData+0x98>
            }
            else
            {
                // Parity enabled, only 7 bits are data
                *pRxBuffer = (uint8_t)(pUSARTHandle->pUSARTx->RDR & (uint8_t)0x7F);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	701a      	strb	r2, [r3, #0]
            }
            pRxBuffer++;  // Increment by 1 byte
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < Len; i++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d3b2      	bcc.n	8000d4e <USART_ReceiveData+0x12>
        }
    }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <sniprintf>:
 8000df4:	b40c      	push	{r2, r3}
 8000df6:	b530      	push	{r4, r5, lr}
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <sniprintf+0x68>)
 8000dfa:	1e0c      	subs	r4, r1, #0
 8000dfc:	681d      	ldr	r5, [r3, #0]
 8000dfe:	b09d      	sub	sp, #116	@ 0x74
 8000e00:	da08      	bge.n	8000e14 <sniprintf+0x20>
 8000e02:	238b      	movs	r3, #139	@ 0x8b
 8000e04:	602b      	str	r3, [r5, #0]
 8000e06:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0a:	b01d      	add	sp, #116	@ 0x74
 8000e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e10:	b002      	add	sp, #8
 8000e12:	4770      	bx	lr
 8000e14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000e18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	931b      	str	r3, [sp, #108]	@ 0x6c
 8000e22:	bf14      	ite	ne
 8000e24:	f104 33ff 	addne.w	r3, r4, #4294967295
 8000e28:	4623      	moveq	r3, r4
 8000e2a:	9304      	str	r3, [sp, #16]
 8000e2c:	9307      	str	r3, [sp, #28]
 8000e2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e32:	9002      	str	r0, [sp, #8]
 8000e34:	9006      	str	r0, [sp, #24]
 8000e36:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000e3a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8000e3c:	ab21      	add	r3, sp, #132	@ 0x84
 8000e3e:	a902      	add	r1, sp, #8
 8000e40:	4628      	mov	r0, r5
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	f000 f994 	bl	8001170 <_svfiprintf_r>
 8000e48:	1c43      	adds	r3, r0, #1
 8000e4a:	bfbc      	itt	lt
 8000e4c:	238b      	movlt	r3, #139	@ 0x8b
 8000e4e:	602b      	strlt	r3, [r5, #0]
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d0da      	beq.n	8000e0a <sniprintf+0x16>
 8000e54:	9b02      	ldr	r3, [sp, #8]
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e7d6      	b.n	8000e0a <sniprintf+0x16>
 8000e5c:	20000000 	.word	0x20000000

08000e60 <memset>:
 8000e60:	4402      	add	r2, r0
 8000e62:	4603      	mov	r3, r0
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d100      	bne.n	8000e6a <memset+0xa>
 8000e68:	4770      	bx	lr
 8000e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8000e6e:	e7f9      	b.n	8000e64 <memset+0x4>

08000e70 <__errno>:
 8000e70:	4b01      	ldr	r3, [pc, #4]	@ (8000e78 <__errno+0x8>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000000 	.word	0x20000000

08000e7c <__libc_init_array>:
 8000e7c:	b570      	push	{r4, r5, r6, lr}
 8000e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8000eb4 <__libc_init_array+0x38>)
 8000e80:	4c0d      	ldr	r4, [pc, #52]	@ (8000eb8 <__libc_init_array+0x3c>)
 8000e82:	1b64      	subs	r4, r4, r5
 8000e84:	10a4      	asrs	r4, r4, #2
 8000e86:	2600      	movs	r6, #0
 8000e88:	42a6      	cmp	r6, r4
 8000e8a:	d109      	bne.n	8000ea0 <__libc_init_array+0x24>
 8000e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8000ebc <__libc_init_array+0x40>)
 8000e8e:	4c0c      	ldr	r4, [pc, #48]	@ (8000ec0 <__libc_init_array+0x44>)
 8000e90:	f000 fc64 	bl	800175c <_init>
 8000e94:	1b64      	subs	r4, r4, r5
 8000e96:	10a4      	asrs	r4, r4, #2
 8000e98:	2600      	movs	r6, #0
 8000e9a:	42a6      	cmp	r6, r4
 8000e9c:	d105      	bne.n	8000eaa <__libc_init_array+0x2e>
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ea4:	4798      	blx	r3
 8000ea6:	3601      	adds	r6, #1
 8000ea8:	e7ee      	b.n	8000e88 <__libc_init_array+0xc>
 8000eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eae:	4798      	blx	r3
 8000eb0:	3601      	adds	r6, #1
 8000eb2:	e7f2      	b.n	8000e9a <__libc_init_array+0x1e>
 8000eb4:	080017dc 	.word	0x080017dc
 8000eb8:	080017dc 	.word	0x080017dc
 8000ebc:	080017dc 	.word	0x080017dc
 8000ec0:	080017e0 	.word	0x080017e0

08000ec4 <__retarget_lock_acquire_recursive>:
 8000ec4:	4770      	bx	lr

08000ec6 <__retarget_lock_release_recursive>:
 8000ec6:	4770      	bx	lr

08000ec8 <_free_r>:
 8000ec8:	b538      	push	{r3, r4, r5, lr}
 8000eca:	4605      	mov	r5, r0
 8000ecc:	2900      	cmp	r1, #0
 8000ece:	d041      	beq.n	8000f54 <_free_r+0x8c>
 8000ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ed4:	1f0c      	subs	r4, r1, #4
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	bfb8      	it	lt
 8000eda:	18e4      	addlt	r4, r4, r3
 8000edc:	f000 f8e0 	bl	80010a0 <__malloc_lock>
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f58 <_free_r+0x90>)
 8000ee2:	6813      	ldr	r3, [r2, #0]
 8000ee4:	b933      	cbnz	r3, 8000ef4 <_free_r+0x2c>
 8000ee6:	6063      	str	r3, [r4, #4]
 8000ee8:	6014      	str	r4, [r2, #0]
 8000eea:	4628      	mov	r0, r5
 8000eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ef0:	f000 b8dc 	b.w	80010ac <__malloc_unlock>
 8000ef4:	42a3      	cmp	r3, r4
 8000ef6:	d908      	bls.n	8000f0a <_free_r+0x42>
 8000ef8:	6820      	ldr	r0, [r4, #0]
 8000efa:	1821      	adds	r1, r4, r0
 8000efc:	428b      	cmp	r3, r1
 8000efe:	bf01      	itttt	eq
 8000f00:	6819      	ldreq	r1, [r3, #0]
 8000f02:	685b      	ldreq	r3, [r3, #4]
 8000f04:	1809      	addeq	r1, r1, r0
 8000f06:	6021      	streq	r1, [r4, #0]
 8000f08:	e7ed      	b.n	8000ee6 <_free_r+0x1e>
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	b10b      	cbz	r3, 8000f14 <_free_r+0x4c>
 8000f10:	42a3      	cmp	r3, r4
 8000f12:	d9fa      	bls.n	8000f0a <_free_r+0x42>
 8000f14:	6811      	ldr	r1, [r2, #0]
 8000f16:	1850      	adds	r0, r2, r1
 8000f18:	42a0      	cmp	r0, r4
 8000f1a:	d10b      	bne.n	8000f34 <_free_r+0x6c>
 8000f1c:	6820      	ldr	r0, [r4, #0]
 8000f1e:	4401      	add	r1, r0
 8000f20:	1850      	adds	r0, r2, r1
 8000f22:	4283      	cmp	r3, r0
 8000f24:	6011      	str	r1, [r2, #0]
 8000f26:	d1e0      	bne.n	8000eea <_free_r+0x22>
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	6053      	str	r3, [r2, #4]
 8000f2e:	4408      	add	r0, r1
 8000f30:	6010      	str	r0, [r2, #0]
 8000f32:	e7da      	b.n	8000eea <_free_r+0x22>
 8000f34:	d902      	bls.n	8000f3c <_free_r+0x74>
 8000f36:	230c      	movs	r3, #12
 8000f38:	602b      	str	r3, [r5, #0]
 8000f3a:	e7d6      	b.n	8000eea <_free_r+0x22>
 8000f3c:	6820      	ldr	r0, [r4, #0]
 8000f3e:	1821      	adds	r1, r4, r0
 8000f40:	428b      	cmp	r3, r1
 8000f42:	bf04      	itt	eq
 8000f44:	6819      	ldreq	r1, [r3, #0]
 8000f46:	685b      	ldreq	r3, [r3, #4]
 8000f48:	6063      	str	r3, [r4, #4]
 8000f4a:	bf04      	itt	eq
 8000f4c:	1809      	addeq	r1, r1, r0
 8000f4e:	6021      	streq	r1, [r4, #0]
 8000f50:	6054      	str	r4, [r2, #4]
 8000f52:	e7ca      	b.n	8000eea <_free_r+0x22>
 8000f54:	bd38      	pop	{r3, r4, r5, pc}
 8000f56:	bf00      	nop
 8000f58:	200001d8 	.word	0x200001d8

08000f5c <sbrk_aligned>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	4e0f      	ldr	r6, [pc, #60]	@ (8000f9c <sbrk_aligned+0x40>)
 8000f60:	460c      	mov	r4, r1
 8000f62:	6831      	ldr	r1, [r6, #0]
 8000f64:	4605      	mov	r5, r0
 8000f66:	b911      	cbnz	r1, 8000f6e <sbrk_aligned+0x12>
 8000f68:	f000 fba4 	bl	80016b4 <_sbrk_r>
 8000f6c:	6030      	str	r0, [r6, #0]
 8000f6e:	4621      	mov	r1, r4
 8000f70:	4628      	mov	r0, r5
 8000f72:	f000 fb9f 	bl	80016b4 <_sbrk_r>
 8000f76:	1c43      	adds	r3, r0, #1
 8000f78:	d103      	bne.n	8000f82 <sbrk_aligned+0x26>
 8000f7a:	f04f 34ff 	mov.w	r4, #4294967295
 8000f7e:	4620      	mov	r0, r4
 8000f80:	bd70      	pop	{r4, r5, r6, pc}
 8000f82:	1cc4      	adds	r4, r0, #3
 8000f84:	f024 0403 	bic.w	r4, r4, #3
 8000f88:	42a0      	cmp	r0, r4
 8000f8a:	d0f8      	beq.n	8000f7e <sbrk_aligned+0x22>
 8000f8c:	1a21      	subs	r1, r4, r0
 8000f8e:	4628      	mov	r0, r5
 8000f90:	f000 fb90 	bl	80016b4 <_sbrk_r>
 8000f94:	3001      	adds	r0, #1
 8000f96:	d1f2      	bne.n	8000f7e <sbrk_aligned+0x22>
 8000f98:	e7ef      	b.n	8000f7a <sbrk_aligned+0x1e>
 8000f9a:	bf00      	nop
 8000f9c:	200001d4 	.word	0x200001d4

08000fa0 <_malloc_r>:
 8000fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fa4:	1ccd      	adds	r5, r1, #3
 8000fa6:	f025 0503 	bic.w	r5, r5, #3
 8000faa:	3508      	adds	r5, #8
 8000fac:	2d0c      	cmp	r5, #12
 8000fae:	bf38      	it	cc
 8000fb0:	250c      	movcc	r5, #12
 8000fb2:	2d00      	cmp	r5, #0
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	db01      	blt.n	8000fbc <_malloc_r+0x1c>
 8000fb8:	42a9      	cmp	r1, r5
 8000fba:	d904      	bls.n	8000fc6 <_malloc_r+0x26>
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	6033      	str	r3, [r6, #0]
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800109c <_malloc_r+0xfc>
 8000fca:	f000 f869 	bl	80010a0 <__malloc_lock>
 8000fce:	f8d8 3000 	ldr.w	r3, [r8]
 8000fd2:	461c      	mov	r4, r3
 8000fd4:	bb44      	cbnz	r4, 8001028 <_malloc_r+0x88>
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f7ff ffbf 	bl	8000f5c <sbrk_aligned>
 8000fde:	1c43      	adds	r3, r0, #1
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	d158      	bne.n	8001096 <_malloc_r+0xf6>
 8000fe4:	f8d8 4000 	ldr.w	r4, [r8]
 8000fe8:	4627      	mov	r7, r4
 8000fea:	2f00      	cmp	r7, #0
 8000fec:	d143      	bne.n	8001076 <_malloc_r+0xd6>
 8000fee:	2c00      	cmp	r4, #0
 8000ff0:	d04b      	beq.n	800108a <_malloc_r+0xea>
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	eb04 0903 	add.w	r9, r4, r3
 8000ffc:	f000 fb5a 	bl	80016b4 <_sbrk_r>
 8001000:	4581      	cmp	r9, r0
 8001002:	d142      	bne.n	800108a <_malloc_r+0xea>
 8001004:	6821      	ldr	r1, [r4, #0]
 8001006:	1a6d      	subs	r5, r5, r1
 8001008:	4629      	mov	r1, r5
 800100a:	4630      	mov	r0, r6
 800100c:	f7ff ffa6 	bl	8000f5c <sbrk_aligned>
 8001010:	3001      	adds	r0, #1
 8001012:	d03a      	beq.n	800108a <_malloc_r+0xea>
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	442b      	add	r3, r5
 8001018:	6023      	str	r3, [r4, #0]
 800101a:	f8d8 3000 	ldr.w	r3, [r8]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	bb62      	cbnz	r2, 800107c <_malloc_r+0xdc>
 8001022:	f8c8 7000 	str.w	r7, [r8]
 8001026:	e00f      	b.n	8001048 <_malloc_r+0xa8>
 8001028:	6822      	ldr	r2, [r4, #0]
 800102a:	1b52      	subs	r2, r2, r5
 800102c:	d420      	bmi.n	8001070 <_malloc_r+0xd0>
 800102e:	2a0b      	cmp	r2, #11
 8001030:	d917      	bls.n	8001062 <_malloc_r+0xc2>
 8001032:	1961      	adds	r1, r4, r5
 8001034:	42a3      	cmp	r3, r4
 8001036:	6025      	str	r5, [r4, #0]
 8001038:	bf18      	it	ne
 800103a:	6059      	strne	r1, [r3, #4]
 800103c:	6863      	ldr	r3, [r4, #4]
 800103e:	bf08      	it	eq
 8001040:	f8c8 1000 	streq.w	r1, [r8]
 8001044:	5162      	str	r2, [r4, r5]
 8001046:	604b      	str	r3, [r1, #4]
 8001048:	4630      	mov	r0, r6
 800104a:	f000 f82f 	bl	80010ac <__malloc_unlock>
 800104e:	f104 000b 	add.w	r0, r4, #11
 8001052:	1d23      	adds	r3, r4, #4
 8001054:	f020 0007 	bic.w	r0, r0, #7
 8001058:	1ac2      	subs	r2, r0, r3
 800105a:	bf1c      	itt	ne
 800105c:	1a1b      	subne	r3, r3, r0
 800105e:	50a3      	strne	r3, [r4, r2]
 8001060:	e7af      	b.n	8000fc2 <_malloc_r+0x22>
 8001062:	6862      	ldr	r2, [r4, #4]
 8001064:	42a3      	cmp	r3, r4
 8001066:	bf0c      	ite	eq
 8001068:	f8c8 2000 	streq.w	r2, [r8]
 800106c:	605a      	strne	r2, [r3, #4]
 800106e:	e7eb      	b.n	8001048 <_malloc_r+0xa8>
 8001070:	4623      	mov	r3, r4
 8001072:	6864      	ldr	r4, [r4, #4]
 8001074:	e7ae      	b.n	8000fd4 <_malloc_r+0x34>
 8001076:	463c      	mov	r4, r7
 8001078:	687f      	ldr	r7, [r7, #4]
 800107a:	e7b6      	b.n	8000fea <_malloc_r+0x4a>
 800107c:	461a      	mov	r2, r3
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	42a3      	cmp	r3, r4
 8001082:	d1fb      	bne.n	800107c <_malloc_r+0xdc>
 8001084:	2300      	movs	r3, #0
 8001086:	6053      	str	r3, [r2, #4]
 8001088:	e7de      	b.n	8001048 <_malloc_r+0xa8>
 800108a:	230c      	movs	r3, #12
 800108c:	6033      	str	r3, [r6, #0]
 800108e:	4630      	mov	r0, r6
 8001090:	f000 f80c 	bl	80010ac <__malloc_unlock>
 8001094:	e794      	b.n	8000fc0 <_malloc_r+0x20>
 8001096:	6005      	str	r5, [r0, #0]
 8001098:	e7d6      	b.n	8001048 <_malloc_r+0xa8>
 800109a:	bf00      	nop
 800109c:	200001d8 	.word	0x200001d8

080010a0 <__malloc_lock>:
 80010a0:	4801      	ldr	r0, [pc, #4]	@ (80010a8 <__malloc_lock+0x8>)
 80010a2:	f7ff bf0f 	b.w	8000ec4 <__retarget_lock_acquire_recursive>
 80010a6:	bf00      	nop
 80010a8:	200001d0 	.word	0x200001d0

080010ac <__malloc_unlock>:
 80010ac:	4801      	ldr	r0, [pc, #4]	@ (80010b4 <__malloc_unlock+0x8>)
 80010ae:	f7ff bf0a 	b.w	8000ec6 <__retarget_lock_release_recursive>
 80010b2:	bf00      	nop
 80010b4:	200001d0 	.word	0x200001d0

080010b8 <__ssputs_r>:
 80010b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010bc:	688e      	ldr	r6, [r1, #8]
 80010be:	461f      	mov	r7, r3
 80010c0:	42be      	cmp	r6, r7
 80010c2:	680b      	ldr	r3, [r1, #0]
 80010c4:	4682      	mov	sl, r0
 80010c6:	460c      	mov	r4, r1
 80010c8:	4690      	mov	r8, r2
 80010ca:	d82d      	bhi.n	8001128 <__ssputs_r+0x70>
 80010cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80010d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80010d4:	d026      	beq.n	8001124 <__ssputs_r+0x6c>
 80010d6:	6965      	ldr	r5, [r4, #20]
 80010d8:	6909      	ldr	r1, [r1, #16]
 80010da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80010de:	eba3 0901 	sub.w	r9, r3, r1
 80010e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80010e6:	1c7b      	adds	r3, r7, #1
 80010e8:	444b      	add	r3, r9
 80010ea:	106d      	asrs	r5, r5, #1
 80010ec:	429d      	cmp	r5, r3
 80010ee:	bf38      	it	cc
 80010f0:	461d      	movcc	r5, r3
 80010f2:	0553      	lsls	r3, r2, #21
 80010f4:	d527      	bpl.n	8001146 <__ssputs_r+0x8e>
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff ff52 	bl	8000fa0 <_malloc_r>
 80010fc:	4606      	mov	r6, r0
 80010fe:	b360      	cbz	r0, 800115a <__ssputs_r+0xa2>
 8001100:	6921      	ldr	r1, [r4, #16]
 8001102:	464a      	mov	r2, r9
 8001104:	f000 fae6 	bl	80016d4 <memcpy>
 8001108:	89a3      	ldrh	r3, [r4, #12]
 800110a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800110e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001112:	81a3      	strh	r3, [r4, #12]
 8001114:	6126      	str	r6, [r4, #16]
 8001116:	6165      	str	r5, [r4, #20]
 8001118:	444e      	add	r6, r9
 800111a:	eba5 0509 	sub.w	r5, r5, r9
 800111e:	6026      	str	r6, [r4, #0]
 8001120:	60a5      	str	r5, [r4, #8]
 8001122:	463e      	mov	r6, r7
 8001124:	42be      	cmp	r6, r7
 8001126:	d900      	bls.n	800112a <__ssputs_r+0x72>
 8001128:	463e      	mov	r6, r7
 800112a:	6820      	ldr	r0, [r4, #0]
 800112c:	4632      	mov	r2, r6
 800112e:	4641      	mov	r1, r8
 8001130:	f000 faa6 	bl	8001680 <memmove>
 8001134:	68a3      	ldr	r3, [r4, #8]
 8001136:	1b9b      	subs	r3, r3, r6
 8001138:	60a3      	str	r3, [r4, #8]
 800113a:	6823      	ldr	r3, [r4, #0]
 800113c:	4433      	add	r3, r6
 800113e:	6023      	str	r3, [r4, #0]
 8001140:	2000      	movs	r0, #0
 8001142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001146:	462a      	mov	r2, r5
 8001148:	f000 fad2 	bl	80016f0 <_realloc_r>
 800114c:	4606      	mov	r6, r0
 800114e:	2800      	cmp	r0, #0
 8001150:	d1e0      	bne.n	8001114 <__ssputs_r+0x5c>
 8001152:	6921      	ldr	r1, [r4, #16]
 8001154:	4650      	mov	r0, sl
 8001156:	f7ff feb7 	bl	8000ec8 <_free_r>
 800115a:	230c      	movs	r3, #12
 800115c:	f8ca 3000 	str.w	r3, [sl]
 8001160:	89a3      	ldrh	r3, [r4, #12]
 8001162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001166:	81a3      	strh	r3, [r4, #12]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	e7e9      	b.n	8001142 <__ssputs_r+0x8a>
	...

08001170 <_svfiprintf_r>:
 8001170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001174:	4698      	mov	r8, r3
 8001176:	898b      	ldrh	r3, [r1, #12]
 8001178:	061b      	lsls	r3, r3, #24
 800117a:	b09d      	sub	sp, #116	@ 0x74
 800117c:	4607      	mov	r7, r0
 800117e:	460d      	mov	r5, r1
 8001180:	4614      	mov	r4, r2
 8001182:	d510      	bpl.n	80011a6 <_svfiprintf_r+0x36>
 8001184:	690b      	ldr	r3, [r1, #16]
 8001186:	b973      	cbnz	r3, 80011a6 <_svfiprintf_r+0x36>
 8001188:	2140      	movs	r1, #64	@ 0x40
 800118a:	f7ff ff09 	bl	8000fa0 <_malloc_r>
 800118e:	6028      	str	r0, [r5, #0]
 8001190:	6128      	str	r0, [r5, #16]
 8001192:	b930      	cbnz	r0, 80011a2 <_svfiprintf_r+0x32>
 8001194:	230c      	movs	r3, #12
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	b01d      	add	sp, #116	@ 0x74
 800119e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011a2:	2340      	movs	r3, #64	@ 0x40
 80011a4:	616b      	str	r3, [r5, #20]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80011aa:	2320      	movs	r3, #32
 80011ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80011b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80011b4:	2330      	movs	r3, #48	@ 0x30
 80011b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001354 <_svfiprintf_r+0x1e4>
 80011ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80011be:	f04f 0901 	mov.w	r9, #1
 80011c2:	4623      	mov	r3, r4
 80011c4:	469a      	mov	sl, r3
 80011c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011ca:	b10a      	cbz	r2, 80011d0 <_svfiprintf_r+0x60>
 80011cc:	2a25      	cmp	r2, #37	@ 0x25
 80011ce:	d1f9      	bne.n	80011c4 <_svfiprintf_r+0x54>
 80011d0:	ebba 0b04 	subs.w	fp, sl, r4
 80011d4:	d00b      	beq.n	80011ee <_svfiprintf_r+0x7e>
 80011d6:	465b      	mov	r3, fp
 80011d8:	4622      	mov	r2, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	4638      	mov	r0, r7
 80011de:	f7ff ff6b 	bl	80010b8 <__ssputs_r>
 80011e2:	3001      	adds	r0, #1
 80011e4:	f000 80a7 	beq.w	8001336 <_svfiprintf_r+0x1c6>
 80011e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80011ea:	445a      	add	r2, fp
 80011ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80011ee:	f89a 3000 	ldrb.w	r3, [sl]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 809f 	beq.w	8001336 <_svfiprintf_r+0x1c6>
 80011f8:	2300      	movs	r3, #0
 80011fa:	f04f 32ff 	mov.w	r2, #4294967295
 80011fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001202:	f10a 0a01 	add.w	sl, sl, #1
 8001206:	9304      	str	r3, [sp, #16]
 8001208:	9307      	str	r3, [sp, #28]
 800120a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800120e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001210:	4654      	mov	r4, sl
 8001212:	2205      	movs	r2, #5
 8001214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001218:	484e      	ldr	r0, [pc, #312]	@ (8001354 <_svfiprintf_r+0x1e4>)
 800121a:	f7fe ffe1 	bl	80001e0 <memchr>
 800121e:	9a04      	ldr	r2, [sp, #16]
 8001220:	b9d8      	cbnz	r0, 800125a <_svfiprintf_r+0xea>
 8001222:	06d0      	lsls	r0, r2, #27
 8001224:	bf44      	itt	mi
 8001226:	2320      	movmi	r3, #32
 8001228:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800122c:	0711      	lsls	r1, r2, #28
 800122e:	bf44      	itt	mi
 8001230:	232b      	movmi	r3, #43	@ 0x2b
 8001232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001236:	f89a 3000 	ldrb.w	r3, [sl]
 800123a:	2b2a      	cmp	r3, #42	@ 0x2a
 800123c:	d015      	beq.n	800126a <_svfiprintf_r+0xfa>
 800123e:	9a07      	ldr	r2, [sp, #28]
 8001240:	4654      	mov	r4, sl
 8001242:	2000      	movs	r0, #0
 8001244:	f04f 0c0a 	mov.w	ip, #10
 8001248:	4621      	mov	r1, r4
 800124a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800124e:	3b30      	subs	r3, #48	@ 0x30
 8001250:	2b09      	cmp	r3, #9
 8001252:	d94b      	bls.n	80012ec <_svfiprintf_r+0x17c>
 8001254:	b1b0      	cbz	r0, 8001284 <_svfiprintf_r+0x114>
 8001256:	9207      	str	r2, [sp, #28]
 8001258:	e014      	b.n	8001284 <_svfiprintf_r+0x114>
 800125a:	eba0 0308 	sub.w	r3, r0, r8
 800125e:	fa09 f303 	lsl.w	r3, r9, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	9304      	str	r3, [sp, #16]
 8001266:	46a2      	mov	sl, r4
 8001268:	e7d2      	b.n	8001210 <_svfiprintf_r+0xa0>
 800126a:	9b03      	ldr	r3, [sp, #12]
 800126c:	1d19      	adds	r1, r3, #4
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	9103      	str	r1, [sp, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	bfbb      	ittet	lt
 8001276:	425b      	neglt	r3, r3
 8001278:	f042 0202 	orrlt.w	r2, r2, #2
 800127c:	9307      	strge	r3, [sp, #28]
 800127e:	9307      	strlt	r3, [sp, #28]
 8001280:	bfb8      	it	lt
 8001282:	9204      	strlt	r2, [sp, #16]
 8001284:	7823      	ldrb	r3, [r4, #0]
 8001286:	2b2e      	cmp	r3, #46	@ 0x2e
 8001288:	d10a      	bne.n	80012a0 <_svfiprintf_r+0x130>
 800128a:	7863      	ldrb	r3, [r4, #1]
 800128c:	2b2a      	cmp	r3, #42	@ 0x2a
 800128e:	d132      	bne.n	80012f6 <_svfiprintf_r+0x186>
 8001290:	9b03      	ldr	r3, [sp, #12]
 8001292:	1d1a      	adds	r2, r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	9203      	str	r2, [sp, #12]
 8001298:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800129c:	3402      	adds	r4, #2
 800129e:	9305      	str	r3, [sp, #20]
 80012a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001358 <_svfiprintf_r+0x1e8>
 80012a4:	7821      	ldrb	r1, [r4, #0]
 80012a6:	2203      	movs	r2, #3
 80012a8:	4650      	mov	r0, sl
 80012aa:	f7fe ff99 	bl	80001e0 <memchr>
 80012ae:	b138      	cbz	r0, 80012c0 <_svfiprintf_r+0x150>
 80012b0:	9b04      	ldr	r3, [sp, #16]
 80012b2:	eba0 000a 	sub.w	r0, r0, sl
 80012b6:	2240      	movs	r2, #64	@ 0x40
 80012b8:	4082      	lsls	r2, r0
 80012ba:	4313      	orrs	r3, r2
 80012bc:	3401      	adds	r4, #1
 80012be:	9304      	str	r3, [sp, #16]
 80012c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012c4:	4825      	ldr	r0, [pc, #148]	@ (800135c <_svfiprintf_r+0x1ec>)
 80012c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80012ca:	2206      	movs	r2, #6
 80012cc:	f7fe ff88 	bl	80001e0 <memchr>
 80012d0:	2800      	cmp	r0, #0
 80012d2:	d036      	beq.n	8001342 <_svfiprintf_r+0x1d2>
 80012d4:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <_svfiprintf_r+0x1f0>)
 80012d6:	bb1b      	cbnz	r3, 8001320 <_svfiprintf_r+0x1b0>
 80012d8:	9b03      	ldr	r3, [sp, #12]
 80012da:	3307      	adds	r3, #7
 80012dc:	f023 0307 	bic.w	r3, r3, #7
 80012e0:	3308      	adds	r3, #8
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80012e6:	4433      	add	r3, r6
 80012e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80012ea:	e76a      	b.n	80011c2 <_svfiprintf_r+0x52>
 80012ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80012f0:	460c      	mov	r4, r1
 80012f2:	2001      	movs	r0, #1
 80012f4:	e7a8      	b.n	8001248 <_svfiprintf_r+0xd8>
 80012f6:	2300      	movs	r3, #0
 80012f8:	3401      	adds	r4, #1
 80012fa:	9305      	str	r3, [sp, #20]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 0c0a 	mov.w	ip, #10
 8001302:	4620      	mov	r0, r4
 8001304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001308:	3a30      	subs	r2, #48	@ 0x30
 800130a:	2a09      	cmp	r2, #9
 800130c:	d903      	bls.n	8001316 <_svfiprintf_r+0x1a6>
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0c6      	beq.n	80012a0 <_svfiprintf_r+0x130>
 8001312:	9105      	str	r1, [sp, #20]
 8001314:	e7c4      	b.n	80012a0 <_svfiprintf_r+0x130>
 8001316:	fb0c 2101 	mla	r1, ip, r1, r2
 800131a:	4604      	mov	r4, r0
 800131c:	2301      	movs	r3, #1
 800131e:	e7f0      	b.n	8001302 <_svfiprintf_r+0x192>
 8001320:	ab03      	add	r3, sp, #12
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	462a      	mov	r2, r5
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <_svfiprintf_r+0x1f4>)
 8001328:	a904      	add	r1, sp, #16
 800132a:	4638      	mov	r0, r7
 800132c:	f3af 8000 	nop.w
 8001330:	1c42      	adds	r2, r0, #1
 8001332:	4606      	mov	r6, r0
 8001334:	d1d6      	bne.n	80012e4 <_svfiprintf_r+0x174>
 8001336:	89ab      	ldrh	r3, [r5, #12]
 8001338:	065b      	lsls	r3, r3, #25
 800133a:	f53f af2d 	bmi.w	8001198 <_svfiprintf_r+0x28>
 800133e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001340:	e72c      	b.n	800119c <_svfiprintf_r+0x2c>
 8001342:	ab03      	add	r3, sp, #12
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	462a      	mov	r2, r5
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <_svfiprintf_r+0x1f4>)
 800134a:	a904      	add	r1, sp, #16
 800134c:	4638      	mov	r0, r7
 800134e:	f000 f879 	bl	8001444 <_printf_i>
 8001352:	e7ed      	b.n	8001330 <_svfiprintf_r+0x1c0>
 8001354:	0800179f 	.word	0x0800179f
 8001358:	080017a5 	.word	0x080017a5
 800135c:	080017a9 	.word	0x080017a9
 8001360:	00000000 	.word	0x00000000
 8001364:	080010b9 	.word	0x080010b9

08001368 <_printf_common>:
 8001368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800136c:	4616      	mov	r6, r2
 800136e:	4698      	mov	r8, r3
 8001370:	688a      	ldr	r2, [r1, #8]
 8001372:	690b      	ldr	r3, [r1, #16]
 8001374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001378:	4293      	cmp	r3, r2
 800137a:	bfb8      	it	lt
 800137c:	4613      	movlt	r3, r2
 800137e:	6033      	str	r3, [r6, #0]
 8001380:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001384:	4607      	mov	r7, r0
 8001386:	460c      	mov	r4, r1
 8001388:	b10a      	cbz	r2, 800138e <_printf_common+0x26>
 800138a:	3301      	adds	r3, #1
 800138c:	6033      	str	r3, [r6, #0]
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	0699      	lsls	r1, r3, #26
 8001392:	bf42      	ittt	mi
 8001394:	6833      	ldrmi	r3, [r6, #0]
 8001396:	3302      	addmi	r3, #2
 8001398:	6033      	strmi	r3, [r6, #0]
 800139a:	6825      	ldr	r5, [r4, #0]
 800139c:	f015 0506 	ands.w	r5, r5, #6
 80013a0:	d106      	bne.n	80013b0 <_printf_common+0x48>
 80013a2:	f104 0a19 	add.w	sl, r4, #25
 80013a6:	68e3      	ldr	r3, [r4, #12]
 80013a8:	6832      	ldr	r2, [r6, #0]
 80013aa:	1a9b      	subs	r3, r3, r2
 80013ac:	42ab      	cmp	r3, r5
 80013ae:	dc26      	bgt.n	80013fe <_printf_common+0x96>
 80013b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80013b4:	6822      	ldr	r2, [r4, #0]
 80013b6:	3b00      	subs	r3, #0
 80013b8:	bf18      	it	ne
 80013ba:	2301      	movne	r3, #1
 80013bc:	0692      	lsls	r2, r2, #26
 80013be:	d42b      	bmi.n	8001418 <_printf_common+0xb0>
 80013c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80013c4:	4641      	mov	r1, r8
 80013c6:	4638      	mov	r0, r7
 80013c8:	47c8      	blx	r9
 80013ca:	3001      	adds	r0, #1
 80013cc:	d01e      	beq.n	800140c <_printf_common+0xa4>
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	6922      	ldr	r2, [r4, #16]
 80013d2:	f003 0306 	and.w	r3, r3, #6
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf02      	ittt	eq
 80013da:	68e5      	ldreq	r5, [r4, #12]
 80013dc:	6833      	ldreq	r3, [r6, #0]
 80013de:	1aed      	subeq	r5, r5, r3
 80013e0:	68a3      	ldr	r3, [r4, #8]
 80013e2:	bf0c      	ite	eq
 80013e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013e8:	2500      	movne	r5, #0
 80013ea:	4293      	cmp	r3, r2
 80013ec:	bfc4      	itt	gt
 80013ee:	1a9b      	subgt	r3, r3, r2
 80013f0:	18ed      	addgt	r5, r5, r3
 80013f2:	2600      	movs	r6, #0
 80013f4:	341a      	adds	r4, #26
 80013f6:	42b5      	cmp	r5, r6
 80013f8:	d11a      	bne.n	8001430 <_printf_common+0xc8>
 80013fa:	2000      	movs	r0, #0
 80013fc:	e008      	b.n	8001410 <_printf_common+0xa8>
 80013fe:	2301      	movs	r3, #1
 8001400:	4652      	mov	r2, sl
 8001402:	4641      	mov	r1, r8
 8001404:	4638      	mov	r0, r7
 8001406:	47c8      	blx	r9
 8001408:	3001      	adds	r0, #1
 800140a:	d103      	bne.n	8001414 <_printf_common+0xac>
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001414:	3501      	adds	r5, #1
 8001416:	e7c6      	b.n	80013a6 <_printf_common+0x3e>
 8001418:	18e1      	adds	r1, r4, r3
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	2030      	movs	r0, #48	@ 0x30
 800141e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001422:	4422      	add	r2, r4
 8001424:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800142c:	3302      	adds	r3, #2
 800142e:	e7c7      	b.n	80013c0 <_printf_common+0x58>
 8001430:	2301      	movs	r3, #1
 8001432:	4622      	mov	r2, r4
 8001434:	4641      	mov	r1, r8
 8001436:	4638      	mov	r0, r7
 8001438:	47c8      	blx	r9
 800143a:	3001      	adds	r0, #1
 800143c:	d0e6      	beq.n	800140c <_printf_common+0xa4>
 800143e:	3601      	adds	r6, #1
 8001440:	e7d9      	b.n	80013f6 <_printf_common+0x8e>
	...

08001444 <_printf_i>:
 8001444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001448:	7e0f      	ldrb	r7, [r1, #24]
 800144a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800144c:	2f78      	cmp	r7, #120	@ 0x78
 800144e:	4691      	mov	r9, r2
 8001450:	4680      	mov	r8, r0
 8001452:	460c      	mov	r4, r1
 8001454:	469a      	mov	sl, r3
 8001456:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800145a:	d807      	bhi.n	800146c <_printf_i+0x28>
 800145c:	2f62      	cmp	r7, #98	@ 0x62
 800145e:	d80a      	bhi.n	8001476 <_printf_i+0x32>
 8001460:	2f00      	cmp	r7, #0
 8001462:	f000 80d1 	beq.w	8001608 <_printf_i+0x1c4>
 8001466:	2f58      	cmp	r7, #88	@ 0x58
 8001468:	f000 80b8 	beq.w	80015dc <_printf_i+0x198>
 800146c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001470:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001474:	e03a      	b.n	80014ec <_printf_i+0xa8>
 8001476:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800147a:	2b15      	cmp	r3, #21
 800147c:	d8f6      	bhi.n	800146c <_printf_i+0x28>
 800147e:	a101      	add	r1, pc, #4	@ (adr r1, 8001484 <_printf_i+0x40>)
 8001480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001484:	080014dd 	.word	0x080014dd
 8001488:	080014f1 	.word	0x080014f1
 800148c:	0800146d 	.word	0x0800146d
 8001490:	0800146d 	.word	0x0800146d
 8001494:	0800146d 	.word	0x0800146d
 8001498:	0800146d 	.word	0x0800146d
 800149c:	080014f1 	.word	0x080014f1
 80014a0:	0800146d 	.word	0x0800146d
 80014a4:	0800146d 	.word	0x0800146d
 80014a8:	0800146d 	.word	0x0800146d
 80014ac:	0800146d 	.word	0x0800146d
 80014b0:	080015ef 	.word	0x080015ef
 80014b4:	0800151b 	.word	0x0800151b
 80014b8:	080015a9 	.word	0x080015a9
 80014bc:	0800146d 	.word	0x0800146d
 80014c0:	0800146d 	.word	0x0800146d
 80014c4:	08001611 	.word	0x08001611
 80014c8:	0800146d 	.word	0x0800146d
 80014cc:	0800151b 	.word	0x0800151b
 80014d0:	0800146d 	.word	0x0800146d
 80014d4:	0800146d 	.word	0x0800146d
 80014d8:	080015b1 	.word	0x080015b1
 80014dc:	6833      	ldr	r3, [r6, #0]
 80014de:	1d1a      	adds	r2, r3, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6032      	str	r2, [r6, #0]
 80014e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80014ec:	2301      	movs	r3, #1
 80014ee:	e09c      	b.n	800162a <_printf_i+0x1e6>
 80014f0:	6833      	ldr	r3, [r6, #0]
 80014f2:	6820      	ldr	r0, [r4, #0]
 80014f4:	1d19      	adds	r1, r3, #4
 80014f6:	6031      	str	r1, [r6, #0]
 80014f8:	0606      	lsls	r6, r0, #24
 80014fa:	d501      	bpl.n	8001500 <_printf_i+0xbc>
 80014fc:	681d      	ldr	r5, [r3, #0]
 80014fe:	e003      	b.n	8001508 <_printf_i+0xc4>
 8001500:	0645      	lsls	r5, r0, #25
 8001502:	d5fb      	bpl.n	80014fc <_printf_i+0xb8>
 8001504:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001508:	2d00      	cmp	r5, #0
 800150a:	da03      	bge.n	8001514 <_printf_i+0xd0>
 800150c:	232d      	movs	r3, #45	@ 0x2d
 800150e:	426d      	negs	r5, r5
 8001510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001514:	4858      	ldr	r0, [pc, #352]	@ (8001678 <_printf_i+0x234>)
 8001516:	230a      	movs	r3, #10
 8001518:	e011      	b.n	800153e <_printf_i+0xfa>
 800151a:	6821      	ldr	r1, [r4, #0]
 800151c:	6833      	ldr	r3, [r6, #0]
 800151e:	0608      	lsls	r0, r1, #24
 8001520:	f853 5b04 	ldr.w	r5, [r3], #4
 8001524:	d402      	bmi.n	800152c <_printf_i+0xe8>
 8001526:	0649      	lsls	r1, r1, #25
 8001528:	bf48      	it	mi
 800152a:	b2ad      	uxthmi	r5, r5
 800152c:	2f6f      	cmp	r7, #111	@ 0x6f
 800152e:	4852      	ldr	r0, [pc, #328]	@ (8001678 <_printf_i+0x234>)
 8001530:	6033      	str	r3, [r6, #0]
 8001532:	bf14      	ite	ne
 8001534:	230a      	movne	r3, #10
 8001536:	2308      	moveq	r3, #8
 8001538:	2100      	movs	r1, #0
 800153a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800153e:	6866      	ldr	r6, [r4, #4]
 8001540:	60a6      	str	r6, [r4, #8]
 8001542:	2e00      	cmp	r6, #0
 8001544:	db05      	blt.n	8001552 <_printf_i+0x10e>
 8001546:	6821      	ldr	r1, [r4, #0]
 8001548:	432e      	orrs	r6, r5
 800154a:	f021 0104 	bic.w	r1, r1, #4
 800154e:	6021      	str	r1, [r4, #0]
 8001550:	d04b      	beq.n	80015ea <_printf_i+0x1a6>
 8001552:	4616      	mov	r6, r2
 8001554:	fbb5 f1f3 	udiv	r1, r5, r3
 8001558:	fb03 5711 	mls	r7, r3, r1, r5
 800155c:	5dc7      	ldrb	r7, [r0, r7]
 800155e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001562:	462f      	mov	r7, r5
 8001564:	42bb      	cmp	r3, r7
 8001566:	460d      	mov	r5, r1
 8001568:	d9f4      	bls.n	8001554 <_printf_i+0x110>
 800156a:	2b08      	cmp	r3, #8
 800156c:	d10b      	bne.n	8001586 <_printf_i+0x142>
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	07df      	lsls	r7, r3, #31
 8001572:	d508      	bpl.n	8001586 <_printf_i+0x142>
 8001574:	6923      	ldr	r3, [r4, #16]
 8001576:	6861      	ldr	r1, [r4, #4]
 8001578:	4299      	cmp	r1, r3
 800157a:	bfde      	ittt	le
 800157c:	2330      	movle	r3, #48	@ 0x30
 800157e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001582:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001586:	1b92      	subs	r2, r2, r6
 8001588:	6122      	str	r2, [r4, #16]
 800158a:	f8cd a000 	str.w	sl, [sp]
 800158e:	464b      	mov	r3, r9
 8001590:	aa03      	add	r2, sp, #12
 8001592:	4621      	mov	r1, r4
 8001594:	4640      	mov	r0, r8
 8001596:	f7ff fee7 	bl	8001368 <_printf_common>
 800159a:	3001      	adds	r0, #1
 800159c:	d14a      	bne.n	8001634 <_printf_i+0x1f0>
 800159e:	f04f 30ff 	mov.w	r0, #4294967295
 80015a2:	b004      	add	sp, #16
 80015a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	f043 0320 	orr.w	r3, r3, #32
 80015ae:	6023      	str	r3, [r4, #0]
 80015b0:	4832      	ldr	r0, [pc, #200]	@ (800167c <_printf_i+0x238>)
 80015b2:	2778      	movs	r7, #120	@ 0x78
 80015b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	6831      	ldr	r1, [r6, #0]
 80015bc:	061f      	lsls	r7, r3, #24
 80015be:	f851 5b04 	ldr.w	r5, [r1], #4
 80015c2:	d402      	bmi.n	80015ca <_printf_i+0x186>
 80015c4:	065f      	lsls	r7, r3, #25
 80015c6:	bf48      	it	mi
 80015c8:	b2ad      	uxthmi	r5, r5
 80015ca:	6031      	str	r1, [r6, #0]
 80015cc:	07d9      	lsls	r1, r3, #31
 80015ce:	bf44      	itt	mi
 80015d0:	f043 0320 	orrmi.w	r3, r3, #32
 80015d4:	6023      	strmi	r3, [r4, #0]
 80015d6:	b11d      	cbz	r5, 80015e0 <_printf_i+0x19c>
 80015d8:	2310      	movs	r3, #16
 80015da:	e7ad      	b.n	8001538 <_printf_i+0xf4>
 80015dc:	4826      	ldr	r0, [pc, #152]	@ (8001678 <_printf_i+0x234>)
 80015de:	e7e9      	b.n	80015b4 <_printf_i+0x170>
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	f023 0320 	bic.w	r3, r3, #32
 80015e6:	6023      	str	r3, [r4, #0]
 80015e8:	e7f6      	b.n	80015d8 <_printf_i+0x194>
 80015ea:	4616      	mov	r6, r2
 80015ec:	e7bd      	b.n	800156a <_printf_i+0x126>
 80015ee:	6833      	ldr	r3, [r6, #0]
 80015f0:	6825      	ldr	r5, [r4, #0]
 80015f2:	6961      	ldr	r1, [r4, #20]
 80015f4:	1d18      	adds	r0, r3, #4
 80015f6:	6030      	str	r0, [r6, #0]
 80015f8:	062e      	lsls	r6, r5, #24
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	d501      	bpl.n	8001602 <_printf_i+0x1be>
 80015fe:	6019      	str	r1, [r3, #0]
 8001600:	e002      	b.n	8001608 <_printf_i+0x1c4>
 8001602:	0668      	lsls	r0, r5, #25
 8001604:	d5fb      	bpl.n	80015fe <_printf_i+0x1ba>
 8001606:	8019      	strh	r1, [r3, #0]
 8001608:	2300      	movs	r3, #0
 800160a:	6123      	str	r3, [r4, #16]
 800160c:	4616      	mov	r6, r2
 800160e:	e7bc      	b.n	800158a <_printf_i+0x146>
 8001610:	6833      	ldr	r3, [r6, #0]
 8001612:	1d1a      	adds	r2, r3, #4
 8001614:	6032      	str	r2, [r6, #0]
 8001616:	681e      	ldr	r6, [r3, #0]
 8001618:	6862      	ldr	r2, [r4, #4]
 800161a:	2100      	movs	r1, #0
 800161c:	4630      	mov	r0, r6
 800161e:	f7fe fddf 	bl	80001e0 <memchr>
 8001622:	b108      	cbz	r0, 8001628 <_printf_i+0x1e4>
 8001624:	1b80      	subs	r0, r0, r6
 8001626:	6060      	str	r0, [r4, #4]
 8001628:	6863      	ldr	r3, [r4, #4]
 800162a:	6123      	str	r3, [r4, #16]
 800162c:	2300      	movs	r3, #0
 800162e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001632:	e7aa      	b.n	800158a <_printf_i+0x146>
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	4632      	mov	r2, r6
 8001638:	4649      	mov	r1, r9
 800163a:	4640      	mov	r0, r8
 800163c:	47d0      	blx	sl
 800163e:	3001      	adds	r0, #1
 8001640:	d0ad      	beq.n	800159e <_printf_i+0x15a>
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	079b      	lsls	r3, r3, #30
 8001646:	d413      	bmi.n	8001670 <_printf_i+0x22c>
 8001648:	68e0      	ldr	r0, [r4, #12]
 800164a:	9b03      	ldr	r3, [sp, #12]
 800164c:	4298      	cmp	r0, r3
 800164e:	bfb8      	it	lt
 8001650:	4618      	movlt	r0, r3
 8001652:	e7a6      	b.n	80015a2 <_printf_i+0x15e>
 8001654:	2301      	movs	r3, #1
 8001656:	4632      	mov	r2, r6
 8001658:	4649      	mov	r1, r9
 800165a:	4640      	mov	r0, r8
 800165c:	47d0      	blx	sl
 800165e:	3001      	adds	r0, #1
 8001660:	d09d      	beq.n	800159e <_printf_i+0x15a>
 8001662:	3501      	adds	r5, #1
 8001664:	68e3      	ldr	r3, [r4, #12]
 8001666:	9903      	ldr	r1, [sp, #12]
 8001668:	1a5b      	subs	r3, r3, r1
 800166a:	42ab      	cmp	r3, r5
 800166c:	dcf2      	bgt.n	8001654 <_printf_i+0x210>
 800166e:	e7eb      	b.n	8001648 <_printf_i+0x204>
 8001670:	2500      	movs	r5, #0
 8001672:	f104 0619 	add.w	r6, r4, #25
 8001676:	e7f5      	b.n	8001664 <_printf_i+0x220>
 8001678:	080017b0 	.word	0x080017b0
 800167c:	080017c1 	.word	0x080017c1

08001680 <memmove>:
 8001680:	4288      	cmp	r0, r1
 8001682:	b510      	push	{r4, lr}
 8001684:	eb01 0402 	add.w	r4, r1, r2
 8001688:	d902      	bls.n	8001690 <memmove+0x10>
 800168a:	4284      	cmp	r4, r0
 800168c:	4623      	mov	r3, r4
 800168e:	d807      	bhi.n	80016a0 <memmove+0x20>
 8001690:	1e43      	subs	r3, r0, #1
 8001692:	42a1      	cmp	r1, r4
 8001694:	d008      	beq.n	80016a8 <memmove+0x28>
 8001696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800169a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800169e:	e7f8      	b.n	8001692 <memmove+0x12>
 80016a0:	4402      	add	r2, r0
 80016a2:	4601      	mov	r1, r0
 80016a4:	428a      	cmp	r2, r1
 80016a6:	d100      	bne.n	80016aa <memmove+0x2a>
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80016ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80016b2:	e7f7      	b.n	80016a4 <memmove+0x24>

080016b4 <_sbrk_r>:
 80016b4:	b538      	push	{r3, r4, r5, lr}
 80016b6:	4d06      	ldr	r5, [pc, #24]	@ (80016d0 <_sbrk_r+0x1c>)
 80016b8:	2300      	movs	r3, #0
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	602b      	str	r3, [r5, #0]
 80016c0:	f7fe feb0 	bl	8000424 <_sbrk>
 80016c4:	1c43      	adds	r3, r0, #1
 80016c6:	d102      	bne.n	80016ce <_sbrk_r+0x1a>
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	b103      	cbz	r3, 80016ce <_sbrk_r+0x1a>
 80016cc:	6023      	str	r3, [r4, #0]
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
 80016d0:	200001cc 	.word	0x200001cc

080016d4 <memcpy>:
 80016d4:	440a      	add	r2, r1
 80016d6:	4291      	cmp	r1, r2
 80016d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80016dc:	d100      	bne.n	80016e0 <memcpy+0xc>
 80016de:	4770      	bx	lr
 80016e0:	b510      	push	{r4, lr}
 80016e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80016ea:	4291      	cmp	r1, r2
 80016ec:	d1f9      	bne.n	80016e2 <memcpy+0xe>
 80016ee:	bd10      	pop	{r4, pc}

080016f0 <_realloc_r>:
 80016f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016f4:	4607      	mov	r7, r0
 80016f6:	4614      	mov	r4, r2
 80016f8:	460d      	mov	r5, r1
 80016fa:	b921      	cbnz	r1, 8001706 <_realloc_r+0x16>
 80016fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001700:	4611      	mov	r1, r2
 8001702:	f7ff bc4d 	b.w	8000fa0 <_malloc_r>
 8001706:	b92a      	cbnz	r2, 8001714 <_realloc_r+0x24>
 8001708:	f7ff fbde 	bl	8000ec8 <_free_r>
 800170c:	4625      	mov	r5, r4
 800170e:	4628      	mov	r0, r5
 8001710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001714:	f000 f81a 	bl	800174c <_malloc_usable_size_r>
 8001718:	4284      	cmp	r4, r0
 800171a:	4606      	mov	r6, r0
 800171c:	d802      	bhi.n	8001724 <_realloc_r+0x34>
 800171e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001722:	d8f4      	bhi.n	800170e <_realloc_r+0x1e>
 8001724:	4621      	mov	r1, r4
 8001726:	4638      	mov	r0, r7
 8001728:	f7ff fc3a 	bl	8000fa0 <_malloc_r>
 800172c:	4680      	mov	r8, r0
 800172e:	b908      	cbnz	r0, 8001734 <_realloc_r+0x44>
 8001730:	4645      	mov	r5, r8
 8001732:	e7ec      	b.n	800170e <_realloc_r+0x1e>
 8001734:	42b4      	cmp	r4, r6
 8001736:	4622      	mov	r2, r4
 8001738:	4629      	mov	r1, r5
 800173a:	bf28      	it	cs
 800173c:	4632      	movcs	r2, r6
 800173e:	f7ff ffc9 	bl	80016d4 <memcpy>
 8001742:	4629      	mov	r1, r5
 8001744:	4638      	mov	r0, r7
 8001746:	f7ff fbbf 	bl	8000ec8 <_free_r>
 800174a:	e7f1      	b.n	8001730 <_realloc_r+0x40>

0800174c <_malloc_usable_size_r>:
 800174c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001750:	1f18      	subs	r0, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	bfbc      	itt	lt
 8001756:	580b      	ldrlt	r3, [r1, r0]
 8001758:	18c0      	addlt	r0, r0, r3
 800175a:	4770      	bx	lr

0800175c <_init>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	bf00      	nop
 8001760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001762:	bc08      	pop	{r3}
 8001764:	469e      	mov	lr, r3
 8001766:	4770      	bx	lr

08001768 <_fini>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr

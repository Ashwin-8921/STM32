
08_UART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fb0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800113c  0800113c  0000213c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001168  08001168  00002178  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001168  08001168  00002168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001170  08001178  00002178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001170  08001170  00002170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001174  08001174  00002174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00002178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002178  2**0
                  CONTENTS
 10 .bss          00000044  20000000  20000000  00003000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00003000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015d9  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000056a  00000000  00000000  0000377b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00003ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f8  00000000  00000000  00003e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026f9  00000000  00000000  00003f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d39  00000000  00000000  00006631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a0ab  00000000  00000000  0000836a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012415  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004b4  00000000  00000000  00012458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0001290c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001124 	.word	0x08001124

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08001124 	.word	0x08001124

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <USART2_Init>:

USART_Handle_t usart2_handle;
uint8_t rx_data;

void USART2_Init(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;
 80001e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000218 <USART2_Init+0x3c>)
 80001e2:	4a0e      	ldr	r2, [pc, #56]	@ (800021c <USART2_Init+0x40>)
 80001e4:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80001e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000218 <USART2_Init+0x3c>)
 80001e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001ec:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80001ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000218 <USART2_Init+0x3c>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80001f4:	4b08      	ldr	r3, [pc, #32]	@ (8000218 <USART2_Init+0x3c>)
 80001f6:	2202      	movs	r2, #2
 80001f8:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80001fa:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <USART2_Init+0x3c>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000200:	4b05      	ldr	r3, [pc, #20]	@ (8000218 <USART2_Init+0x3c>)
 8000202:	2200      	movs	r2, #0
 8000204:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000206:	4b04      	ldr	r3, [pc, #16]	@ (8000218 <USART2_Init+0x3c>)
 8000208:	2200      	movs	r2, #0
 800020a:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);
 800020c:	4802      	ldr	r0, [pc, #8]	@ (8000218 <USART2_Init+0x3c>)
 800020e:	f000 fc22 	bl	8000a56 <USART_Init>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	2000001c 	.word	0x2000001c
 800021c:	40004400 	.word	0x40004400

08000220 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart_gpios;
    usart_gpios.pGPIOx = GPIOA;
 8000226:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800022a:	607b      	str	r3, [r7, #4]
    usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800022c:	2302      	movs	r3, #2
 800022e:	727b      	strb	r3, [r7, #9]
    usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000230:	2300      	movs	r3, #0
 8000232:	733b      	strb	r3, [r7, #12]
    usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000234:	2301      	movs	r3, #1
 8000236:	72fb      	strb	r3, [r7, #11]
    usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000238:	2302      	movs	r3, #2
 800023a:	72bb      	strb	r3, [r7, #10]
    usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800023c:	2307      	movs	r3, #7
 800023e:	737b      	strb	r3, [r7, #13]

    usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000240:	2302      	movs	r3, #2
 8000242:	723b      	strb	r3, [r7, #8]
    GPIO_PeriClockControl(GPIOA, ENABLE);
 8000244:	2101      	movs	r1, #1
 8000246:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800024a:	f000 f8c7 	bl	80003dc <GPIO_PeriClockControl>
    GPIO_Init(&usart_gpios);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f991 	bl	8000578 <GPIO_Init>

    usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000256:	2303      	movs	r3, #3
 8000258:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart_gpios);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f98b 	bl	8000578 <GPIO_Init>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}

0800026a <GPIO_LedInit>:

void GPIO_LedInit(void)
{
 800026a:	b580      	push	{r7, lr}
 800026c:	b084      	sub	sp, #16
 800026e:	af00      	add	r7, sp, #0
    GPIO_Handle_t GpioLed;
    GpioLed.pGPIOx = GPIOA;
 8000270:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000274:	607b      	str	r3, [r7, #4]
    GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000276:	2305      	movs	r3, #5
 8000278:	723b      	strb	r3, [r7, #8]
    GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800027a:	2301      	movs	r3, #1
 800027c:	727b      	strb	r3, [r7, #9]
    GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800027e:	2302      	movs	r3, #2
 8000280:	72bb      	strb	r3, [r7, #10]
    GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000282:	2300      	movs	r3, #0
 8000284:	733b      	strb	r3, [r7, #12]
    GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000286:	2300      	movs	r3, #0
 8000288:	72fb      	strb	r3, [r7, #11]
    GPIO_Init(&GpioLed);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f973 	bl	8000578 <GPIO_Init>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <main>:

int main(void)
{
 800029c:	b5b0      	push	{r4, r5, r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
    USART2_GPIOInit();
 80002a2:	f7ff ffbd 	bl	8000220 <USART2_GPIOInit>
    USART2_Init();
 80002a6:	f7ff ff99 	bl	80001dc <USART2_Init>
    GPIO_LedInit();
 80002aa:	f7ff ffde 	bl	800026a <GPIO_LedInit>
    USART_IRQInterruptConfig(IRQ_NO_USART2, ENABLE);
 80002ae:	2101      	movs	r1, #1
 80002b0:	2026      	movs	r0, #38	@ 0x26
 80002b2:	f000 fcc3 	bl	8000c3c <USART_IRQInterruptConfig>
    USART_PeripheralControl(USART2, ENABLE);
 80002b6:	2101      	movs	r1, #1
 80002b8:	480f      	ldr	r0, [pc, #60]	@ (80002f8 <main+0x5c>)
 80002ba:	f000 fbb1 	bl	8000a20 <USART_PeripheralControl>

    char init_msg[] = "UART Initialized\r\n";
 80002be:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <main+0x60>)
 80002c0:	1d3c      	adds	r4, r7, #4
 80002c2:	461d      	mov	r5, r3
 80002c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c8:	682b      	ldr	r3, [r5, #0]
 80002ca:	461a      	mov	r2, r3
 80002cc:	8022      	strh	r2, [r4, #0]
 80002ce:	3402      	adds	r4, #2
 80002d0:	0c1b      	lsrs	r3, r3, #16
 80002d2:	7023      	strb	r3, [r4, #0]
    USART_SendData(&usart2_handle, (uint8_t*)init_msg, strlen(init_msg));
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff78 	bl	80001cc <strlen>
 80002dc:	4602      	mov	r2, r0
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	4807      	ldr	r0, [pc, #28]	@ (8000300 <main+0x64>)
 80002e4:	f000 fc34 	bl	8000b50 <USART_SendData>

    USART_ReceiveDataIT(&usart2_handle, &rx_data, 1);
 80002e8:	2201      	movs	r2, #1
 80002ea:	4906      	ldr	r1, [pc, #24]	@ (8000304 <main+0x68>)
 80002ec:	4804      	ldr	r0, [pc, #16]	@ (8000300 <main+0x64>)
 80002ee:	f000 fc7d 	bl	8000bec <USART_ReceiveDataIT>

    while (1) {}
 80002f2:	bf00      	nop
 80002f4:	e7fd      	b.n	80002f2 <main+0x56>
 80002f6:	bf00      	nop
 80002f8:	40004400 	.word	0x40004400
 80002fc:	0800113c 	.word	0x0800113c
 8000300:	2000001c 	.word	0x2000001c
 8000304:	20000040 	.word	0x20000040

08000308 <USART2_IRQHandler>:
}

void USART2_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    USART_IRQHandling(&usart2_handle);
 800030c:	4802      	ldr	r0, [pc, #8]	@ (8000318 <USART2_IRQHandler+0x10>)
 800030e:	f000 fd19 	bl	8000d44 <USART_IRQHandling>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	2000001c 	.word	0x2000001c

0800031c <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t ApEv)
{
 800031c:	b5b0      	push	{r4, r5, r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	70fb      	strb	r3, [r7, #3]
    if (ApEv == USART_EVENT_RX_CMPLT)
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d124      	bne.n	8000378 <USART_ApplicationEventCallback+0x5c>
    {
        char msg[] = "Interrupt generated\r\n";
 800032e:	4b14      	ldr	r3, [pc, #80]	@ (8000380 <USART_ApplicationEventCallback+0x64>)
 8000330:	f107 0408 	add.w	r4, r7, #8
 8000334:	461d      	mov	r5, r3
 8000336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800033a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800033e:	6020      	str	r0, [r4, #0]
 8000340:	3404      	adds	r4, #4
 8000342:	8021      	strh	r1, [r4, #0]
        USART_SendData(pUSARTHandle, (uint8_t*)msg, strlen(msg));
 8000344:	f107 0308 	add.w	r3, r7, #8
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff3f 	bl	80001cc <strlen>
 800034e:	4602      	mov	r2, r0
 8000350:	f107 0308 	add.w	r3, r7, #8
 8000354:	4619      	mov	r1, r3
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 fbfa 	bl	8000b50 <USART_SendData>

        if (rx_data == 'a')
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <USART_ApplicationEventCallback+0x68>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b61      	cmp	r3, #97	@ 0x61
 8000362:	d104      	bne.n	800036e <USART_ApplicationEventCallback+0x52>
            GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 8000364:	2105      	movs	r1, #5
 8000366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800036a:	f000 fabd 	bl	80008e8 <GPIO_ToggleOutputPin>

        USART_ReceiveDataIT(pUSARTHandle, &rx_data, 1);
 800036e:	2201      	movs	r2, #1
 8000370:	4904      	ldr	r1, [pc, #16]	@ (8000384 <USART_ApplicationEventCallback+0x68>)
 8000372:	6878      	ldr	r0, [r7, #4]
 8000374:	f000 fc3a 	bl	8000bec <USART_ReceiveDataIT>
    }
}
 8000378:	bf00      	nop
 800037a:	3720      	adds	r7, #32
 800037c:	46bd      	mov	sp, r7
 800037e:	bdb0      	pop	{r4, r5, r7, pc}
 8000380:	08001150 	.word	0x08001150
 8000384:	20000040 	.word	0x20000040

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	@ (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	@ (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	@ (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	@ (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	@ (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	@ (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 fe91 	bl	80010dc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80003ba:	f7ff ff6f 	bl	800029c <main>

080003be <LoopForever>:

LoopForever:
  b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08001178 	.word	0x08001178
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	20000044 	.word	0x20000044

080003d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_2_IRQHandler>
	...

080003dc <GPIO_PeriClockControl>:

/* Peripheral clock setup */

// This function enables or disables peripheral clock for the given GPIO port
void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx , uint8_t EnorDi)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70fb      	strb	r3, [r7, #3]


	if(EnorDi == ENABLE)
 80003e8:	78fb      	ldrb	r3, [r7, #3]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d157      	bne.n	800049e <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003f6:	4b58      	ldr	r3, [pc, #352]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	4a57      	ldr	r2, [pc, #348]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	64d3      	str	r3, [r2, #76]	@ 0x4c
				{
					GPIOH_PCLK_DI();
				}
	}

}
 8000402:	e0a3      	b.n	800054c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a55      	ldr	r2, [pc, #340]	@ (800055c <GPIO_PeriClockControl+0x180>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800040c:	4b52      	ldr	r3, [pc, #328]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 800040e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000410:	4a51      	ldr	r2, [pc, #324]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000418:	e098      	b.n	800054c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a50      	ldr	r2, [pc, #320]	@ (8000560 <GPIO_PeriClockControl+0x184>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000422:	4b4d      	ldr	r3, [pc, #308]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000426:	4a4c      	ldr	r2, [pc, #304]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800042e:	e08d      	b.n	800054c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a4c      	ldr	r2, [pc, #304]	@ (8000564 <GPIO_PeriClockControl+0x188>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000438:	4b47      	ldr	r3, [pc, #284]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 800043a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043c:	4a46      	ldr	r2, [pc, #280]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000444:	e082      	b.n	800054c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a47      	ldr	r2, [pc, #284]	@ (8000568 <GPIO_PeriClockControl+0x18c>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800044e:	4b42      	ldr	r3, [pc, #264]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	4a41      	ldr	r2, [pc, #260]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000454:	f043 0310 	orr.w	r3, r3, #16
 8000458:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800045a:	e077      	b.n	800054c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a43      	ldr	r2, [pc, #268]	@ (800056c <GPIO_PeriClockControl+0x190>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000464:	4b3c      	ldr	r3, [pc, #240]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000468:	4a3b      	ldr	r2, [pc, #236]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 800046a:	f043 0320 	orr.w	r3, r3, #32
 800046e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000470:	e06c      	b.n	800054c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a3e      	ldr	r2, [pc, #248]	@ (8000570 <GPIO_PeriClockControl+0x194>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800047a:	4b37      	ldr	r3, [pc, #220]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047e:	4a36      	ldr	r2, [pc, #216]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000484:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000486:	e061      	b.n	800054c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a3a      	ldr	r2, [pc, #232]	@ (8000574 <GPIO_PeriClockControl+0x198>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d15d      	bne.n	800054c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000490:	4b31      	ldr	r3, [pc, #196]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000494:	4a30      	ldr	r2, [pc, #192]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800049a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800049c:	e056      	b.n	800054c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 80004a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 80004ac:	f023 0301 	bic.w	r3, r3, #1
 80004b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004b2:	e04b      	b.n	800054c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOB)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a29      	ldr	r2, [pc, #164]	@ (800055c <GPIO_PeriClockControl+0x180>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80004bc:	4b26      	ldr	r3, [pc, #152]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 80004be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c0:	4a25      	ldr	r2, [pc, #148]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 80004c2:	f023 0302 	bic.w	r3, r3, #2
 80004c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004c8:	e040      	b.n	800054c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOC)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a24      	ldr	r2, [pc, #144]	@ (8000560 <GPIO_PeriClockControl+0x184>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80004d2:	4b21      	ldr	r3, [pc, #132]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d6:	4a20      	ldr	r2, [pc, #128]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 80004d8:	f023 0304 	bic.w	r3, r3, #4
 80004dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004de:	e035      	b.n	800054c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOD)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a20      	ldr	r2, [pc, #128]	@ (8000564 <GPIO_PeriClockControl+0x188>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 80004e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 80004ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 80004ee:	f023 0308 	bic.w	r3, r3, #8
 80004f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004f4:	e02a      	b.n	800054c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOE)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000568 <GPIO_PeriClockControl+0x18c>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 80004fe:	4b16      	ldr	r3, [pc, #88]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a15      	ldr	r2, [pc, #84]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000504:	f023 0310 	bic.w	r3, r3, #16
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800050a:	e01f      	b.n	800054c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOF)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a17      	ldr	r2, [pc, #92]	@ (800056c <GPIO_PeriClockControl+0x190>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8000514:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000518:	4a0f      	ldr	r2, [pc, #60]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 800051a:	f023 0320 	bic.w	r3, r3, #32
 800051e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000520:	e014      	b.n	800054c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOG)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <GPIO_PeriClockControl+0x194>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	4a0a      	ldr	r2, [pc, #40]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000534:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000536:	e009      	b.n	800054c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOH)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <GPIO_PeriClockControl+0x198>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d105      	bne.n	800054c <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8000540:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000544:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <GPIO_PeriClockControl+0x17c>)
 8000546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800054a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	48000400 	.word	0x48000400
 8000560:	48000800 	.word	0x48000800
 8000564:	48000c00 	.word	0x48000c00
 8000568:	48001000 	.word	0x48001000
 800056c:	48001400 	.word	0x48001400
 8000570:	48001800 	.word	0x48001800
 8000574:	48001c00 	.word	0x48001c00

08000578 <GPIO_Init>:

/* Initialization and de-initialization */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000578:	b480      	push	{r7}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d822      	bhi.n	80005d2 <GPIO_Init+0x5a>
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	601a      	str	r2, [r3, #0]
			pGPIOHandle ->pGPIOx->MODER |= temp;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6819      	ldr	r1, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]
			temp=0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	e0e1      	b.n	8000796 <GPIO_Init+0x21e>
		}
		else
		{
			temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	461a      	mov	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	617b      	str	r3, [r7, #20]
					pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	2103      	movs	r1, #3
 80005f2:	fa01 f303 	lsl.w	r3, r1, r3
 80005f6:	43db      	mvns	r3, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	400a      	ands	r2, r1
 8000600:	601a      	str	r2, [r3, #0]
					pGPIOHandle ->pGPIOx->MODER |= temp;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6819      	ldr	r1, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	430a      	orrs	r2, r1
 8000610:	601a      	str	r2, [r3, #0]
					temp=0;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
			if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	795b      	ldrb	r3, [r3, #5]
 800061a:	2b04      	cmp	r3, #4
 800061c:	d117      	bne.n	800064e <GPIO_Init+0xd6>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800061e:	4b47      	ldr	r3, [pc, #284]	@ (800073c <GPIO_Init+0x1c4>)
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7912      	ldrb	r2, [r2, #4]
 8000626:	4611      	mov	r1, r2
 8000628:	2201      	movs	r2, #1
 800062a:	408a      	lsls	r2, r1
 800062c:	4611      	mov	r1, r2
 800062e:	4a43      	ldr	r2, [pc, #268]	@ (800073c <GPIO_Init+0x1c4>)
 8000630:	430b      	orrs	r3, r1
 8000632:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000634:	4b41      	ldr	r3, [pc, #260]	@ (800073c <GPIO_Init+0x1c4>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	7912      	ldrb	r2, [r2, #4]
 800063c:	4611      	mov	r1, r2
 800063e:	2201      	movs	r2, #1
 8000640:	408a      	lsls	r2, r1
 8000642:	43d2      	mvns	r2, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a3d      	ldr	r2, [pc, #244]	@ (800073c <GPIO_Init+0x1c4>)
 8000648:	400b      	ands	r3, r1
 800064a:	6093      	str	r3, [r2, #8]
 800064c:	e035      	b.n	80006ba <GPIO_Init+0x142>
					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	2b05      	cmp	r3, #5
 8000654:	d117      	bne.n	8000686 <GPIO_Init+0x10e>
					{
						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000656:	4b39      	ldr	r3, [pc, #228]	@ (800073c <GPIO_Init+0x1c4>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7912      	ldrb	r2, [r2, #4]
 800065e:	4611      	mov	r1, r2
 8000660:	2201      	movs	r2, #1
 8000662:	408a      	lsls	r2, r1
 8000664:	4611      	mov	r1, r2
 8000666:	4a35      	ldr	r2, [pc, #212]	@ (800073c <GPIO_Init+0x1c4>)
 8000668:	430b      	orrs	r3, r1
 800066a:	6093      	str	r3, [r2, #8]

						EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066c:	4b33      	ldr	r3, [pc, #204]	@ (800073c <GPIO_Init+0x1c4>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	7912      	ldrb	r2, [r2, #4]
 8000674:	4611      	mov	r1, r2
 8000676:	2201      	movs	r2, #1
 8000678:	408a      	lsls	r2, r1
 800067a:	43d2      	mvns	r2, r2
 800067c:	4611      	mov	r1, r2
 800067e:	4a2f      	ldr	r2, [pc, #188]	@ (800073c <GPIO_Init+0x1c4>)
 8000680:	400b      	ands	r3, r1
 8000682:	60d3      	str	r3, [r2, #12]
 8000684:	e019      	b.n	80006ba <GPIO_Init+0x142>

					}
					else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	795b      	ldrb	r3, [r3, #5]
 800068a:	2b06      	cmp	r3, #6
 800068c:	d115      	bne.n	80006ba <GPIO_Init+0x142>
					{
						EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800068e:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <GPIO_Init+0x1c4>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	7912      	ldrb	r2, [r2, #4]
 8000696:	4611      	mov	r1, r2
 8000698:	2201      	movs	r2, #1
 800069a:	408a      	lsls	r2, r1
 800069c:	4611      	mov	r1, r2
 800069e:	4a27      	ldr	r2, [pc, #156]	@ (800073c <GPIO_Init+0x1c4>)
 80006a0:	430b      	orrs	r3, r1
 80006a2:	60d3      	str	r3, [r2, #12]

						EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <GPIO_Init+0x1c4>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7912      	ldrb	r2, [r2, #4]
 80006ac:	4611      	mov	r1, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	408a      	lsls	r2, r1
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a21      	ldr	r2, [pc, #132]	@ (800073c <GPIO_Init+0x1c4>)
 80006b6:	430b      	orrs	r3, r1
 80006b8:	6093      	str	r3, [r2, #8]
					}
				 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	089b      	lsrs	r3, r3, #2
 80006c0:	74fb      	strb	r3, [r7, #19]
				 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	f003 0303 	and.w	r3, r3, #3
 80006ca:	74bb      	strb	r3, [r7, #18]
				 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80006d4:	d042      	beq.n	800075c <GPIO_Init+0x1e4>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a19      	ldr	r2, [pc, #100]	@ (8000740 <GPIO_Init+0x1c8>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d02b      	beq.n	8000738 <GPIO_Init+0x1c0>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a17      	ldr	r2, [pc, #92]	@ (8000744 <GPIO_Init+0x1cc>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d024      	beq.n	8000734 <GPIO_Init+0x1bc>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a16      	ldr	r2, [pc, #88]	@ (8000748 <GPIO_Init+0x1d0>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d01d      	beq.n	8000730 <GPIO_Init+0x1b8>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a14      	ldr	r2, [pc, #80]	@ (800074c <GPIO_Init+0x1d4>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d016      	beq.n	800072c <GPIO_Init+0x1b4>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <GPIO_Init+0x1d8>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d00f      	beq.n	8000728 <GPIO_Init+0x1b0>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a11      	ldr	r2, [pc, #68]	@ (8000754 <GPIO_Init+0x1dc>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d008      	beq.n	8000724 <GPIO_Init+0x1ac>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a10      	ldr	r2, [pc, #64]	@ (8000758 <GPIO_Init+0x1e0>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d101      	bne.n	8000720 <GPIO_Init+0x1a8>
 800071c:	2307      	movs	r3, #7
 800071e:	e01e      	b.n	800075e <GPIO_Init+0x1e6>
 8000720:	2300      	movs	r3, #0
 8000722:	e01c      	b.n	800075e <GPIO_Init+0x1e6>
 8000724:	2306      	movs	r3, #6
 8000726:	e01a      	b.n	800075e <GPIO_Init+0x1e6>
 8000728:	2305      	movs	r3, #5
 800072a:	e018      	b.n	800075e <GPIO_Init+0x1e6>
 800072c:	2304      	movs	r3, #4
 800072e:	e016      	b.n	800075e <GPIO_Init+0x1e6>
 8000730:	2303      	movs	r3, #3
 8000732:	e014      	b.n	800075e <GPIO_Init+0x1e6>
 8000734:	2302      	movs	r3, #2
 8000736:	e012      	b.n	800075e <GPIO_Init+0x1e6>
 8000738:	2301      	movs	r3, #1
 800073a:	e010      	b.n	800075e <GPIO_Init+0x1e6>
 800073c:	40010400 	.word	0x40010400
 8000740:	48000400 	.word	0x48000400
 8000744:	48000800 	.word	0x48000800
 8000748:	48000c00 	.word	0x48000c00
 800074c:	48001000 	.word	0x48001000
 8000750:	48001400 	.word	0x48001400
 8000754:	48001800 	.word	0x48001800
 8000758:	48001c00 	.word	0x48001c00
 800075c:	2300      	movs	r3, #0
 800075e:	747b      	strb	r3, [r7, #17]
				 SYSCFG_PCLK_EN();
 8000760:	4b5e      	ldr	r3, [pc, #376]	@ (80008dc <GPIO_Init+0x364>)
 8000762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000764:	4a5d      	ldr	r2, [pc, #372]	@ (80008dc <GPIO_Init+0x364>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6613      	str	r3, [r2, #96]	@ 0x60
				 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 800076c:	7c7a      	ldrb	r2, [r7, #17]
 800076e:	7cbb      	ldrb	r3, [r7, #18]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	fa02 f103 	lsl.w	r1, r2, r3
 8000776:	4a5a      	ldr	r2, [pc, #360]	@ (80008e0 <GPIO_Init+0x368>)
 8000778:	7cfb      	ldrb	r3, [r7, #19]
 800077a:	3302      	adds	r3, #2
 800077c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000780:	4b58      	ldr	r3, [pc, #352]	@ (80008e4 <GPIO_Init+0x36c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	7912      	ldrb	r2, [r2, #4]
 8000788:	4611      	mov	r1, r2
 800078a:	2201      	movs	r2, #1
 800078c:	408a      	lsls	r2, r1
 800078e:	4611      	mov	r1, r2
 8000790:	4a54      	ldr	r2, [pc, #336]	@ (80008e4 <GPIO_Init+0x36c>)
 8000792:	430b      	orrs	r3, r1
 8000794:	6013      	str	r3, [r2, #0]
		}

		temp=0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	799b      	ldrb	r3, [r3, #6]
 800079e:	461a      	mov	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	689a      	ldr	r2, [r3, #8]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	2103      	movs	r1, #3
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43db      	mvns	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	400a      	ands	r2, r1
 80007c8:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6899      	ldr	r1, [r3, #8]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	430a      	orrs	r2, r1
 80007d8:	609a      	str	r2, [r3, #8]
		temp=0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	79db      	ldrb	r3, [r3, #7]
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	2103      	movs	r1, #3
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	400a      	ands	r2, r1
 800080c:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	68d9      	ldr	r1, [r3, #12]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	430a      	orrs	r2, r1
 800081c:	60da      	str	r2, [r3, #12]
		temp=0;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]

		temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7a1b      	ldrb	r3, [r3, #8]
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	791b      	ldrb	r3, [r3, #4]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	4619      	mov	r1, r3
 800083e:	2301      	movs	r3, #1
 8000840:	408b      	lsls	r3, r1
 8000842:	43db      	mvns	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	400a      	ands	r2, r1
 800084c:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6859      	ldr	r1, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	430a      	orrs	r2, r1
 800085c:	605a      	str	r2, [r3, #4]
		temp=0;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	795b      	ldrb	r3, [r3, #5]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d132      	bne.n	80008d0 <GPIO_Init+0x358>
		{
			uint32_t temp1 ,temp2;
			temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	08db      	lsrs	r3, r3, #3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	60fb      	str	r3, [r7, #12]
			temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	f003 0307 	and.w	r3, r3, #7
 800087c:	60bb      	str	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	3208      	adds	r2, #8
 8000886:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	210f      	movs	r1, #15
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	4619      	mov	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4011      	ands	r1, r2
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	3208      	adds	r2, #8
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	3208      	adds	r2, #8
 80008ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7a5b      	ldrb	r3, [r3, #9]
 80008b6:	4619      	mov	r1, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	fa01 f303 	lsl.w	r3, r1, r3
 80008c0:	4619      	mov	r1, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4311      	orrs	r1, r2
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	3208      	adds	r2, #8
 80008cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}




}
 80008d0:	bf00      	nop
 80008d2:	371c      	adds	r7, #28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010000 	.word	0x40010000
 80008e4:	40010400 	.word	0x40010400

080008e8 <GPIO_ToggleOutputPin>:

}


void GPIO_ToggleOutputPin(GPIO_Regdef_t *pGPIOx,uint8_t PinNumber)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<PinNumber);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	78fa      	ldrb	r2, [r7, #3]
 80008fa:	2101      	movs	r1, #1
 80008fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000900:	405a      	eors	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	615a      	str	r2, [r3, #20]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <USART_PeriClockControl>:
/*
 *  Peripheral Clock Control
 */

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d136      	bne.n	8000990 <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a38      	ldr	r2, [pc, #224]	@ (8000a08 <USART_PeriClockControl+0xf8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	4a37      	ldr	r2, [pc, #220]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000934:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000936:	e061      	b.n	80009fc <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a35      	ldr	r2, [pc, #212]	@ (8000a10 <USART_PeriClockControl+0x100>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000940:	4b32      	ldr	r3, [pc, #200]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 8000942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000944:	4a31      	ldr	r2, [pc, #196]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 8000946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800094a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800094c:	e056      	b.n	80009fc <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a30      	ldr	r2, [pc, #192]	@ (8000a14 <USART_PeriClockControl+0x104>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000956:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095a:	4a2c      	ldr	r2, [pc, #176]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 800095c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000960:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000962:	e04b      	b.n	80009fc <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a2c      	ldr	r2, [pc, #176]	@ (8000a18 <USART_PeriClockControl+0x108>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d106      	bne.n	800097a <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 800096c:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 800096e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000970:	4a26      	ldr	r2, [pc, #152]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 8000972:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000976:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000978:	e040      	b.n	80009fc <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a27      	ldr	r2, [pc, #156]	@ (8000a1c <USART_PeriClockControl+0x10c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d13c      	bne.n	80009fc <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 8000982:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000986:	4a21      	ldr	r2, [pc, #132]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 8000988:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800098c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800098e:	e035      	b.n	80009fc <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a1d      	ldr	r2, [pc, #116]	@ (8000a08 <USART_PeriClockControl+0xf8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d106      	bne.n	80009a6 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 800099a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 800099e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80009a2:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80009a4:	e02a      	b.n	80009fc <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a19      	ldr	r2, [pc, #100]	@ (8000a10 <USART_PeriClockControl+0x100>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d106      	bne.n	80009bc <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b2:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 80009b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80009b8:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80009ba:	e01f      	b.n	80009fc <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <USART_PeriClockControl+0x104>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d106      	bne.n	80009d2 <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c8:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 80009ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009ce:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80009d0:	e014      	b.n	80009fc <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <USART_PeriClockControl+0x108>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d106      	bne.n	80009e8 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009de:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 80009e0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80009e4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80009e6:	e009      	b.n	80009fc <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <USART_PeriClockControl+0x10c>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d105      	bne.n	80009fc <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f4:	4a05      	ldr	r2, [pc, #20]	@ (8000a0c <USART_PeriClockControl+0xfc>)
 80009f6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80009fa:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40004400 	.word	0x40004400
 8000a14:	40004800 	.word	0x40004800
 8000a18:	40004c00 	.word	0x40004c00
 8000a1c:	40005000 	.word	0x40005000

08000a20 <USART_PeripheralControl>:


// Enables or disables the USART peripheral

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d106      	bne.n	8000a40 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);  // Set UE bit to enable USART
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f043 0201 	orr.w	r2, r3, #1
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE); // Clear UE bit to disable USART
	}
}
 8000a3e:	e005      	b.n	8000a4c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE); // Clear UE bit to disable USART
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f023 0201 	bic.w	r2, r3, #1
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <USART_Init>:
 */



void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]

    // 1. Enable peripheral clock for the given USART
    USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2101      	movs	r1, #1
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff51 	bl	8000910 <USART_PeriClockControl>

    // 2. Configure USART mode (TX, RX, or both)
    if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	791b      	ldrb	r3, [r3, #4]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d104      	bne.n	8000a80 <USART_Init+0x2a>
    {
        tempreg |= (1 << USART_CR1_RE);   // Enable Receiver
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	e010      	b.n	8000aa2 <USART_Init+0x4c>
    }
    else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <USART_Init+0x3c>
    {
        tempreg |= (1 << USART_CR1_TE);   // Enable Transmitter
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e007      	b.n	8000aa2 <USART_Init+0x4c>
    }
    else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	791b      	ldrb	r3, [r3, #4]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d103      	bne.n	8000aa2 <USART_Init+0x4c>
    {
        tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE)); // Enable both TX & RX
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f043 030c 	orr.w	r3, r3, #12
 8000aa0:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure word length
    tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7b5b      	ldrb	r3, [r3, #13]
 8000aa6:	031b      	lsls	r3, r3, #12
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]

    // 4. Configure parity control
    if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	7b9b      	ldrb	r3, [r3, #14]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d104      	bne.n	8000ac0 <USART_Init+0x6a>
    {
        tempreg |= (1 << USART_CR1_PCE);  // Enable Even parity
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e00b      	b.n	8000ad8 <USART_Init+0x82>
    }
    else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7b9b      	ldrb	r3, [r3, #14]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d107      	bne.n	8000ad8 <USART_Init+0x82>
    {
        tempreg |= (1 << USART_CR1_PCE);  // Enable Parity
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ace:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << USART_CR1_PS);   // Select Odd parity
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad6:	60fb      	str	r3, [r7, #12]
    }

    // Load CR1 register
    pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	601a      	str	r2, [r3, #0]

    // 5. Configure stop bits
    tempreg = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
    tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7b1b      	ldrb	r3, [r3, #12]
 8000ae8:	031b      	lsls	r3, r3, #12
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
    pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	605a      	str	r2, [r3, #4]

    // 6. Configure hardware flow control
    tempreg = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
    if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7bdb      	ldrb	r3, [r3, #15]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d104      	bne.n	8000b0e <USART_Init+0xb8>
    {
        tempreg |= (1 << USART_CR3_CTSE); // Enable CTS
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	e014      	b.n	8000b38 <USART_Init+0xe2>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7bdb      	ldrb	r3, [r3, #15]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d104      	bne.n	8000b20 <USART_Init+0xca>
    {
        tempreg |= (1 << USART_CR3_RTSE); // Enable RTS
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	e00b      	b.n	8000b38 <USART_Init+0xe2>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7bdb      	ldrb	r3, [r3, #15]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d107      	bne.n	8000b38 <USART_Init+0xe2>
    {
        tempreg |= (1 << USART_CR3_CTSE); // Enable CTS
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2e:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << USART_CR3_RTSE); // Enable RTS
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b36:	60fb      	str	r3, [r7, #12]
    }

    // Load CR3 register
    pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	609a      	str	r2, [r3, #8]

    // 7. Configure baud rate
    pUSARTHandle->pUSARTx->BRR = 0x23;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2223      	movs	r2, #35	@ 0x23
 8000b46:	60da      	str	r2, [r3, #12]
   // USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <USART_SendData>:
/*
 *  UART Send Data
 */

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
    uint16_t *pdata;

    // Loop through all bytes to be transmitted
    for (uint32_t i = 0; i < Len; i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e031      	b.n	8000bc6 <USART_SendData+0x76>
    {
        // 1. Wait until TXE (Transmit Data Register Empty) flag is set
        while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000b62:	bf00      	nop
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2180      	movs	r1, #128	@ 0x80
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 faa2 	bl	80010b4 <USART_GetFlagStatus>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f6      	beq.n	8000b64 <USART_SendData+0x14>

        // 2. Check word length
        if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	7b5b      	ldrb	r3, [r3, #13]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d118      	bne.n	8000bb0 <USART_SendData+0x60>
        {
            // If 9-bit data frame
            pdata = (uint16_t*) pTxBuffer;
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	613b      	str	r3, [r7, #16]
            pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF); // Send 9 bits
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28

            // If parity is disabled → 9 bits used (2 bytes), so move buffer by 2
            if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	7b9b      	ldrb	r3, [r3, #14]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d106      	bne.n	8000ba8 <USART_SendData+0x58>
            {
                pTxBuffer++;
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
                pTxBuffer++;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	e00b      	b.n	8000bc0 <USART_SendData+0x70>
            }
            else
            {
                // If parity enabled , 8 data bits + 1 parity bit, so move buffer by 1
                pTxBuffer++;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	3301      	adds	r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	e007      	b.n	8000bc0 <USART_SendData+0x70>
            }
        }
        else
        {
            // If 8-bit data frame
            pUSARTHandle->pUSARTx->TDR = (*pTxBuffer & (uint8_t)0xFF); // Send 8 bits
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28
            pTxBuffer++;  // Move to next byte
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < Len; i++)
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d3c9      	bcc.n	8000b62 <USART_SendData+0x12>
        }
    }

    // 3. Wait for TC (Transmission Complete) flag before returning
    while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000bce:	bf00      	nop
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2140      	movs	r1, #64	@ 0x40
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fa6c 	bl	80010b4 <USART_GetFlagStatus>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f6      	beq.n	8000bd0 <USART_SendData+0x80>
}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <USART_ReceiveDataIT>:
/*
 *  Receive data over USART using interrupts
 */

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
    // Get current reception state
    uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bfe:	75fb      	strb	r3, [r7, #23]

    // Check if USART is not already busy in reception
    if(rxstate != USART_BUSY_IN_RX)
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d014      	beq.n	8000c30 <USART_ReceiveDataIT+0x44>
    {
        // Save the buffer address and length in the handle
        pUSARTHandle->RxLen = Len;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	61da      	str	r2, [r3, #28]
        pUSARTHandle->pRxBuffer = pRxBuffer;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	615a      	str	r2, [r3, #20]

        // Mark USART as busy in reception
        pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2201      	movs	r2, #1
 8000c16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        // Clear the receive data register to avoid reading old data
        (void)pUSARTHandle->pUSARTx->RDR;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

        // Enable RXNE (receive data register not empty) interrupt
        pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0220 	orr.w	r2, r2, #32
 8000c2e:	601a      	str	r2, [r3, #0]
    }

    // Return previous reception state (0 = ready, 1 = busy)
    return rxstate;
 8000c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	371c      	adds	r7, #28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <USART_IRQInterruptConfig>:
 */



void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
    // Check if we need to enable the IRQ
    if(EnorDi == ENABLE)
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d133      	bne.n	8000cba <USART_IRQInterruptConfig+0x7e>
    {
        if(IRQNumber <= 31)
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b1f      	cmp	r3, #31
 8000c56:	d80a      	bhi.n	8000c6e <USART_IRQInterruptConfig+0x32>
        {
            // Enable interrupt in NVIC ISER0 register
            *NVIC_ISER0 |= (1 << IRQNumber);
 8000c58:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <USART_IRQInterruptConfig+0xf0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	79fa      	ldrb	r2, [r7, #7]
 8000c5e:	2101      	movs	r1, #1
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	4611      	mov	r1, r2
 8000c66:	4a31      	ldr	r2, [pc, #196]	@ (8000d2c <USART_IRQInterruptConfig+0xf0>)
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	6013      	str	r3, [r2, #0]
        else if(IRQNumber >= 64 && IRQNumber < 96)
        {
            *NVIC_ICER3 |= (1 << (IRQNumber % 64));
        }
    }
}
 8000c6c:	e059      	b.n	8000d22 <USART_IRQInterruptConfig+0xe6>
        else if(IRQNumber > 31 && IRQNumber < 64)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b1f      	cmp	r3, #31
 8000c72:	d90f      	bls.n	8000c94 <USART_IRQInterruptConfig+0x58>
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c78:	d80c      	bhi.n	8000c94 <USART_IRQInterruptConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d30 <USART_IRQInterruptConfig+0xf4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	79fa      	ldrb	r2, [r7, #7]
 8000c80:	f002 021f 	and.w	r2, r2, #31
 8000c84:	2101      	movs	r1, #1
 8000c86:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4a28      	ldr	r2, [pc, #160]	@ (8000d30 <USART_IRQInterruptConfig+0xf4>)
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e046      	b.n	8000d22 <USART_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 64 && IRQNumber < 96)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c98:	d943      	bls.n	8000d22 <USART_IRQInterruptConfig+0xe6>
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c9e:	d840      	bhi.n	8000d22 <USART_IRQInterruptConfig+0xe6>
            *NVIC_ISER3 |= (1 << (IRQNumber % 64));
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <USART_IRQInterruptConfig+0xf8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	79fa      	ldrb	r2, [r7, #7]
 8000ca6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000caa:	2101      	movs	r1, #1
 8000cac:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4a20      	ldr	r2, [pc, #128]	@ (8000d34 <USART_IRQInterruptConfig+0xf8>)
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	e033      	b.n	8000d22 <USART_IRQInterruptConfig+0xe6>
        if(IRQNumber <= 31)
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b1f      	cmp	r3, #31
 8000cbe:	d80a      	bhi.n	8000cd6 <USART_IRQInterruptConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <USART_IRQInterruptConfig+0xfc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	79fa      	ldrb	r2, [r7, #7]
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4a1a      	ldr	r2, [pc, #104]	@ (8000d38 <USART_IRQInterruptConfig+0xfc>)
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	e025      	b.n	8000d22 <USART_IRQInterruptConfig+0xe6>
        else if(IRQNumber > 31 && IRQNumber < 64)
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b1f      	cmp	r3, #31
 8000cda:	d90f      	bls.n	8000cfc <USART_IRQInterruptConfig+0xc0>
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ce0:	d80c      	bhi.n	8000cfc <USART_IRQInterruptConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <USART_IRQInterruptConfig+0x100>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	79fa      	ldrb	r2, [r7, #7]
 8000ce8:	f002 021f 	and.w	r2, r2, #31
 8000cec:	2101      	movs	r1, #1
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4a11      	ldr	r2, [pc, #68]	@ (8000d3c <USART_IRQInterruptConfig+0x100>)
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e012      	b.n	8000d22 <USART_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 64 && IRQNumber < 96)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d00:	d90f      	bls.n	8000d22 <USART_IRQInterruptConfig+0xe6>
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d06:	d80c      	bhi.n	8000d22 <USART_IRQInterruptConfig+0xe6>
            *NVIC_ICER3 |= (1 << (IRQNumber % 64));
 8000d08:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <USART_IRQInterruptConfig+0x104>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000d12:	2101      	movs	r1, #1
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4a09      	ldr	r2, [pc, #36]	@ (8000d40 <USART_IRQInterruptConfig+0x104>)
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	e7ff      	b.n	8000d22 <USART_IRQInterruptConfig+0xe6>
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000e104 	.word	0xe000e104
 8000d34:	e000e10c 	.word	0xe000e10c
 8000d38:	e000e180 	.word	0xe000e180
 8000d3c:	e000e184 	.word	0xe000e184
 8000d40:	e000e18c 	.word	0xe000e18c

08000d44 <USART_IRQHandling>:
 *  Interrupt Handler Function
 */


void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    uint32_t temp1, temp2, temp3;
    uint16_t *pdata;

    // ********** Handle Transmission Complete (TC) **********
    temp1 = pUSARTHandle->pUSARTx->ISR & (1 << USART_ISR_TC);   // Check TC flag
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d56:	617b      	str	r3, [r7, #20]
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TCIE); // Check TC interrupt enable
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d62:	613b      	str	r3, [r7, #16]

    if(temp1 && temp2)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d021      	beq.n	8000dae <USART_IRQHandling+0x6a>
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d01e      	beq.n	8000dae <USART_IRQHandling+0x6a>
    {
        if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d119      	bne.n	8000dae <USART_IRQHandling+0x6a>
        {
            if(!pUSARTHandle->TxLen)  // Transmission finished
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d115      	bne.n	8000dae <USART_IRQHandling+0x6a>
            {
                pUSARTHandle->pUSARTx->ISR &= ~(1 << USART_ISR_TC);  // Clear TC flag
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	69da      	ldr	r2, [r3, #28]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d90:	61da      	str	r2, [r3, #28]
                pUSARTHandle->TxBusyState = USART_READY;            // Reset TX state
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2020 	strb.w	r2, [r3, #32]
                pUSARTHandle->pTxBuffer = NULL;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
                pUSARTHandle->TxLen = 0;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
                USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT); // Notify app
 8000da6:	2100      	movs	r1, #0
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fab7 	bl	800031c <USART_ApplicationEventCallback>
            }
        }
    }

    temp1 = 0; temp2 = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]

    // ********** Handle TXE (Transmit Data Register Empty) **********
    temp1 = pUSARTHandle->pUSARTx->ISR & (1 << USART_ISR_TXE);   // Check TXE flag
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dc0:	617b      	str	r3, [r7, #20]
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TXEIE); // Check TXE interrupt enable
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dcc:	613b      	str	r3, [r7, #16]

    if(temp1 && temp2)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d050      	beq.n	8000e76 <USART_IRQHandling+0x132>
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d04d      	beq.n	8000e76 <USART_IRQHandling+0x132>
    {
        if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d148      	bne.n	8000e76 <USART_IRQHandling+0x132>
        {
            if(pUSARTHandle->TxLen > 0)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d038      	beq.n	8000e5e <USART_IRQHandling+0x11a>
            {
                // Handle 9-bit word length
                if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7b5b      	ldrb	r3, [r3, #13]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d124      	bne.n	8000e3e <USART_IRQHandling+0xfa>
                {
                    pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	60fb      	str	r3, [r7, #12]
                    pUSARTHandle->pUSARTx->TDR = (*pdata & 0x01FF); // Load 9 bits
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e08:	629a      	str	r2, [r3, #40]	@ 0x28

                    if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7b9b      	ldrb	r3, [r3, #14]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10a      	bne.n	8000e28 <USART_IRQHandling+0xe4>
                    {
                        pUSARTHandle->pTxBuffer += 2; // Move buffer by 2 bytes
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	1c9a      	adds	r2, r3, #2
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	611a      	str	r2, [r3, #16]
                        pUSARTHandle->TxLen -= 2;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	1e9a      	subs	r2, r3, #2
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	619a      	str	r2, [r3, #24]
 8000e26:	e01a      	b.n	8000e5e <USART_IRQHandling+0x11a>
                    }
                    else
                    {
                        pUSARTHandle->pTxBuffer++; // Move buffer by 1 byte (parity bit used)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	611a      	str	r2, [r3, #16]
                        pUSARTHandle->TxLen -= 1;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	1e5a      	subs	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	619a      	str	r2, [r3, #24]
 8000e3c:	e00f      	b.n	8000e5e <USART_IRQHandling+0x11a>
                    }
                }
                else // Handle 8-bit word
                {
                    pUSARTHandle->pUSARTx->TDR = (*pUSARTHandle->pTxBuffer & 0xFF);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	629a      	str	r2, [r3, #40]	@ 0x28
                    pUSARTHandle->pTxBuffer++;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	611a      	str	r2, [r3, #16]
                    pUSARTHandle->TxLen -= 1;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	619a      	str	r2, [r3, #24]
                }
            }

            if(pUSARTHandle->TxLen == 0)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d107      	bne.n	8000e76 <USART_IRQHandling+0x132>
            {
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TXEIE); // Disable TXE interrupt
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e74:	601a      	str	r2, [r3, #0]
            }
        }
    }

    temp1 = 0; temp2 = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]

    // ********** Handle RXNE (Receive Data Register Not Empty) **********
    temp1 = pUSARTHandle->pUSARTx->ISR & (1 << USART_ISR_RXNE);   // Check RXNE flag
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	f003 0320 	and.w	r3, r3, #32
 8000e88:	617b      	str	r3, [r7, #20]
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_RXNEIE); // Check RXNE interrupt enable
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0320 	and.w	r3, r3, #32
 8000e94:	613b      	str	r3, [r7, #16]

    if(temp1 && temp2)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d06e      	beq.n	8000f7a <USART_IRQHandling+0x236>
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d06b      	beq.n	8000f7a <USART_IRQHandling+0x236>
    {
        if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d166      	bne.n	8000f7a <USART_IRQHandling+0x236>
        {
            if(pUSARTHandle->RxLen > 0)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d04e      	beq.n	8000f52 <USART_IRQHandling+0x20e>
            {
                // Handle 9-bit word length
                if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b5b      	ldrb	r3, [r3, #13]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d12a      	bne.n	8000f12 <USART_IRQHandling+0x1ce>
                {
                    if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7b9b      	ldrb	r3, [r3, #14]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d114      	bne.n	8000eee <USART_IRQHandling+0x1aa>
                    {
                        *((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->RDR & 0x01FF);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ed4:	b292      	uxth	r2, r2
 8000ed6:	801a      	strh	r2, [r3, #0]
                        pUSARTHandle->pRxBuffer += 2;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	1c9a      	adds	r2, r3, #2
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	615a      	str	r2, [r3, #20]
                        pUSARTHandle->RxLen -= 2;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	1e9a      	subs	r2, r3, #2
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	61da      	str	r2, [r3, #28]
 8000eec:	e031      	b.n	8000f52 <USART_IRQHandling+0x20e>
                    }
                    else
                    {
                        *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->RDR & 0xFF);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	701a      	strb	r2, [r3, #0]
                        pUSARTHandle->pRxBuffer++;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	615a      	str	r2, [r3, #20]
                        pUSARTHandle->RxLen -= 1;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	61da      	str	r2, [r3, #28]
 8000f10:	e01f      	b.n	8000f52 <USART_IRQHandling+0x20e>
                    }
                }
                else // Handle 8-bit word
                {
                    if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7b9b      	ldrb	r3, [r3, #14]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d107      	bne.n	8000f2a <USART_IRQHandling+0x1e6>
                    {
                        *pUSARTHandle->pRxBuffer = (uint8_t)(pUSARTHandle->pUSARTx->RDR & 0xFF);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e009      	b.n	8000f3e <USART_IRQHandling+0x1fa>
                    }
                    else
                    {
                        *pUSARTHandle->pRxBuffer = (uint8_t)(pUSARTHandle->pUSARTx->RDR & 0x7F);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]
                    }
                    pUSARTHandle->pRxBuffer++;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	615a      	str	r2, [r3, #20]
                    pUSARTHandle->RxLen -= 1;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	61da      	str	r2, [r3, #28]
                }
            }

            if(!pUSARTHandle->RxLen)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10f      	bne.n	8000f7a <USART_IRQHandling+0x236>
            {
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_RXNEIE); // Disable RXNE interrupt
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0220 	bic.w	r2, r2, #32
 8000f68:	601a      	str	r2, [r3, #0]
                pUSARTHandle->RxBusyState = USART_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_RX_CMPLT); // Notify app
 8000f72:	2101      	movs	r1, #1
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff f9d1 	bl	800031c <USART_ApplicationEventCallback>
            }
        }
    }

    temp1 = 0; temp2 = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]

    // ********** Handle CTS (Clear to Send) **********
    temp1 = pUSARTHandle->pUSARTx->ISR & (1 << USART_ISR_CTS);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f8c:	617b      	str	r3, [r7, #20]
    temp2 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f98:	613b      	str	r3, [r7, #16]
    temp3 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSIE);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa4:	60bb      	str	r3, [r7, #8]

    if(temp1 && temp2 && temp3)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d011      	beq.n	8000fd0 <USART_IRQHandling+0x28c>
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00e      	beq.n	8000fd0 <USART_IRQHandling+0x28c>
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00b      	beq.n	8000fd0 <USART_IRQHandling+0x28c>
    {
        pUSARTHandle->pUSARTx->ISR &= ~(1 << USART_ISR_CTS); // Clear CTS flag
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	69da      	ldr	r2, [r3, #28]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fc6:	61da      	str	r2, [r3, #28]
        USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_CTS);
 8000fc8:	2103      	movs	r1, #3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff f9a6 	bl	800031c <USART_ApplicationEventCallback>
    }

    temp1 = 0; temp2 = 0; temp3 = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]

    // ********** Handle IDLE line detection **********
    temp1 = pUSARTHandle->pUSARTx->ISR & (1 << USART_ISR_IDLE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	617b      	str	r3, [r7, #20]
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_IDLEIE);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	613b      	str	r3, [r7, #16]

    if(temp1 && temp2)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00e      	beq.n	8001018 <USART_IRQHandling+0x2d4>
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00b      	beq.n	8001018 <USART_IRQHandling+0x2d4>
    {
        pUSARTHandle->pUSARTx->ISR &= ~(1 << USART_ISR_IDLE); // Clear IDLE flag
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0210 	bic.w	r2, r2, #16
 800100e:	61da      	str	r2, [r3, #28]
        USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_IDLE);
 8001010:	2102      	movs	r1, #2
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff f982 	bl	800031c <USART_ApplicationEventCallback>
    }

    temp1 = 0; temp2 = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]

    // ********** Handle Overrun Error (ORE) **********
    temp1 = pUSARTHandle->pUSARTx->ISR & USART_ISR_ORE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	617b      	str	r3, [r7, #20]
    temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0305 	and.w	r3, r3, #5
 8001036:	613b      	str	r3, [r7, #16]

    if(temp1 && temp2)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <USART_IRQHandling+0x308>
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <USART_IRQHandling+0x308>
    {
        USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
 8001044:	2107      	movs	r1, #7
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff f968 	bl	800031c <USART_ApplicationEventCallback>
    }

    temp1 = 0; temp2 = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]

    // ********** Handle other USART errors **********
    temp2 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_EIE); // Error interrupt enable
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	613b      	str	r3, [r7, #16]
    if(temp2)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d01e      	beq.n	80010a4 <USART_IRQHandling+0x360>
    {
        temp1 = pUSARTHandle->pUSARTx->ISR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	617b      	str	r3, [r7, #20]

        if(temp1 & (1 << USART_ISR_FE))  // Framing error
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <USART_IRQHandling+0x33c>
        {
            USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_FE);
 8001078:	2105      	movs	r1, #5
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff f94e 	bl	800031c <USART_ApplicationEventCallback>
        }

        if(temp1 & (1 << USART_ISR_NF))  // Noise error
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <USART_IRQHandling+0x34e>
        {
            USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_NE);
 800108a:	2106      	movs	r1, #6
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff f945 	bl	800031c <USART_ApplicationEventCallback>
        }

        if(temp1 & (1 << USART_ISR_ORE)) // Overrun error
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <USART_IRQHandling+0x360>
        {
            USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
 800109c:	2107      	movs	r1, #7
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff f93c 	bl	800031c <USART_ApplicationEventCallback>
        }
    }

    temp1 = 0; temp2 = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <USART_GetFlagStatus>:


// Checks the status of a given USART flag
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <__libc_init_array>:
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	4d0d      	ldr	r5, [pc, #52]	@ (8001114 <__libc_init_array+0x38>)
 80010e0:	4c0d      	ldr	r4, [pc, #52]	@ (8001118 <__libc_init_array+0x3c>)
 80010e2:	1b64      	subs	r4, r4, r5
 80010e4:	10a4      	asrs	r4, r4, #2
 80010e6:	2600      	movs	r6, #0
 80010e8:	42a6      	cmp	r6, r4
 80010ea:	d109      	bne.n	8001100 <__libc_init_array+0x24>
 80010ec:	4d0b      	ldr	r5, [pc, #44]	@ (800111c <__libc_init_array+0x40>)
 80010ee:	4c0c      	ldr	r4, [pc, #48]	@ (8001120 <__libc_init_array+0x44>)
 80010f0:	f000 f818 	bl	8001124 <_init>
 80010f4:	1b64      	subs	r4, r4, r5
 80010f6:	10a4      	asrs	r4, r4, #2
 80010f8:	2600      	movs	r6, #0
 80010fa:	42a6      	cmp	r6, r4
 80010fc:	d105      	bne.n	800110a <__libc_init_array+0x2e>
 80010fe:	bd70      	pop	{r4, r5, r6, pc}
 8001100:	f855 3b04 	ldr.w	r3, [r5], #4
 8001104:	4798      	blx	r3
 8001106:	3601      	adds	r6, #1
 8001108:	e7ee      	b.n	80010e8 <__libc_init_array+0xc>
 800110a:	f855 3b04 	ldr.w	r3, [r5], #4
 800110e:	4798      	blx	r3
 8001110:	3601      	adds	r6, #1
 8001112:	e7f2      	b.n	80010fa <__libc_init_array+0x1e>
 8001114:	08001170 	.word	0x08001170
 8001118:	08001170 	.word	0x08001170
 800111c:	08001170 	.word	0x08001170
 8001120:	08001174 	.word	0x08001174

08001124 <_init>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	bf00      	nop
 8001128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800112a:	bc08      	pop	{r3}
 800112c:	469e      	mov	lr, r3
 800112e:	4770      	bx	lr

08001130 <_fini>:
 8001130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001132:	bf00      	nop
 8001134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001136:	bc08      	pop	{r3}
 8001138:	469e      	mov	lr, r3
 800113a:	4770      	bx	lr

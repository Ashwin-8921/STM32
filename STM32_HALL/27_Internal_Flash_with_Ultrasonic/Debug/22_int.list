
22_int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005940  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005ad0  08005ad0  00006ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b88  08005b88  0000707c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b88  08005b88  00006b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b90  08005b90  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b90  08005b90  00006b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b94  08005b94  00006b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005b98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000007c  08005c14  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08005c14  000072d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001077c  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002416  00000000  00000000  00017828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00019c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2b  00000000  00000000  0001abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f6b  00000000  00000000  0001b7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fe0  00000000  00000000  00042766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2dc2  00000000  00000000  00054746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147508  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a8  00000000  00000000  0014754c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014bcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ab8 	.word	0x08005ab8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005ab8 	.word	0x08005ab8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <HCSR04_Trigger>:
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);

// Send trigger pulse to HC-SR04 (10 µs high)
void HCSR04_Trigger(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2102      	movs	r1, #2
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d96:	f001 f9f1 	bl	800217c <HAL_GPIO_WritePin>
  for (volatile int i = 0; i < 160; i++);   // crude ~10 µs delay
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	e002      	b.n	8000da6 <HCSR04_Trigger+0x1e>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b9f      	cmp	r3, #159	@ 0x9f
 8000daa:	ddf9      	ble.n	8000da0 <HCSR04_Trigger+0x18>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2102      	movs	r1, #2
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db4:	f001 f9e2 	bl	800217c <HAL_GPIO_WritePin>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Start_HCSR04>:

// Start measurement: reset capture flag and send trigger
void Start_HCSR04(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  is_first_capture = 0;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <Start_HCSR04+0x1c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Enable input capture interrupt
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <Start_HCSR04+0x20>)
 8000dce:	f002 fd65 	bl	800389c <HAL_TIM_IC_Start_IT>
  HCSR04_Trigger();
 8000dd2:	f7ff ffd9 	bl	8000d88 <HCSR04_Trigger>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000178 	.word	0x20000178
 8000de0:	20000098 	.word	0x20000098
 8000de4:	00000000 	.word	0x00000000

08000de8 <HAL_TIM_IC_CaptureCallback>:

// Timer interrupt callback for measuring echo pulse width
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7f1b      	ldrb	r3, [r3, #28]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d175      	bne.n	8000ee4 <HAL_TIM_IC_CaptureCallback+0xfc>
  {
    if (is_first_capture == 0)  // Rising edge (echo start)
 8000df8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d11a      	bne.n	8000e36 <HAL_TIM_IC_CaptureCallback+0x4e>
    {
      ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e00:	2100      	movs	r1, #0
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f003 f8f6 	bl	8003ff4 <HAL_TIM_ReadCapturedValue>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a3c      	ldr	r2, [pc, #240]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e0c:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6a1a      	ldr	r2, [r3, #32]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 020a 	bic.w	r2, r2, #10
 8000e1c:	621a      	str	r2, [r3, #32]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6a1a      	ldr	r2, [r3, #32]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f042 0202 	orr.w	r2, r2, #2
 8000e2c:	621a      	str	r2, [r3, #32]
      is_first_capture = 1;
 8000e2e:	4b32      	ldr	r3, [pc, #200]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]

      // Convert duration to distance (cm)
      distance_cm = (float)diff * 0.0343 / 2.0;
    }
  }
}
 8000e34:	e056      	b.n	8000ee4 <HAL_TIM_IC_CaptureCallback+0xfc>
    else if (is_first_capture == 1) // Falling edge (echo end)
 8000e36:	4b30      	ldr	r3, [pc, #192]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d152      	bne.n	8000ee4 <HAL_TIM_IC_CaptureCallback+0xfc>
      ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f003 f8d7 	bl	8003ff4 <HAL_TIM_ReadCapturedValue>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a2d      	ldr	r2, [pc, #180]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e4a:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6a1a      	ldr	r2, [r3, #32]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 020a 	bic.w	r2, r2, #10
 8000e5a:	621a      	str	r2, [r3, #32]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a12      	ldr	r2, [r2, #32]
 8000e66:	621a      	str	r2, [r3, #32]
      HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f002 fe60 	bl	8003b30 <HAL_TIM_IC_Stop_IT>
      if (ic_val2 > ic_val1)
 8000e70:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d907      	bls.n	8000e8c <HAL_TIM_IC_CaptureCallback+0xa4>
        diff = ic_val2 - ic_val1;
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	4a1f      	ldr	r2, [pc, #124]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e009      	b.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0xb8>
        diff = (0xFFFF - ic_val1 + ic_val2);
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e9a:	33ff      	adds	r3, #255	@ 0xff
 8000e9c:	4a19      	ldr	r2, [pc, #100]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e9e:	6013      	str	r3, [r2, #0]
      distance_cm = (float)diff * 0.0343 / 2.0;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	ee07 3a90 	vmov	s15, r3
 8000ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eac:	ee17 0a90 	vmov	r0, s15
 8000eb0:	f7ff fb4a 	bl	8000548 <__aeabi_f2d>
 8000eb4:	a30e      	add	r3, pc, #56	@ (adr r3, 8000ef0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	f7ff fb9d 	bl	80005f8 <__aeabi_dmul>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ece:	f7ff fcbd 	bl	800084c <__aeabi_ddiv>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f7ff fd9f 	bl	8000a1c <__aeabi_d2uiz>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a09      	ldr	r2, [pc, #36]	@ (8000f08 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	f3af 8000 	nop.w
 8000ef0:	04816f00 	.word	0x04816f00
 8000ef4:	3fa18fc5 	.word	0x3fa18fc5
 8000ef8:	20000178 	.word	0x20000178
 8000efc:	2000016c 	.word	0x2000016c
 8000f00:	20000170 	.word	0x20000170
 8000f04:	20000174 	.word	0x20000174
 8000f08:	2000017c 	.word	0x2000017c

08000f0c <Flash_Write>:

// Write one 32-bit value to flash
void Flash_Write(uint32_t addr, uint32_t data)
{
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 8000f16:	f000 fd5f 	bl	80019d8 <HAL_FLASH_Unlock>
    uint64_t data64 = data;  // must write doubleword (64-bit)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	461c      	mov	r4, r3
 8000f20:	4615      	mov	r5, r2
 8000f22:	e9c7 4502 	strd	r4, r5, [r7, #8]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, data64);
 8000f26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 fce7 	bl	8001900 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 8000f32:	f000 fd73 	bl	8001a1c <HAL_FLASH_Lock>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bdb0      	pop	{r4, r5, r7, pc}

08000f3e <Flash_Read>:

// Read 32-bit value from flash
uint32_t Flash_Read(uint32_t addr)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
    return *(uint32_t*)addr;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <Flash_Erase_Page>:

// Erase one flash page
void Flash_Erase_Page(uint32_t pageAddr)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b088      	sub	sp, #32
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8000f5e:	f000 fd3b 	bl	80019d8 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef eraseInit;
    uint32_t pageError = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]

    eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
    eraseInit.Page = (pageAddr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000f70:	0adb      	lsrs	r3, r3, #11
 8000f72:	61bb      	str	r3, [r7, #24]
    eraseInit.NbPages = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
    eraseInit.Banks = FLASH_BANK_2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	617b      	str	r3, [r7, #20]

    HAL_FLASHEx_Erase(&eraseInit, &pageError);
 8000f7c:	f107 020c 	add.w	r2, r7, #12
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fe0a 	bl	8001ba0 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 8000f8c:	f000 fd46 	bl	8001a1c <HAL_FLASH_Lock>
}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <main>:

int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b096      	sub	sp, #88	@ 0x58
 8000f9c:	af02      	add	r7, sp, #8
  HAL_Init();
 8000f9e:	f000 fafd 	bl	800159c <HAL_Init>
  SystemClock_Config();
 8000fa2:	f000 f86b 	bl	800107c <SystemClock_Config>
  MX_GPIO_Init();
 8000fa6:	f000 f919 	bl	80011dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000faa:	f000 f8ed 	bl	8001188 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fae:	f000 f8a7 	bl	8001100 <MX_TIM2_Init>

  char msg[64];
  uint32_t addr = FLASH_USER_START_ADDR;
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001068 <main+0xd0>)
 8000fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  Flash_Erase_Page(FLASH_USER_START_ADDR); // erase before writing
 8000fb6:	482c      	ldr	r0, [pc, #176]	@ (8001068 <main+0xd0>)
 8000fb8:	f7ff ffcd 	bl	8000f56 <Flash_Erase_Page>

  while (1)
  {
    Start_HCSR04();
 8000fbc:	f7ff ff00 	bl	8000dc0 <Start_HCSR04>
    for (volatile int i = 0; i < 10000; i++);  // short delay for capture
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	e002      	b.n	8000fcc <main+0x34>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	ddf7      	ble.n	8000fc6 <main+0x2e>

    // Print measured distance over UART
    snprintf(msg, sizeof(msg), "Measured Distance: %lu cm\r\n", distance_cm);
 8000fd6:	4b25      	ldr	r3, [pc, #148]	@ (800106c <main+0xd4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f107 0008 	add.w	r0, r7, #8
 8000fde:	4a24      	ldr	r2, [pc, #144]	@ (8001070 <main+0xd8>)
 8000fe0:	2140      	movs	r1, #64	@ 0x40
 8000fe2:	f004 f8b5 	bl	8005150 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff f8f0 	bl	80001d0 <strlen>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	f107 0108 	add.w	r1, r7, #8
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	481d      	ldr	r0, [pc, #116]	@ (8001074 <main+0xdc>)
 8000ffe:	f003 fb49 	bl	8004694 <HAL_UART_Transmit>

    // Store distance to flash
    Flash_Write(addr, distance_cm);
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <main+0xd4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4619      	mov	r1, r3
 8001008:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800100a:	f7ff ff7f 	bl	8000f0c <Flash_Write>

    // Read back and print from flash
    uint32_t readData = Flash_Read(addr);
 800100e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001010:	f7ff ff95 	bl	8000f3e <Flash_Read>
 8001014:	64b8      	str	r0, [r7, #72]	@ 0x48
    snprintf(msg, sizeof(msg), "Sensor: %lu, Addr: 0x%08lX\r\n", readData, addr);
 8001016:	f107 0008 	add.w	r0, r7, #8
 800101a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001020:	4a15      	ldr	r2, [pc, #84]	@ (8001078 <main+0xe0>)
 8001022:	2140      	movs	r1, #64	@ 0x40
 8001024:	f004 f894 	bl	8005150 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f8cf 	bl	80001d0 <strlen>
 8001032:	4603      	mov	r3, r0
 8001034:	b29a      	uxth	r2, r3
 8001036:	f107 0108 	add.w	r1, r7, #8
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	480d      	ldr	r0, [pc, #52]	@ (8001074 <main+0xdc>)
 8001040:	f003 fb28 	bl	8004694 <HAL_UART_Transmit>

    // Move to next slot, wrap if needed
    addr += 8;
 8001044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001046:	3308      	adds	r3, #8
 8001048:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if(addr >= FLASH_USER_START_ADDR + FLASH_PAGE_SIZE)
 800104a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800104c:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8001050:	d304      	bcc.n	800105c <main+0xc4>
    {
        Flash_Erase_Page(FLASH_USER_START_ADDR);
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <main+0xd0>)
 8001054:	f7ff ff7f 	bl	8000f56 <Flash_Erase_Page>
        addr = FLASH_USER_START_ADDR;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <main+0xd0>)
 800105a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    HAL_Delay(500);  // wait between measurements
 800105c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001060:	f000 fb18 	bl	8001694 <HAL_Delay>
  {
 8001064:	e7aa      	b.n	8000fbc <main+0x24>
 8001066:	bf00      	nop
 8001068:	080ff800 	.word	0x080ff800
 800106c:	2000017c 	.word	0x2000017c
 8001070:	08005ad0 	.word	0x08005ad0
 8001074:	200000e4 	.word	0x200000e4
 8001078:	08005aec 	.word	0x08005aec

0800107c <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b096      	sub	sp, #88	@ 0x58
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	2244      	movs	r2, #68	@ 0x44
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f004 f896 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010a2:	f001 f891 	bl	80021c8 <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2310      	movs	r3, #16
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010c0:	230a      	movs	r3, #10
 80010c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010c4:	2307      	movs	r3, #7
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	657b      	str	r3, [r7, #84]	@ 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 f8cd 	bl	8002274 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2303      	movs	r3, #3
 80010e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80010ee:	463b      	mov	r3, r7
 80010f0:	2104      	movs	r1, #4
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 fc9a 	bl	8002a2c <HAL_RCC_ClockConfig>
}
 80010f8:	bf00      	nop
 80010fa:	3758      	adds	r7, #88	@ 0x58
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_TIM2_Init+0x84>)
 8001120:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001124:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;                   // no prescaler
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_TIM2_Init+0x84>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_TIM2_Init+0x84>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;             // max 32-bit counter
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_TIM2_Init+0x84>)
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_TIM2_Init+0x84>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <MX_TIM2_Init+0x84>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  HAL_TIM_IC_Init(&htim2);
 8001146:	480f      	ldr	r0, [pc, #60]	@ (8001184 <MX_TIM2_Init+0x84>)
 8001148:	f002 fb50 	bl	80037ec <HAL_TIM_IC_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	480a      	ldr	r0, [pc, #40]	@ (8001184 <MX_TIM2_Init+0x84>)
 800115c:	f003 f9a6 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>

  // Configure input capture on CH1 (PA0)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001164:	2301      	movs	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	4619      	mov	r1, r3
 8001176:	4803      	ldr	r0, [pc, #12]	@ (8001184 <MX_TIM2_Init+0x84>)
 8001178:	f002 fe9f 	bl	8003eba <HAL_TIM_IC_ConfigChannel>
}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000098 	.word	0x20000098

08001188 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 800118e:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <MX_USART2_UART_Init+0x50>)
 8001190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 8001194:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_UART_Init(&huart2);
 80011ca:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011cc:	f003 fa14 	bl	80045f8 <HAL_UART_Init>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000e4 	.word	0x200000e4
 80011d8:	40004400 	.word	0x40004400

080011dc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a2a      	ldr	r2, [pc, #168]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	4a24      	ldr	r2, [pc, #144]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001216:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a18      	ldr	r2, [pc, #96]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <MX_GPIO_Init+0xc4>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2102      	movs	r1, #2
 8001256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125a:	f000 ff8f 	bl	800217c <HAL_GPIO_WritePin>

  // Onboard button
  GPIO_InitStruct.Pin = B1_Pin;
 800125e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001264:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	480b      	ldr	r0, [pc, #44]	@ (80012a4 <MX_GPIO_Init+0xc8>)
 8001276:	f000 fdd7 	bl	8001e28 <HAL_GPIO_Init>

  // Trigger pin (PA1) as output
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800127a:	2302      	movs	r3, #2
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001294:	f000 fdc8 	bl	8001e28 <HAL_GPIO_Init>
}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	@ 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48000800 	.word	0x48000800

080012a8 <Error_Handler>:

void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  __disable_irq();
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <Error_Handler+0x8>

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <HAL_MspInit+0x44>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012be:	4a0e      	ldr	r2, [pc, #56]	@ (80012f8 <HAL_MspInit+0x44>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <HAL_MspInit+0x44>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_MspInit+0x44>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d6:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <HAL_MspInit+0x44>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_MspInit+0x44>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800131c:	d130      	bne.n	8001380 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_TIM_IC_MspInit+0x8c>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <HAL_TIM_IC_MspInit+0x8c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6593      	str	r3, [r2, #88]	@ 0x58
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_TIM_IC_MspInit+0x8c>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_TIM_IC_MspInit+0x8c>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <HAL_TIM_IC_MspInit+0x8c>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_TIM_IC_MspInit+0x8c>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134e:	2301      	movs	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800135e:	2301      	movs	r3, #1
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136c:	f000 fd5c 	bl	8001e28 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	201c      	movs	r0, #28
 8001376:	f000 fa8c 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800137a:	201c      	movs	r0, #28
 800137c:	f000 faa5 	bl	80018ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	@ 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000

0800138c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ac      	sub	sp, #176	@ 0xb0
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2288      	movs	r2, #136	@ 0x88
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 ff05 	bl	80051bc <memset>
  if(huart->Instance==USART2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a21      	ldr	r2, [pc, #132]	@ (800143c <HAL_UART_MspInit+0xb0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d13b      	bne.n	8001434 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013bc:	2302      	movs	r3, #2
 80013be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4618      	mov	r0, r3
 80013ca:	f001 fd53 	bl	8002e74 <HAL_RCCEx_PeriphCLKConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013d4:	f7ff ff68 	bl	80012a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_UART_MspInit+0xb4>)
 80013da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013dc:	4a18      	ldr	r2, [pc, #96]	@ (8001440 <HAL_UART_MspInit+0xb4>)
 80013de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_UART_MspInit+0xb4>)
 80013e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <HAL_UART_MspInit+0xb4>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f4:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <HAL_UART_MspInit+0xb4>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_UART_MspInit+0xb4>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001408:	230c      	movs	r3, #12
 800140a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001420:	2307      	movs	r3, #7
 8001422:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800142a:	4619      	mov	r1, r3
 800142c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001430:	f000 fcfa 	bl	8001e28 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001434:	bf00      	nop
 8001436:	37b0      	adds	r7, #176	@ 0xb0
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40004400 	.word	0x40004400
 8001440:	40021000 	.word	0x40021000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <NMI_Handler+0x4>

0800144c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <UsageFault_Handler+0x4>

0800146c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f000 f8db 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <TIM2_IRQHandler+0x10>)
 80014aa:	f002 fbff 	bl	8003cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000098 	.word	0x20000098

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	@ (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f003 fe70 	bl	80051cc <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	@ (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	@ (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20018000 	.word	0x20018000
 8001518:	00000400 	.word	0x00000400
 800151c:	20000180 	.word	0x20000180
 8001520:	200002d0 	.word	0x200002d0

08001524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001580 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800154c:	f7ff ffea 	bl	8001524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001550:	480c      	ldr	r0, [pc, #48]	@ (8001584 <LoopForever+0x6>)
  ldr r1, =_edata
 8001552:	490d      	ldr	r1, [pc, #52]	@ (8001588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001554:	4a0d      	ldr	r2, [pc, #52]	@ (800158c <LoopForever+0xe>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001558:	e002      	b.n	8001560 <LoopCopyDataInit>

0800155a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155e:	3304      	adds	r3, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001564:	d3f9      	bcc.n	800155a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001568:	4c0a      	ldr	r4, [pc, #40]	@ (8001594 <LoopForever+0x16>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800156c:	e001      	b.n	8001572 <LoopFillZerobss>

0800156e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001570:	3204      	adds	r2, #4

08001572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001574:	d3fb      	bcc.n	800156e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001576:	f003 fe2f 	bl	80051d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800157a:	f7ff fd0d 	bl	8000f98 <main>

0800157e <LoopForever>:

LoopForever:
    b LoopForever
 800157e:	e7fe      	b.n	800157e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001580:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800158c:	08005b98 	.word	0x08005b98
  ldr r2, =_sbss
 8001590:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001594:	200002d0 	.word	0x200002d0

08001598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC1_2_IRQHandler>
	...

0800159c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a6:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <HAL_Init+0x3c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <HAL_Init+0x3c>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b2:	2003      	movs	r0, #3
 80015b4:	f000 f962 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 f80f 	bl	80015dc <HAL_InitTick>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	e001      	b.n	80015ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ca:	f7ff fe73 	bl	80012b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40022000 	.word	0x40022000

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_InitTick+0x6c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d023      	beq.n	8001638 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <HAL_InitTick+0x70>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <HAL_InitTick+0x6c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f96d 	bl	80018e6 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d809      	bhi.n	800162c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f937 	bl	8001892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001624:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <HAL_InitTick+0x74>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e007      	b.n	800163c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e004      	b.n	800163c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e001      	b.n	800163c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	20000184 	.word	0x20000184

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000184 	.word	0x20000184

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	@ (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	@ (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	@ (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	@ 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff3e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff31 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001912:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <HAL_FLASH_Program+0xd0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_FLASH_Program+0x1e>
 800191a:	2302      	movs	r3, #2
 800191c:	e053      	b.n	80019c6 <HAL_FLASH_Program+0xc6>
 800191e:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <HAL_FLASH_Program+0xd0>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001924:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001928:	f000 f888 	bl	8001a3c <FLASH_WaitForLastOperation>
 800192c:	4603      	mov	r3, r0
 800192e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d143      	bne.n	80019be <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <HAL_FLASH_Program+0xd0>)
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800193c:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <HAL_FLASH_Program+0xd4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001948:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <HAL_FLASH_Program+0xd4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <HAL_FLASH_Program+0xd4>)
 800194e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001952:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <HAL_FLASH_Program+0xd0>)
 8001956:	2202      	movs	r2, #2
 8001958:	771a      	strb	r2, [r3, #28]
 800195a:	e002      	b.n	8001962 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800195c:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <HAL_FLASH_Program+0xd0>)
 800195e:	2200      	movs	r2, #0
 8001960:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800196c:	68b8      	ldr	r0, [r7, #8]
 800196e:	f000 f8bb 	bl	8001ae8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001972:	2301      	movs	r3, #1
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	e010      	b.n	800199a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d002      	beq.n	8001984 <HAL_FLASH_Program+0x84>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d10a      	bne.n	800199a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	68b8      	ldr	r0, [r7, #8]
 800198a:	f000 f8d3 	bl	8001b34 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d102      	bne.n	800199a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001994:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001998:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800199a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800199e:	f000 f84d 	bl	8001a3c <FLASH_WaitForLastOperation>
 80019a2:	4603      	mov	r3, r0
 80019a4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_FLASH_Program+0xd4>)
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <HAL_FLASH_Program+0xd4>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80019ba:	f000 f9eb 	bl	8001d94 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <HAL_FLASH_Program+0xd0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]

  return status;
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000000c 	.word	0x2000000c
 80019d4:	40022000 	.word	0x40022000

080019d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <HAL_FLASH_Unlock+0x38>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da0b      	bge.n	8001a02 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_FLASH_Unlock+0x38>)
 80019ec:	4a09      	ldr	r2, [pc, #36]	@ (8001a14 <HAL_FLASH_Unlock+0x3c>)
 80019ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <HAL_FLASH_Unlock+0x38>)
 80019f2:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <HAL_FLASH_Unlock+0x40>)
 80019f4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_FLASH_Unlock+0x38>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	da01      	bge.n	8001a02 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40022000 	.word	0x40022000
 8001a14:	45670123 	.word	0x45670123
 8001a18:	cdef89ab 	.word	0xcdef89ab

08001a1c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_FLASH_Lock+0x1c>)
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <HAL_FLASH_Lock+0x1c>)
 8001a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a2a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40022000 	.word	0x40022000

08001a3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff fe1a 	bl	800167c <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001a4a:	e00d      	b.n	8001a68 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a52:	d009      	beq.n	8001a68 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001a54:	f7ff fe12 	bl	800167c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d801      	bhi.n	8001a68 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e036      	b.n	8001ad6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001a68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <FLASH_WaitForLastOperation+0xa4>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1eb      	bne.n	8001a4c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <FLASH_WaitForLastOperation+0xa4>)
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01d      	beq.n	8001ac2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001a86:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <FLASH_WaitForLastOperation+0xa8>)
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ae4 <FLASH_WaitForLastOperation+0xa8>)
 8001a90:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a98:	d307      	bcc.n	8001aaa <FLASH_WaitForLastOperation+0x6e>
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <FLASH_WaitForLastOperation+0xa4>)
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001aa4:	490e      	ldr	r1, [pc, #56]	@ (8001ae0 <FLASH_WaitForLastOperation+0xa4>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	618b      	str	r3, [r1, #24]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <FLASH_WaitForLastOperation+0x82>
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <FLASH_WaitForLastOperation+0xa4>)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001abc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e009      	b.n	8001ad6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ac2:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <FLASH_WaitForLastOperation+0xa4>)
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ace:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <FLASH_WaitForLastOperation+0xa4>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	2000000c 	.word	0x2000000c

08001ae8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <FLASH_Program_DoubleWord+0x48>)
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <FLASH_Program_DoubleWord+0x48>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001b06:	f3bf 8f6f 	isb	sy
}
 8001b0a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001b0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	000a      	movs	r2, r1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	68f9      	ldr	r1, [r7, #12]
 8001b1e:	3104      	adds	r1, #4
 8001b20:	4613      	mov	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	40022000 	.word	0x40022000

08001b34 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001b3e:	2340      	movs	r3, #64	@ 0x40
 8001b40:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001b4a:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <FLASH_Program_Fast+0x68>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a13      	ldr	r2, [pc, #76]	@ (8001b9c <FLASH_Program_Fast+0x68>)
 8001b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b54:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b56:	f3ef 8310 	mrs	r3, PRIMASK
 8001b5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b5c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3304      	adds	r3, #4
 8001b76:	617b      	str	r3, [r7, #20]
    row_index--;
 8001b78:	7ffb      	ldrb	r3, [r7, #31]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8001b7e:	7ffb      	ldrb	r3, [r7, #31]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ef      	bne.n	8001b64 <FLASH_Program_Fast+0x30>
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f383 8810 	msr	PRIMASK, r3
}
 8001b8e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001b90:	bf00      	nop
 8001b92:	3724      	adds	r7, #36	@ 0x24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40022000 	.word	0x40022000

08001ba0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001baa:	4b49      	ldr	r3, [pc, #292]	@ (8001cd0 <HAL_FLASHEx_Erase+0x130>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_FLASHEx_Erase+0x16>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e087      	b.n	8001cc6 <HAL_FLASHEx_Erase+0x126>
 8001bb6:	4b46      	ldr	r3, [pc, #280]	@ (8001cd0 <HAL_FLASHEx_Erase+0x130>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bbc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001bc0:	f7ff ff3c 	bl	8001a3c <FLASH_WaitForLastOperation>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d177      	bne.n	8001cbe <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bce:	4b40      	ldr	r3, [pc, #256]	@ (8001cd0 <HAL_FLASHEx_Erase+0x130>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001be0:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001bec:	4b39      	ldr	r3, [pc, #228]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a38      	ldr	r2, [pc, #224]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001bf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001bf6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001bf8:	4b35      	ldr	r3, [pc, #212]	@ (8001cd0 <HAL_FLASHEx_Erase+0x130>)
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	771a      	strb	r2, [r3, #28]
 8001bfe:	e016      	b.n	8001c2e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001c00:	4b33      	ldr	r3, [pc, #204]	@ (8001cd0 <HAL_FLASHEx_Erase+0x130>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	771a      	strb	r2, [r3, #28]
 8001c06:	e012      	b.n	8001c2e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001c08:	4b32      	ldr	r3, [pc, #200]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c14:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001c1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c1e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001c20:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd0 <HAL_FLASHEx_Erase+0x130>)
 8001c22:	2202      	movs	r2, #2
 8001c24:	771a      	strb	r2, [r3, #28]
 8001c26:	e002      	b.n	8001c2e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001c28:	4b29      	ldr	r3, [pc, #164]	@ (8001cd0 <HAL_FLASHEx_Erase+0x130>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d113      	bne.n	8001c5e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f84c 	bl	8001cd8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c40:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c44:	f7ff fefa 	bl	8001a3c <FLASH_WaitForLastOperation>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001c4c:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4a20      	ldr	r2, [pc, #128]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001c52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	6153      	str	r3, [r2, #20]
 8001c5c:	e02d      	b.n	8001cba <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	e01d      	b.n	8001caa <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4619      	mov	r1, r3
 8001c74:	68b8      	ldr	r0, [r7, #8]
 8001c76:	f000 f857 	bl	8001d28 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c7a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c7e:	f7ff fedd 	bl	8001a3c <FLASH_WaitForLastOperation>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <HAL_FLASHEx_Erase+0x134>)
 8001c8c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c90:	f023 0302 	bic.w	r3, r3, #2
 8001c94:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	601a      	str	r2, [r3, #0]
          break;
 8001ca2:	e00a      	b.n	8001cba <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3d9      	bcc.n	8001c6e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001cba:	f000 f86b 	bl	8001d94 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001cbe:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <HAL_FLASHEx_Erase+0x130>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]

  return status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000000c 	.word	0x2000000c
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <FLASH_MassErase+0x4c>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <FLASH_MassErase+0x4c>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <FLASH_MassErase+0x4c>)
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	4a07      	ldr	r2, [pc, #28]	@ (8001d24 <FLASH_MassErase+0x4c>)
 8001d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d0a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <FLASH_MassErase+0x4c>)
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <FLASH_MassErase+0x4c>)
 8001d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d16:	6153      	str	r3, [r2, #20]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40022000 	.word	0x40022000

08001d28 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <FLASH_PageErase+0x68>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <FLASH_PageErase+0x68>)
 8001d42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d46:	6153      	str	r3, [r2, #20]
 8001d48:	e005      	b.n	8001d56 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <FLASH_PageErase+0x68>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4a10      	ldr	r2, [pc, #64]	@ (8001d90 <FLASH_PageErase+0x68>)
 8001d50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d54:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <FLASH_PageErase+0x68>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8001d66:	490a      	ldr	r1, [pc, #40]	@ (8001d90 <FLASH_PageErase+0x68>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <FLASH_PageErase+0x68>)
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	4a07      	ldr	r2, [pc, #28]	@ (8001d90 <FLASH_PageErase+0x68>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <FLASH_PageErase+0x68>)
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <FLASH_PageErase+0x68>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d82:	6153      	str	r3, [r2, #20]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40022000 	.word	0x40022000

08001d94 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001d9a:	4b21      	ldr	r3, [pc, #132]	@ (8001e20 <FLASH_FlushCaches+0x8c>)
 8001d9c:	7f1b      	ldrb	r3, [r3, #28]
 8001d9e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d002      	beq.n	8001dac <FLASH_FlushCaches+0x18>
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d117      	bne.n	8001ddc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001dac:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001db2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001db6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001db8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001dbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a16      	ldr	r2, [pc, #88]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001dca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001dce:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dda:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d002      	beq.n	8001de8 <FLASH_FlushCaches+0x54>
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d111      	bne.n	8001e0c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001de8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001dee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001dfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dfe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	@ (8001e24 <FLASH_FlushCaches+0x90>)
 8001e06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e0a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <FLASH_FlushCaches+0x8c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	771a      	strb	r2, [r3, #28]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	40022000 	.word	0x40022000

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e36:	e17f      	b.n	8002138 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8171 	beq.w	8002132 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d005      	beq.n	8001e68 <HAL_GPIO_Init+0x40>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d130      	bne.n	8001eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 0201 	and.w	r2, r3, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d118      	bne.n	8001f08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001edc:	2201      	movs	r2, #1
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	f003 0201 	and.w	r2, r3, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d017      	beq.n	8001f44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d123      	bne.n	8001f98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	6939      	ldr	r1, [r7, #16]
 8001f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0203 	and.w	r2, r3, #3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80ac 	beq.w	8002132 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	4b5f      	ldr	r3, [pc, #380]	@ (8002158 <HAL_GPIO_Init+0x330>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fde:	4a5e      	ldr	r2, [pc, #376]	@ (8002158 <HAL_GPIO_Init+0x330>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8002158 <HAL_GPIO_Init+0x330>)
 8001fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff2:	4a5a      	ldr	r2, [pc, #360]	@ (800215c <HAL_GPIO_Init+0x334>)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800201c:	d025      	beq.n	800206a <HAL_GPIO_Init+0x242>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4f      	ldr	r2, [pc, #316]	@ (8002160 <HAL_GPIO_Init+0x338>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01f      	beq.n	8002066 <HAL_GPIO_Init+0x23e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4e      	ldr	r2, [pc, #312]	@ (8002164 <HAL_GPIO_Init+0x33c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d019      	beq.n	8002062 <HAL_GPIO_Init+0x23a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4d      	ldr	r2, [pc, #308]	@ (8002168 <HAL_GPIO_Init+0x340>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0x236>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4c      	ldr	r2, [pc, #304]	@ (800216c <HAL_GPIO_Init+0x344>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00d      	beq.n	800205a <HAL_GPIO_Init+0x232>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4b      	ldr	r2, [pc, #300]	@ (8002170 <HAL_GPIO_Init+0x348>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <HAL_GPIO_Init+0x22e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4a      	ldr	r2, [pc, #296]	@ (8002174 <HAL_GPIO_Init+0x34c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_GPIO_Init+0x22a>
 800204e:	2306      	movs	r3, #6
 8002050:	e00c      	b.n	800206c <HAL_GPIO_Init+0x244>
 8002052:	2307      	movs	r3, #7
 8002054:	e00a      	b.n	800206c <HAL_GPIO_Init+0x244>
 8002056:	2305      	movs	r3, #5
 8002058:	e008      	b.n	800206c <HAL_GPIO_Init+0x244>
 800205a:	2304      	movs	r3, #4
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x244>
 800205e:	2303      	movs	r3, #3
 8002060:	e004      	b.n	800206c <HAL_GPIO_Init+0x244>
 8002062:	2302      	movs	r3, #2
 8002064:	e002      	b.n	800206c <HAL_GPIO_Init+0x244>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x244>
 800206a:	2300      	movs	r3, #0
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	f002 0203 	and.w	r2, r2, #3
 8002072:	0092      	lsls	r2, r2, #2
 8002074:	4093      	lsls	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800207c:	4937      	ldr	r1, [pc, #220]	@ (800215c <HAL_GPIO_Init+0x334>)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3302      	adds	r3, #2
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800208a:	4b3b      	ldr	r3, [pc, #236]	@ (8002178 <HAL_GPIO_Init+0x350>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ae:	4a32      	ldr	r2, [pc, #200]	@ (8002178 <HAL_GPIO_Init+0x350>)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020b4:	4b30      	ldr	r3, [pc, #192]	@ (8002178 <HAL_GPIO_Init+0x350>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d8:	4a27      	ldr	r2, [pc, #156]	@ (8002178 <HAL_GPIO_Init+0x350>)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <HAL_GPIO_Init+0x350>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002102:	4a1d      	ldr	r2, [pc, #116]	@ (8002178 <HAL_GPIO_Init+0x350>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_GPIO_Init+0x350>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800212c:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <HAL_GPIO_Init+0x350>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa22 f303 	lsr.w	r3, r2, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	f47f ae78 	bne.w	8001e38 <HAL_GPIO_Init+0x10>
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000
 8002160:	48000400 	.word	0x48000400
 8002164:	48000800 	.word	0x48000800
 8002168:	48000c00 	.word	0x48000c00
 800216c:	48001000 	.word	0x48001000
 8002170:	48001400 	.word	0x48001400
 8002174:	48001800 	.word	0x48001800
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021b0:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40007000 	.word	0x40007000

080021c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d6:	d130      	bne.n	800223a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d8:	4b23      	ldr	r3, [pc, #140]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021e4:	d038      	beq.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e6:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f6:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2232      	movs	r2, #50	@ 0x32
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220c:	e002      	b.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3b01      	subs	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002214:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002220:	d102      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f2      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002234:	d110      	bne.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e00f      	b.n	800225a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002246:	d007      	beq.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002248:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002250:	4a05      	ldr	r2, [pc, #20]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002256:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000
 800226c:	20000000 	.word	0x20000000
 8002270:	431bde83 	.word	0x431bde83

08002274 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e3ca      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002286:	4b97      	ldr	r3, [pc, #604]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002290:	4b94      	ldr	r3, [pc, #592]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80e4 	beq.w	8002470 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_RCC_OscConfig+0x4a>
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	f040 808b 	bne.w	80023cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	f040 8087 	bne.w	80023cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022be:	4b89      	ldr	r3, [pc, #548]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x62>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e3a2      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1a      	ldr	r2, [r3, #32]
 80022da:	4b82      	ldr	r3, [pc, #520]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_RCC_OscConfig+0x7c>
 80022e6:	4b7f      	ldr	r3, [pc, #508]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ee:	e005      	b.n	80022fc <HAL_RCC_OscConfig+0x88>
 80022f0:	4b7c      	ldr	r3, [pc, #496]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d223      	bcs.n	8002348 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fd55 	bl	8002db4 <RCC_SetFlashLatencyFromMSIRange>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e383      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002314:	4b73      	ldr	r3, [pc, #460]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a72      	ldr	r2, [pc, #456]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b70      	ldr	r3, [pc, #448]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	496d      	ldr	r1, [pc, #436]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002332:	4b6c      	ldr	r3, [pc, #432]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	4968      	ldr	r1, [pc, #416]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
 8002346:	e025      	b.n	8002394 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002348:	4b66      	ldr	r3, [pc, #408]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a65      	ldr	r2, [pc, #404]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b63      	ldr	r3, [pc, #396]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4960      	ldr	r1, [pc, #384]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002366:	4b5f      	ldr	r3, [pc, #380]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	495b      	ldr	r1, [pc, #364]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fd15 	bl	8002db4 <RCC_SetFlashLatencyFromMSIRange>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e343      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002394:	f000 fc4a 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b52      	ldr	r3, [pc, #328]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	4950      	ldr	r1, [pc, #320]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
 80023b0:	4a4e      	ldr	r2, [pc, #312]	@ (80024ec <HAL_RCC_OscConfig+0x278>)
 80023b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023b4:	4b4e      	ldr	r3, [pc, #312]	@ (80024f0 <HAL_RCC_OscConfig+0x27c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff f90f 	bl	80015dc <HAL_InitTick>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d052      	beq.n	800246e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	e327      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d032      	beq.n	800243a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023d4:	4b43      	ldr	r3, [pc, #268]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a42      	ldr	r2, [pc, #264]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e0:	f7ff f94c 	bl	800167c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e8:	f7ff f948 	bl	800167c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e310      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023fa:	4b3a      	ldr	r3, [pc, #232]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002406:	4b37      	ldr	r3, [pc, #220]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a36      	ldr	r2, [pc, #216]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4931      	ldr	r1, [pc, #196]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002424:	4b2f      	ldr	r3, [pc, #188]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	492c      	ldr	r1, [pc, #176]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
 8002438:	e01a      	b.n	8002470 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800243a:	4b2a      	ldr	r3, [pc, #168]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a29      	ldr	r2, [pc, #164]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002446:	f7ff f919 	bl	800167c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800244e:	f7ff f915 	bl	800167c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e2dd      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002460:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x1da>
 800246c:	e000      	b.n	8002470 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800246e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d074      	beq.n	8002566 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b08      	cmp	r3, #8
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x21a>
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d10e      	bne.n	80024a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d10b      	bne.n	80024a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248e:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d064      	beq.n	8002564 <HAL_RCC_OscConfig+0x2f0>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d160      	bne.n	8002564 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e2ba      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x24a>
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0b      	ldr	r2, [pc, #44]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	e026      	b.n	800250c <HAL_RCC_OscConfig+0x298>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024c6:	d115      	bne.n	80024f4 <HAL_RCC_OscConfig+0x280>
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a02      	ldr	r2, [pc, #8]	@ (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e014      	b.n	800250c <HAL_RCC_OscConfig+0x298>
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08005b0c 	.word	0x08005b0c
 80024ec:	20000000 	.word	0x20000000
 80024f0:	20000004 	.word	0x20000004
 80024f4:	4ba0      	ldr	r3, [pc, #640]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a9f      	ldr	r2, [pc, #636]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80024fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b9d      	ldr	r3, [pc, #628]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a9c      	ldr	r2, [pc, #624]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800250a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7ff f8b2 	bl	800167c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff f8ae 	bl	800167c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	@ 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e276      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252e:	4b92      	ldr	r3, [pc, #584]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x2a8>
 800253a:	e014      	b.n	8002566 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff f89e 	bl	800167c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff f89a 	bl	800167c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e262      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002556:	4b88      	ldr	r3, [pc, #544]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x2d0>
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d060      	beq.n	8002634 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d005      	beq.n	8002584 <HAL_RCC_OscConfig+0x310>
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d119      	bne.n	80025b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d116      	bne.n	80025b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002584:	4b7c      	ldr	r3, [pc, #496]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_OscConfig+0x328>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e23f      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b76      	ldr	r3, [pc, #472]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	4973      	ldr	r1, [pc, #460]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b0:	e040      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d023      	beq.n	8002602 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6e      	ldr	r2, [pc, #440]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7ff f859 	bl	800167c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ce:	f7ff f855 	bl	800167c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e21d      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e0:	4b65      	ldr	r3, [pc, #404]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b62      	ldr	r3, [pc, #392]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	495f      	ldr	r1, [pc, #380]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
 8002600:	e018      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b5d      	ldr	r3, [pc, #372]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5c      	ldr	r2, [pc, #368]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7ff f835 	bl	800167c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff f831 	bl	800167c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1f9      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002628:	4b53      	ldr	r3, [pc, #332]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d03c      	beq.n	80026ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01c      	beq.n	8002682 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002648:	4b4b      	ldr	r3, [pc, #300]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800264e:	4a4a      	ldr	r2, [pc, #296]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7ff f810 	bl	800167c <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	f7ff f80c 	bl	800167c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1d4      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002672:	4b41      	ldr	r3, [pc, #260]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <HAL_RCC_OscConfig+0x3ec>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002682:	4b3d      	ldr	r3, [pc, #244]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002688:	4a3b      	ldr	r2, [pc, #236]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7fe fff3 	bl	800167c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269a:	f7fe ffef 	bl	800167c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1b7      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ac:	4b32      	ldr	r3, [pc, #200]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ef      	bne.n	800269a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80a6 	beq.w	8002814 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4b27      	ldr	r3, [pc, #156]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	4a26      	ldr	r2, [pc, #152]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026e4:	4b24      	ldr	r3, [pc, #144]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f0:	2301      	movs	r3, #1
 80026f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f4:	4b21      	ldr	r3, [pc, #132]	@ (800277c <HAL_RCC_OscConfig+0x508>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d118      	bne.n	8002732 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_RCC_OscConfig+0x508>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1d      	ldr	r2, [pc, #116]	@ (800277c <HAL_RCC_OscConfig+0x508>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270c:	f7fe ffb6 	bl	800167c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002714:	f7fe ffb2 	bl	800167c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e17a      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002726:	4b15      	ldr	r3, [pc, #84]	@ (800277c <HAL_RCC_OscConfig+0x508>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x4d8>
 800273a:	4b0f      	ldr	r3, [pc, #60]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002740:	4a0d      	ldr	r2, [pc, #52]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800274a:	e029      	b.n	80027a0 <HAL_RCC_OscConfig+0x52c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d115      	bne.n	8002780 <HAL_RCC_OscConfig+0x50c>
 8002754:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275a:	4a07      	ldr	r2, [pc, #28]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276a:	4a03      	ldr	r2, [pc, #12]	@ (8002778 <HAL_RCC_OscConfig+0x504>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x52c>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
 8002780:	4b9c      	ldr	r3, [pc, #624]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	4a9b      	ldr	r2, [pc, #620]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002790:	4b98      	ldr	r3, [pc, #608]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	4a97      	ldr	r2, [pc, #604]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002798:	f023 0304 	bic.w	r3, r3, #4
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d016      	beq.n	80027d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe ff68 	bl	800167c <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe ff64 	bl	800167c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e12a      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c6:	4b8b      	ldr	r3, [pc, #556]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ed      	beq.n	80027b0 <HAL_RCC_OscConfig+0x53c>
 80027d4:	e015      	b.n	8002802 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7fe ff51 	bl	800167c <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fe ff4d 	bl	800167c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e113      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f4:	4b7f      	ldr	r3, [pc, #508]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ed      	bne.n	80027de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002802:	7ffb      	ldrb	r3, [r7, #31]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b7a      	ldr	r3, [pc, #488]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280c:	4a79      	ldr	r2, [pc, #484]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002812:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80fe 	beq.w	8002a1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	2b02      	cmp	r3, #2
 8002824:	f040 80d0 	bne.w	80029c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002828:	4b72      	ldr	r3, [pc, #456]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	429a      	cmp	r2, r3
 800283a:	d130      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	3b01      	subs	r3, #1
 8002848:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d127      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002858:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d11f      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002868:	2a07      	cmp	r2, #7
 800286a:	bf14      	ite	ne
 800286c:	2201      	movne	r2, #1
 800286e:	2200      	moveq	r2, #0
 8002870:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002872:	4293      	cmp	r3, r2
 8002874:	d113      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	3b01      	subs	r3, #1
 8002884:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d109      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	3b01      	subs	r3, #1
 8002898:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d06e      	beq.n	800297c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d069      	beq.n	8002978 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028a4:	4b53      	ldr	r3, [pc, #332]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028b0:	4b50      	ldr	r3, [pc, #320]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0ad      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028c0:	4b4c      	ldr	r3, [pc, #304]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a4b      	ldr	r2, [pc, #300]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028cc:	f7fe fed6 	bl	800167c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe fed2 	bl	800167c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e09a      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e6:	4b43      	ldr	r3, [pc, #268]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f2:	4b40      	ldr	r3, [pc, #256]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	4b40      	ldr	r3, [pc, #256]	@ (80029f8 <HAL_RCC_OscConfig+0x784>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002902:	3a01      	subs	r2, #1
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	4311      	orrs	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800290c:	0212      	lsls	r2, r2, #8
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002914:	0852      	lsrs	r2, r2, #1
 8002916:	3a01      	subs	r2, #1
 8002918:	0552      	lsls	r2, r2, #21
 800291a:	4311      	orrs	r1, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002920:	0852      	lsrs	r2, r2, #1
 8002922:	3a01      	subs	r2, #1
 8002924:	0652      	lsls	r2, r2, #25
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800292c:	0912      	lsrs	r2, r2, #4
 800292e:	0452      	lsls	r2, r2, #17
 8002930:	430a      	orrs	r2, r1
 8002932:	4930      	ldr	r1, [pc, #192]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002934:	4313      	orrs	r3, r2
 8002936:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002938:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a2d      	ldr	r2, [pc, #180]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002944:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a2a      	ldr	r2, [pc, #168]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800294e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002950:	f7fe fe94 	bl	800167c <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fe90 	bl	800167c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e058      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	4b22      	ldr	r3, [pc, #136]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002976:	e050      	b.n	8002a1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04f      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297c:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d148      	bne.n	8002a1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002988:	4b1a      	ldr	r3, [pc, #104]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a19      	ldr	r2, [pc, #100]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002992:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002994:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a16      	ldr	r2, [pc, #88]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a0:	f7fe fe6c 	bl	800167c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe fe68 	bl	800167c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e030      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ba:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x734>
 80029c6:	e028      	b.n	8002a1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a08      	ldr	r2, [pc, #32]	@ (80029f4 <HAL_RCC_OscConfig+0x780>)
 80029d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fe4f 	bl	800167c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e0:	e00c      	b.n	80029fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e2:	f7fe fe4b 	bl	800167c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d905      	bls.n	80029fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e013      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
 80029f4:	40021000 	.word	0x40021000
 80029f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <HAL_RCC_OscConfig+0x7b0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ec      	bne.n	80029e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <HAL_RCC_OscConfig+0x7b0>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4905      	ldr	r1, [pc, #20]	@ (8002a24 <HAL_RCC_OscConfig+0x7b0>)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_RCC_OscConfig+0x7b4>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
 8002a14:	e001      	b.n	8002a1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	feeefffc 	.word	0xfeeefffc

08002a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0e7      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a40:	4b75      	ldr	r3, [pc, #468]	@ (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d910      	bls.n	8002a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b72      	ldr	r3, [pc, #456]	@ (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0207 	bic.w	r2, r3, #7
 8002a56:	4970      	ldr	r1, [pc, #448]	@ (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b6e      	ldr	r3, [pc, #440]	@ (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0cf      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d010      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	4b66      	ldr	r3, [pc, #408]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d908      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b63      	ldr	r3, [pc, #396]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4960      	ldr	r1, [pc, #384]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d04c      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d121      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0a6      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aca:	4b54      	ldr	r3, [pc, #336]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d115      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e09a      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e08e      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e086      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b02:	4b46      	ldr	r3, [pc, #280]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4943      	ldr	r1, [pc, #268]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b14:	f7fe fdb2 	bl	800167c <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1c:	f7fe fdae 	bl	800167c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e06e      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	4b3a      	ldr	r3, [pc, #232]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 020c 	and.w	r2, r3, #12
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d1eb      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b31      	ldr	r3, [pc, #196]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d208      	bcs.n	8002b72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b2e      	ldr	r3, [pc, #184]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	492b      	ldr	r1, [pc, #172]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b72:	4b29      	ldr	r3, [pc, #164]	@ (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d210      	bcs.n	8002ba2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b80:	4b25      	ldr	r3, [pc, #148]	@ (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 0207 	bic.w	r2, r3, #7
 8002b88:	4923      	ldr	r1, [pc, #140]	@ (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b90:	4b21      	ldr	r3, [pc, #132]	@ (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e036      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bae:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4918      	ldr	r1, [pc, #96]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4910      	ldr	r1, [pc, #64]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be0:	f000 f824 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	490b      	ldr	r1, [pc, #44]	@ (8002c20 <HAL_RCC_ClockConfig+0x1f4>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	4a09      	ldr	r2, [pc, #36]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002bfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c00:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <HAL_RCC_ClockConfig+0x1fc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fce9 	bl	80015dc <HAL_InitTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08005b0c 	.word	0x08005b0c
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20000004 	.word	0x20000004

08002c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	@ 0x24
 8002c30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c44:	4b3b      	ldr	r3, [pc, #236]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x34>
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d121      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d11e      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c60:	4b34      	ldr	r3, [pc, #208]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c6c:	4b31      	ldr	r3, [pc, #196]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e005      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c88:	4a2b      	ldr	r2, [pc, #172]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10d      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d102      	bne.n	8002caa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ca4:	4b25      	ldr	r3, [pc, #148]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb0:	4b23      	ldr	r3, [pc, #140]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d134      	bne.n	8002d24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cba:	4b1e      	ldr	r3, [pc, #120]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d003      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xac>
 8002cd0:	e005      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cd4:	617b      	str	r3, [r7, #20]
      break;
 8002cd6:	e005      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cd8:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cda:	617b      	str	r3, [r7, #20]
      break;
 8002cdc:	e002      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	617b      	str	r3, [r7, #20]
      break;
 8002ce2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce4:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	3301      	adds	r3, #1
 8002cf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cf2:	4b10      	ldr	r3, [pc, #64]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	fb03 f202 	mul.w	r2, r3, r2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	0e5b      	lsrs	r3, r3, #25
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	3301      	adds	r3, #1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d24:	69bb      	ldr	r3, [r7, #24]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	@ 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	08005b24 	.word	0x08005b24
 8002d3c:	00f42400 	.word	0x00f42400
 8002d40:	007a1200 	.word	0x007a1200

08002d44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d48:	4b03      	ldr	r3, [pc, #12]	@ (8002d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000000 	.word	0x20000000

08002d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d60:	f7ff fff0 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4904      	ldr	r1, [pc, #16]	@ (8002d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08005b1c 	.word	0x08005b1c

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d8c:	f7ff ffda 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0adb      	lsrs	r3, r3, #11
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4904      	ldr	r1, [pc, #16]	@ (8002db0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08005b1c 	.word	0x08005b1c

08002db4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dcc:	f7ff f9ee 	bl	80021ac <HAL_PWREx_GetVoltageRange>
 8002dd0:	6178      	str	r0, [r7, #20]
 8002dd2:	e014      	b.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	4b25      	ldr	r3, [pc, #148]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd8:	4a24      	ldr	r2, [pc, #144]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de0:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dec:	f7ff f9de 	bl	80021ac <HAL_PWREx_GetVoltageRange>
 8002df0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002df2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e04:	d10b      	bne.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b80      	cmp	r3, #128	@ 0x80
 8002e0a:	d919      	bls.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e10:	d902      	bls.n	8002e18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e12:	2302      	movs	r3, #2
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	e013      	b.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e18:	2301      	movs	r3, #1
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e010      	b.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b80      	cmp	r3, #128	@ 0x80
 8002e22:	d902      	bls.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e24:	2303      	movs	r3, #3
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	e00a      	b.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b80      	cmp	r3, #128	@ 0x80
 8002e2e:	d102      	bne.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e30:	2302      	movs	r3, #2
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	e004      	b.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b70      	cmp	r3, #112	@ 0x70
 8002e3a:	d101      	bne.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 0207 	bic.w	r2, r3, #7
 8002e48:	4909      	ldr	r1, [pc, #36]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e50:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d001      	beq.n	8002e62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40022000 	.word	0x40022000

08002e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e80:	2300      	movs	r3, #0
 8002e82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d041      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e94:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e98:	d02a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e9a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e9e:	d824      	bhi.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ea6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002eaa:	d81e      	bhi.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002eb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb4:	d010      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eb6:	e018      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eb8:	4b86      	ldr	r3, [pc, #536]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a85      	ldr	r2, [pc, #532]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ec4:	e015      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fabb 	bl	8003448 <RCCEx_PLLSAI1_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ed6:	e00c      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3320      	adds	r3, #32
 8002edc:	2100      	movs	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fba6 	bl	8003630 <RCCEx_PLLSAI2_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee8:	e003      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	74fb      	strb	r3, [r7, #19]
      break;
 8002eee:	e000      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef2:	7cfb      	ldrb	r3, [r7, #19]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ef8:	4b76      	ldr	r3, [pc, #472]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f06:	4973      	ldr	r1, [pc, #460]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f0e:	e001      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d041      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f28:	d02a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f2e:	d824      	bhi.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f34:	d008      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f3a:	d81e      	bhi.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f44:	d010      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f46:	e018      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f48:	4b62      	ldr	r3, [pc, #392]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a61      	ldr	r2, [pc, #388]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f54:	e015      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fa73 	bl	8003448 <RCCEx_PLLSAI1_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f66:	e00c      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3320      	adds	r3, #32
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fb5e 	bl	8003630 <RCCEx_PLLSAI2_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f78:	e003      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f7e:	e000      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f82:	7cfb      	ldrb	r3, [r7, #19]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f88:	4b52      	ldr	r3, [pc, #328]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f96:	494f      	ldr	r1, [pc, #316]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f9e:	e001      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	7cfb      	ldrb	r3, [r7, #19]
 8002fa2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a0 	beq.w	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00d      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fcc:	4b41      	ldr	r3, [pc, #260]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	4a40      	ldr	r2, [pc, #256]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a3a      	ldr	r2, [pc, #232]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ff4:	f7fe fb42 	bl	800167c <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ffa:	e009      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffc:	f7fe fb3e 	bl	800167c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d902      	bls.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	74fb      	strb	r3, [r7, #19]
        break;
 800300e:	e005      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003010:	4b31      	ldr	r3, [pc, #196]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ef      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800301c:	7cfb      	ldrb	r3, [r7, #19]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d15c      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003022:	4b2c      	ldr	r3, [pc, #176]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800302c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01f      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	d019      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003040:	4b24      	ldr	r3, [pc, #144]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800304a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800304c:	4b21      	ldr	r3, [pc, #132]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003052:	4a20      	ldr	r2, [pc, #128]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800305c:	4b1d      	ldr	r3, [pc, #116]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003062:	4a1c      	ldr	r2, [pc, #112]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800306c:	4a19      	ldr	r2, [pc, #100]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fafd 	bl	800167c <HAL_GetTick>
 8003082:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003084:	e00b      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fe faf9 	bl	800167c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d902      	bls.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	74fb      	strb	r3, [r7, #19]
            break;
 800309c:	e006      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309e:	4b0d      	ldr	r3, [pc, #52]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ec      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b2:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c2:	4904      	ldr	r1, [pc, #16]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030ca:	e009      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	74bb      	strb	r3, [r7, #18]
 80030d0:	e006      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e0:	7c7b      	ldrb	r3, [r7, #17]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d105      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e6:	4b9e      	ldr	r3, [pc, #632]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	4a9d      	ldr	r2, [pc, #628]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030fe:	4b98      	ldr	r3, [pc, #608]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003104:	f023 0203 	bic.w	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	4994      	ldr	r1, [pc, #592]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003120:	4b8f      	ldr	r3, [pc, #572]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	f023 020c 	bic.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312e:	498c      	ldr	r1, [pc, #560]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003142:	4b87      	ldr	r3, [pc, #540]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003148:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	4983      	ldr	r1, [pc, #524]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003164:	4b7e      	ldr	r3, [pc, #504]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	497b      	ldr	r1, [pc, #492]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003186:	4b76      	ldr	r3, [pc, #472]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003194:	4972      	ldr	r1, [pc, #456]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	496a      	ldr	r1, [pc, #424]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ca:	4b65      	ldr	r3, [pc, #404]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	4961      	ldr	r1, [pc, #388]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031ec:	4b5c      	ldr	r3, [pc, #368]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fa:	4959      	ldr	r1, [pc, #356]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800320e:	4b54      	ldr	r3, [pc, #336]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003214:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321c:	4950      	ldr	r1, [pc, #320]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003230:	4b4b      	ldr	r3, [pc, #300]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003236:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	4948      	ldr	r1, [pc, #288]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003252:	4b43      	ldr	r3, [pc, #268]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003258:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	493f      	ldr	r1, [pc, #252]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d028      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003274:	4b3a      	ldr	r3, [pc, #232]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003282:	4937      	ldr	r1, [pc, #220]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800328e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003292:	d106      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003294:	4b32      	ldr	r3, [pc, #200]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a31      	ldr	r2, [pc, #196]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800329e:	60d3      	str	r3, [r2, #12]
 80032a0:	e011      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032aa:	d10c      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	2101      	movs	r1, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f8c8 	bl	8003448 <RCCEx_PLLSAI1_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
 80032c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d028      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032d2:	4b23      	ldr	r3, [pc, #140]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e0:	491f      	ldr	r1, [pc, #124]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032f0:	d106      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032fc:	60d3      	str	r3, [r2, #12]
 80032fe:	e011      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003308:	d10c      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3304      	adds	r3, #4
 800330e:	2101      	movs	r1, #1
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f899 	bl	8003448 <RCCEx_PLLSAI1_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d02b      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003330:	4b0b      	ldr	r3, [pc, #44]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800333e:	4908      	ldr	r1, [pc, #32]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800334e:	d109      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003350:	4b03      	ldr	r3, [pc, #12]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a02      	ldr	r2, [pc, #8]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800335a:	60d3      	str	r3, [r2, #12]
 800335c:	e014      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003368:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800336c:	d10c      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	2101      	movs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	f000 f867 	bl	8003448 <RCCEx_PLLSAI1_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d02f      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003394:	4b2b      	ldr	r3, [pc, #172]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033a2:	4928      	ldr	r1, [pc, #160]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033b2:	d10d      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	2102      	movs	r1, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f844 	bl	8003448 <RCCEx_PLLSAI1_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d014      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	74bb      	strb	r3, [r7, #18]
 80033ce:	e011      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3320      	adds	r3, #32
 80033de:	2102      	movs	r1, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f925 	bl	8003630 <RCCEx_PLLSAI2_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003400:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003406:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800340e:	490d      	ldr	r1, [pc, #52]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003422:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003428:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003432:	4904      	ldr	r1, [pc, #16]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800343a:	7cbb      	ldrb	r3, [r7, #18]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000

08003448 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003456:	4b75      	ldr	r3, [pc, #468]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d018      	beq.n	8003494 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003462:	4b72      	ldr	r3, [pc, #456]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0203 	and.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d10d      	bne.n	800348e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
       ||
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800347a:	4b6c      	ldr	r3, [pc, #432]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
       ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d047      	beq.n	800351e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	e044      	b.n	800351e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d018      	beq.n	80034ce <RCCEx_PLLSAI1_Config+0x86>
 800349c:	2b03      	cmp	r3, #3
 800349e:	d825      	bhi.n	80034ec <RCCEx_PLLSAI1_Config+0xa4>
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d002      	beq.n	80034aa <RCCEx_PLLSAI1_Config+0x62>
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d009      	beq.n	80034bc <RCCEx_PLLSAI1_Config+0x74>
 80034a8:	e020      	b.n	80034ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034aa:	4b60      	ldr	r3, [pc, #384]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d11d      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ba:	e01a      	b.n	80034f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034bc:	4b5b      	ldr	r3, [pc, #364]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d116      	bne.n	80034f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034cc:	e013      	b.n	80034f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ce:	4b57      	ldr	r3, [pc, #348]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10f      	bne.n	80034fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034da:	4b54      	ldr	r3, [pc, #336]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034ea:	e006      	b.n	80034fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      break;
 80034f0:	e004      	b.n	80034fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034f2:	bf00      	nop
 80034f4:	e002      	b.n	80034fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003502:	4b4a      	ldr	r3, [pc, #296]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	430b      	orrs	r3, r1
 8003518:	4944      	ldr	r1, [pc, #272]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d17d      	bne.n	8003620 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003524:	4b41      	ldr	r3, [pc, #260]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a40      	ldr	r2, [pc, #256]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 800352a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800352e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003530:	f7fe f8a4 	bl	800167c <HAL_GetTick>
 8003534:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003536:	e009      	b.n	800354c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003538:	f7fe f8a0 	bl	800167c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d902      	bls.n	800354c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	73fb      	strb	r3, [r7, #15]
        break;
 800354a:	e005      	b.n	8003558 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800354c:	4b37      	ldr	r3, [pc, #220]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ef      	bne.n	8003538 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d160      	bne.n	8003620 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d111      	bne.n	8003588 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003564:	4b31      	ldr	r3, [pc, #196]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800356c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6892      	ldr	r2, [r2, #8]
 8003574:	0211      	lsls	r1, r2, #8
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	0912      	lsrs	r2, r2, #4
 800357c:	0452      	lsls	r2, r2, #17
 800357e:	430a      	orrs	r2, r1
 8003580:	492a      	ldr	r1, [pc, #168]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	610b      	str	r3, [r1, #16]
 8003586:	e027      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d112      	bne.n	80035b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800358e:	4b27      	ldr	r3, [pc, #156]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003596:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6892      	ldr	r2, [r2, #8]
 800359e:	0211      	lsls	r1, r2, #8
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6912      	ldr	r2, [r2, #16]
 80035a4:	0852      	lsrs	r2, r2, #1
 80035a6:	3a01      	subs	r2, #1
 80035a8:	0552      	lsls	r2, r2, #21
 80035aa:	430a      	orrs	r2, r1
 80035ac:	491f      	ldr	r1, [pc, #124]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	610b      	str	r3, [r1, #16]
 80035b2:	e011      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b4:	4b1d      	ldr	r3, [pc, #116]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6892      	ldr	r2, [r2, #8]
 80035c4:	0211      	lsls	r1, r2, #8
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6952      	ldr	r2, [r2, #20]
 80035ca:	0852      	lsrs	r2, r2, #1
 80035cc:	3a01      	subs	r2, #1
 80035ce:	0652      	lsls	r2, r2, #25
 80035d0:	430a      	orrs	r2, r1
 80035d2:	4916      	ldr	r1, [pc, #88]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035d8:	4b14      	ldr	r3, [pc, #80]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a13      	ldr	r2, [pc, #76]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fe f84a 	bl	800167c <HAL_GetTick>
 80035e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035ea:	e009      	b.n	8003600 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ec:	f7fe f846 	bl	800167c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d902      	bls.n	8003600 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	73fb      	strb	r3, [r7, #15]
          break;
 80035fe:	e005      	b.n	800360c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003600:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ef      	beq.n	80035ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003612:	4b06      	ldr	r3, [pc, #24]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	4904      	ldr	r1, [pc, #16]	@ (800362c <RCCEx_PLLSAI1_Config+0x1e4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000

08003630 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800363e:	4b6a      	ldr	r3, [pc, #424]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d018      	beq.n	800367c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800364a:	4b67      	ldr	r3, [pc, #412]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0203 	and.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d10d      	bne.n	8003676 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
       ||
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003662:	4b61      	ldr	r3, [pc, #388]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
       ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d047      	beq.n	8003706 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	e044      	b.n	8003706 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d018      	beq.n	80036b6 <RCCEx_PLLSAI2_Config+0x86>
 8003684:	2b03      	cmp	r3, #3
 8003686:	d825      	bhi.n	80036d4 <RCCEx_PLLSAI2_Config+0xa4>
 8003688:	2b01      	cmp	r3, #1
 800368a:	d002      	beq.n	8003692 <RCCEx_PLLSAI2_Config+0x62>
 800368c:	2b02      	cmp	r3, #2
 800368e:	d009      	beq.n	80036a4 <RCCEx_PLLSAI2_Config+0x74>
 8003690:	e020      	b.n	80036d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003692:	4b55      	ldr	r3, [pc, #340]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11d      	bne.n	80036da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a2:	e01a      	b.n	80036da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036a4:	4b50      	ldr	r3, [pc, #320]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d116      	bne.n	80036de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b4:	e013      	b.n	80036de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036b6:	4b4c      	ldr	r3, [pc, #304]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036c2:	4b49      	ldr	r3, [pc, #292]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036d2:	e006      	b.n	80036e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      break;
 80036d8:	e004      	b.n	80036e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036da:	bf00      	nop
 80036dc:	e002      	b.n	80036e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10d      	bne.n	8003706 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ea:	4b3f      	ldr	r3, [pc, #252]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	430b      	orrs	r3, r1
 8003700:	4939      	ldr	r1, [pc, #228]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003702:	4313      	orrs	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d167      	bne.n	80037dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800370c:	4b36      	ldr	r3, [pc, #216]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a35      	ldr	r2, [pc, #212]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003718:	f7fd ffb0 	bl	800167c <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800371e:	e009      	b.n	8003734 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003720:	f7fd ffac 	bl	800167c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	73fb      	strb	r3, [r7, #15]
        break;
 8003732:	e005      	b.n	8003740 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003734:	4b2c      	ldr	r3, [pc, #176]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ef      	bne.n	8003720 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d14a      	bne.n	80037dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d111      	bne.n	8003770 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800374c:	4b26      	ldr	r3, [pc, #152]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6892      	ldr	r2, [r2, #8]
 800375c:	0211      	lsls	r1, r2, #8
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	0912      	lsrs	r2, r2, #4
 8003764:	0452      	lsls	r2, r2, #17
 8003766:	430a      	orrs	r2, r1
 8003768:	491f      	ldr	r1, [pc, #124]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376a:	4313      	orrs	r3, r2
 800376c:	614b      	str	r3, [r1, #20]
 800376e:	e011      	b.n	8003794 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003770:	4b1d      	ldr	r3, [pc, #116]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003778:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6892      	ldr	r2, [r2, #8]
 8003780:	0211      	lsls	r1, r2, #8
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6912      	ldr	r2, [r2, #16]
 8003786:	0852      	lsrs	r2, r2, #1
 8003788:	3a01      	subs	r2, #1
 800378a:	0652      	lsls	r2, r2, #25
 800378c:	430a      	orrs	r2, r1
 800378e:	4916      	ldr	r1, [pc, #88]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003790:	4313      	orrs	r3, r2
 8003792:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003794:	4b14      	ldr	r3, [pc, #80]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a13      	ldr	r2, [pc, #76]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800379e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fd ff6c 	bl	800167c <HAL_GetTick>
 80037a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037a6:	e009      	b.n	80037bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037a8:	f7fd ff68 	bl	800167c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d902      	bls.n	80037bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	73fb      	strb	r3, [r7, #15]
          break;
 80037ba:	e005      	b.n	80037c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037bc:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ef      	beq.n	80037a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037ce:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4904      	ldr	r1, [pc, #16]	@ (80037e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e049      	b.n	8003892 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd fd72 	bl	80012fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f000 fc4e 	bl	80040cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <HAL_TIM_IC_Start_IT+0x1e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	e023      	b.n	8003902 <HAL_TIM_IC_Start_IT+0x66>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d104      	bne.n	80038ca <HAL_TIM_IC_Start_IT+0x2e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	e01b      	b.n	8003902 <HAL_TIM_IC_Start_IT+0x66>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d104      	bne.n	80038da <HAL_TIM_IC_Start_IT+0x3e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e013      	b.n	8003902 <HAL_TIM_IC_Start_IT+0x66>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d104      	bne.n	80038ea <HAL_TIM_IC_Start_IT+0x4e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e00b      	b.n	8003902 <HAL_TIM_IC_Start_IT+0x66>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_IC_Start_IT+0x5e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	e003      	b.n	8003902 <HAL_TIM_IC_Start_IT+0x66>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003900:	b2db      	uxtb	r3, r3
 8003902:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <HAL_TIM_IC_Start_IT+0x78>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e013      	b.n	800393c <HAL_TIM_IC_Start_IT+0xa0>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b04      	cmp	r3, #4
 8003918:	d104      	bne.n	8003924 <HAL_TIM_IC_Start_IT+0x88>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e00b      	b.n	800393c <HAL_TIM_IC_Start_IT+0xa0>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b08      	cmp	r3, #8
 8003928:	d104      	bne.n	8003934 <HAL_TIM_IC_Start_IT+0x98>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003930:	b2db      	uxtb	r3, r3
 8003932:	e003      	b.n	800393c <HAL_TIM_IC_Start_IT+0xa0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800393a:	b2db      	uxtb	r3, r3
 800393c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800393e:	7bbb      	ldrb	r3, [r7, #14]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d102      	bne.n	800394a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003944:	7b7b      	ldrb	r3, [r7, #13]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d001      	beq.n	800394e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0dd      	b.n	8003b0a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d104      	bne.n	800395e <HAL_TIM_IC_Start_IT+0xc2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800395c:	e023      	b.n	80039a6 <HAL_TIM_IC_Start_IT+0x10a>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d104      	bne.n	800396e <HAL_TIM_IC_Start_IT+0xd2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800396c:	e01b      	b.n	80039a6 <HAL_TIM_IC_Start_IT+0x10a>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d104      	bne.n	800397e <HAL_TIM_IC_Start_IT+0xe2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800397c:	e013      	b.n	80039a6 <HAL_TIM_IC_Start_IT+0x10a>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b0c      	cmp	r3, #12
 8003982:	d104      	bne.n	800398e <HAL_TIM_IC_Start_IT+0xf2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800398c:	e00b      	b.n	80039a6 <HAL_TIM_IC_Start_IT+0x10a>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b10      	cmp	r3, #16
 8003992:	d104      	bne.n	800399e <HAL_TIM_IC_Start_IT+0x102>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800399c:	e003      	b.n	80039a6 <HAL_TIM_IC_Start_IT+0x10a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d104      	bne.n	80039b6 <HAL_TIM_IC_Start_IT+0x11a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b4:	e013      	b.n	80039de <HAL_TIM_IC_Start_IT+0x142>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d104      	bne.n	80039c6 <HAL_TIM_IC_Start_IT+0x12a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039c4:	e00b      	b.n	80039de <HAL_TIM_IC_Start_IT+0x142>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d104      	bne.n	80039d6 <HAL_TIM_IC_Start_IT+0x13a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039d4:	e003      	b.n	80039de <HAL_TIM_IC_Start_IT+0x142>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	d841      	bhi.n	8003a68 <HAL_TIM_IC_Start_IT+0x1cc>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <HAL_TIM_IC_Start_IT+0x150>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a21 	.word	0x08003a21
 80039f0:	08003a69 	.word	0x08003a69
 80039f4:	08003a69 	.word	0x08003a69
 80039f8:	08003a69 	.word	0x08003a69
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a69 	.word	0x08003a69
 8003a04:	08003a69 	.word	0x08003a69
 8003a08:	08003a69 	.word	0x08003a69
 8003a0c:	08003a45 	.word	0x08003a45
 8003a10:	08003a69 	.word	0x08003a69
 8003a14:	08003a69 	.word	0x08003a69
 8003a18:	08003a69 	.word	0x08003a69
 8003a1c:	08003a57 	.word	0x08003a57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0202 	orr.w	r2, r2, #2
 8003a2e:	60da      	str	r2, [r3, #12]
      break;
 8003a30:	e01d      	b.n	8003a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0204 	orr.w	r2, r2, #4
 8003a40:	60da      	str	r2, [r3, #12]
      break;
 8003a42:	e014      	b.n	8003a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0208 	orr.w	r2, r2, #8
 8003a52:	60da      	str	r2, [r3, #12]
      break;
 8003a54:	e00b      	b.n	8003a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0210 	orr.w	r2, r2, #16
 8003a64:	60da      	str	r2, [r3, #12]
      break;
 8003a66:	e002      	b.n	8003a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d149      	bne.n	8003b08 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	6839      	ldr	r1, [r7, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fcef 	bl	8004460 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a23      	ldr	r2, [pc, #140]	@ (8003b14 <HAL_TIM_IC_Start_IT+0x278>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d01d      	beq.n	8003ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a94:	d018      	beq.n	8003ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b18 <HAL_TIM_IC_Start_IT+0x27c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b1c <HAL_TIM_IC_Start_IT+0x280>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00e      	beq.n	8003ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1c      	ldr	r2, [pc, #112]	@ (8003b20 <HAL_TIM_IC_Start_IT+0x284>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b24 <HAL_TIM_IC_Start_IT+0x288>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a19      	ldr	r2, [pc, #100]	@ (8003b28 <HAL_TIM_IC_Start_IT+0x28c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d115      	bne.n	8003af4 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	4b17      	ldr	r3, [pc, #92]	@ (8003b2c <HAL_TIM_IC_Start_IT+0x290>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d015      	beq.n	8003b06 <HAL_TIM_IC_Start_IT+0x26a>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae0:	d011      	beq.n	8003b06 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0201 	orr.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af2:	e008      	b.n	8003b06 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e000      	b.n	8003b08 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b06:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40013400 	.word	0x40013400
 8003b28:	40014000 	.word	0x40014000
 8003b2c:	00010007 	.word	0x00010007

08003b30 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d841      	bhi.n	8003bc8 <HAL_TIM_IC_Stop_IT+0x98>
 8003b44:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <HAL_TIM_IC_Stop_IT+0x1c>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b81 	.word	0x08003b81
 8003b50:	08003bc9 	.word	0x08003bc9
 8003b54:	08003bc9 	.word	0x08003bc9
 8003b58:	08003bc9 	.word	0x08003bc9
 8003b5c:	08003b93 	.word	0x08003b93
 8003b60:	08003bc9 	.word	0x08003bc9
 8003b64:	08003bc9 	.word	0x08003bc9
 8003b68:	08003bc9 	.word	0x08003bc9
 8003b6c:	08003ba5 	.word	0x08003ba5
 8003b70:	08003bc9 	.word	0x08003bc9
 8003b74:	08003bc9 	.word	0x08003bc9
 8003b78:	08003bc9 	.word	0x08003bc9
 8003b7c:	08003bb7 	.word	0x08003bb7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0202 	bic.w	r2, r2, #2
 8003b8e:	60da      	str	r2, [r3, #12]
      break;
 8003b90:	e01d      	b.n	8003bce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0204 	bic.w	r2, r2, #4
 8003ba0:	60da      	str	r2, [r3, #12]
      break;
 8003ba2:	e014      	b.n	8003bce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0208 	bic.w	r2, r2, #8
 8003bb2:	60da      	str	r2, [r3, #12]
      break;
 8003bb4:	e00b      	b.n	8003bce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0210 	bic.w	r2, r2, #16
 8003bc4:	60da      	str	r2, [r3, #12]
      break;
 8003bc6:	e002      	b.n	8003bce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      break;
 8003bcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d166      	bne.n	8003ca2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	6839      	ldr	r1, [r7, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fc3f 	bl	8004460 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <HAL_TIM_IC_Stop_IT+0xe2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <HAL_TIM_IC_Stop_IT+0xe2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d104      	bne.n	8003c22 <HAL_TIM_IC_Stop_IT+0xf2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c20:	e023      	b.n	8003c6a <HAL_TIM_IC_Stop_IT+0x13a>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_IC_Stop_IT+0x102>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c30:	e01b      	b.n	8003c6a <HAL_TIM_IC_Stop_IT+0x13a>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_IC_Stop_IT+0x112>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c40:	e013      	b.n	8003c6a <HAL_TIM_IC_Stop_IT+0x13a>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_IC_Stop_IT+0x122>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c50:	e00b      	b.n	8003c6a <HAL_TIM_IC_Stop_IT+0x13a>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_IC_Stop_IT+0x132>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c60:	e003      	b.n	8003c6a <HAL_TIM_IC_Stop_IT+0x13a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_IC_Stop_IT+0x14a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c78:	e013      	b.n	8003ca2 <HAL_TIM_IC_Stop_IT+0x172>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_IC_Stop_IT+0x15a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c88:	e00b      	b.n	8003ca2 <HAL_TIM_IC_Stop_IT+0x172>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_IC_Stop_IT+0x16a>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c98:	e003      	b.n	8003ca2 <HAL_TIM_IC_Stop_IT+0x172>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d020      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01b      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0202 	mvn.w	r2, #2
 8003ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd f876 	bl	8000de8 <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9c6 	bl	8004090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f9cd 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d020      	beq.n	8003d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01b      	beq.n	8003d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0204 	mvn.w	r2, #4
 8003d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd f850 	bl	8000de8 <HAL_TIM_IC_CaptureCallback>
 8003d48:	e005      	b.n	8003d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9a0 	bl	8004090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f9a7 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d020      	beq.n	8003da8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01b      	beq.n	8003da8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0208 	mvn.w	r2, #8
 8003d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fd f82a 	bl	8000de8 <HAL_TIM_IC_CaptureCallback>
 8003d94:	e005      	b.n	8003da2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f97a 	bl	8004090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f981 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d020      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01b      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0210 	mvn.w	r2, #16
 8003dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2208      	movs	r2, #8
 8003dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd f804 	bl	8000de8 <HAL_TIM_IC_CaptureCallback>
 8003de0:	e005      	b.n	8003dee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f954 	bl	8004090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f95b 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00c      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0201 	mvn.w	r2, #1
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f932 	bl	800407c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d104      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00c      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fbc5 	bl	80045d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00c      	beq.n	8003e6a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fbbd 	bl	80045e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00c      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f915 	bl	80040b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00c      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f06f 0220 	mvn.w	r2, #32
 8003eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fb85 	bl	80045bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b086      	sub	sp, #24
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e088      	b.n	8003fea <HAL_TIM_IC_ConfigChannel+0x130>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11b      	bne.n	8003f1e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003ef6:	f000 f98f 	bl	8004218 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699a      	ldr	r2, [r3, #24]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 020c 	bic.w	r2, r2, #12
 8003f08:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6999      	ldr	r1, [r3, #24]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	619a      	str	r2, [r3, #24]
 8003f1c:	e060      	b.n	8003fe0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d11c      	bne.n	8003f5e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003f34:	f000 f9de 	bl	80042f4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003f46:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6999      	ldr	r1, [r3, #24]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	021a      	lsls	r2, r3, #8
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	619a      	str	r2, [r3, #24]
 8003f5c:	e040      	b.n	8003fe0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d11b      	bne.n	8003f9c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003f74:	f000 f9fb 	bl	800436e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020c 	bic.w	r2, r2, #12
 8003f86:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69d9      	ldr	r1, [r3, #28]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	61da      	str	r2, [r3, #28]
 8003f9a:	e021      	b.n	8003fe0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d11c      	bne.n	8003fdc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003fb2:	f000 fa18 	bl	80043e6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003fc4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69d9      	ldr	r1, [r3, #28]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	021a      	lsls	r2, r3, #8
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	61da      	str	r2, [r3, #28]
 8003fda:	e001      	b.n	8003fe0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d831      	bhi.n	800406c <HAL_TIM_ReadCapturedValue+0x78>
 8004008:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <HAL_TIM_ReadCapturedValue+0x1c>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004045 	.word	0x08004045
 8004014:	0800406d 	.word	0x0800406d
 8004018:	0800406d 	.word	0x0800406d
 800401c:	0800406d 	.word	0x0800406d
 8004020:	0800404f 	.word	0x0800404f
 8004024:	0800406d 	.word	0x0800406d
 8004028:	0800406d 	.word	0x0800406d
 800402c:	0800406d 	.word	0x0800406d
 8004030:	08004059 	.word	0x08004059
 8004034:	0800406d 	.word	0x0800406d
 8004038:	0800406d 	.word	0x0800406d
 800403c:	0800406d 	.word	0x0800406d
 8004040:	08004063 	.word	0x08004063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404a:	60fb      	str	r3, [r7, #12]

      break;
 800404c:	e00f      	b.n	800406e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004054:	60fb      	str	r3, [r7, #12]

      break;
 8004056:	e00a      	b.n	800406e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	60fb      	str	r3, [r7, #12]

      break;
 8004060:	e005      	b.n	800406e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	60fb      	str	r3, [r7, #12]

      break;
 800406a:	e000      	b.n	800406e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800406c:	bf00      	nop
  }

  return tmpreg;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a46      	ldr	r2, [pc, #280]	@ (80041f8 <TIM_Base_SetConfig+0x12c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d013      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ea:	d00f      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a43      	ldr	r2, [pc, #268]	@ (80041fc <TIM_Base_SetConfig+0x130>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00b      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a42      	ldr	r2, [pc, #264]	@ (8004200 <TIM_Base_SetConfig+0x134>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a41      	ldr	r2, [pc, #260]	@ (8004204 <TIM_Base_SetConfig+0x138>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a40      	ldr	r2, [pc, #256]	@ (8004208 <TIM_Base_SetConfig+0x13c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d108      	bne.n	800411e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a35      	ldr	r2, [pc, #212]	@ (80041f8 <TIM_Base_SetConfig+0x12c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01f      	beq.n	8004166 <TIM_Base_SetConfig+0x9a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412c:	d01b      	beq.n	8004166 <TIM_Base_SetConfig+0x9a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a32      	ldr	r2, [pc, #200]	@ (80041fc <TIM_Base_SetConfig+0x130>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d017      	beq.n	8004166 <TIM_Base_SetConfig+0x9a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a31      	ldr	r2, [pc, #196]	@ (8004200 <TIM_Base_SetConfig+0x134>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <TIM_Base_SetConfig+0x9a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a30      	ldr	r2, [pc, #192]	@ (8004204 <TIM_Base_SetConfig+0x138>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00f      	beq.n	8004166 <TIM_Base_SetConfig+0x9a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2f      	ldr	r2, [pc, #188]	@ (8004208 <TIM_Base_SetConfig+0x13c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_Base_SetConfig+0x9a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2e      	ldr	r2, [pc, #184]	@ (800420c <TIM_Base_SetConfig+0x140>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_Base_SetConfig+0x9a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2d      	ldr	r2, [pc, #180]	@ (8004210 <TIM_Base_SetConfig+0x144>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_Base_SetConfig+0x9a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2c      	ldr	r2, [pc, #176]	@ (8004214 <TIM_Base_SetConfig+0x148>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d108      	bne.n	8004178 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800416c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a16      	ldr	r2, [pc, #88]	@ (80041f8 <TIM_Base_SetConfig+0x12c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00f      	beq.n	80041c4 <TIM_Base_SetConfig+0xf8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a18      	ldr	r2, [pc, #96]	@ (8004208 <TIM_Base_SetConfig+0x13c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <TIM_Base_SetConfig+0xf8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a17      	ldr	r2, [pc, #92]	@ (800420c <TIM_Base_SetConfig+0x140>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d007      	beq.n	80041c4 <TIM_Base_SetConfig+0xf8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a16      	ldr	r2, [pc, #88]	@ (8004210 <TIM_Base_SetConfig+0x144>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_Base_SetConfig+0xf8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a15      	ldr	r2, [pc, #84]	@ (8004214 <TIM_Base_SetConfig+0x148>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d103      	bne.n	80041cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d105      	bne.n	80041ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f023 0201 	bic.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	611a      	str	r2, [r3, #16]
  }
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40013400 	.word	0x40013400
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800

08004218 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f023 0201 	bic.w	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a26      	ldr	r2, [pc, #152]	@ (80042dc <TIM_TI1_SetConfig+0xc4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d017      	beq.n	8004276 <TIM_TI1_SetConfig+0x5e>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424c:	d013      	beq.n	8004276 <TIM_TI1_SetConfig+0x5e>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a23      	ldr	r2, [pc, #140]	@ (80042e0 <TIM_TI1_SetConfig+0xc8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00f      	beq.n	8004276 <TIM_TI1_SetConfig+0x5e>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a22      	ldr	r2, [pc, #136]	@ (80042e4 <TIM_TI1_SetConfig+0xcc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00b      	beq.n	8004276 <TIM_TI1_SetConfig+0x5e>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4a21      	ldr	r2, [pc, #132]	@ (80042e8 <TIM_TI1_SetConfig+0xd0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d007      	beq.n	8004276 <TIM_TI1_SetConfig+0x5e>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a20      	ldr	r2, [pc, #128]	@ (80042ec <TIM_TI1_SetConfig+0xd4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_TI1_SetConfig+0x5e>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a1f      	ldr	r2, [pc, #124]	@ (80042f0 <TIM_TI1_SetConfig+0xd8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <TIM_TI1_SetConfig+0x62>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <TIM_TI1_SetConfig+0x64>
 800427a:	2300      	movs	r3, #0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e003      	b.n	800429a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f023 030a 	bic.w	r3, r3, #10
 80042b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f003 030a 	and.w	r3, r3, #10
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40000c00 	.word	0x40000c00
 80042ec:	40013400 	.word	0x40013400
 80042f0:	40014000 	.word	0x40014000

080042f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f023 0210 	bic.w	r2, r3, #16
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	031b      	lsls	r3, r3, #12
 8004338:	b29b      	uxth	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004346:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800436e:	b480      	push	{r7}
 8004370:	b087      	sub	sp, #28
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80043be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b087      	sub	sp, #28
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004412:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004424:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	031b      	lsls	r3, r3, #12
 800442a:	b29b      	uxth	r3, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004438:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	031b      	lsls	r3, r3, #12
 800443e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	621a      	str	r2, [r3, #32]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2201      	movs	r2, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e068      	b.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2e      	ldr	r2, [pc, #184]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2d      	ldr	r2, [pc, #180]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d108      	bne.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004510:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1e      	ldr	r2, [pc, #120]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01d      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004536:	d018      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1b      	ldr	r2, [pc, #108]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1a      	ldr	r2, [pc, #104]	@ (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a18      	ldr	r2, [pc, #96]	@ (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a13      	ldr	r2, [pc, #76]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a14      	ldr	r2, [pc, #80]	@ (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10c      	bne.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4313      	orrs	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	40013400 	.word	0x40013400
 80045ac:	40000400 	.word	0x40000400
 80045b0:	40000800 	.word	0x40000800
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	40014000 	.word	0x40014000

080045bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e040      	b.n	800468c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc feb6 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	@ 0x24
 8004624:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fb6a 	bl	8004d18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8af 	bl	80047a8 <UART_SetConfig>
 800464a:	4603      	mov	r3, r0
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e01b      	b.n	800468c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fbe9 	bl	8004e5c <UART_CheckIdleState>
 800468a:	4603      	mov	r3, r0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	@ 0x28
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d177      	bne.n	800479c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_UART_Transmit+0x24>
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e070      	b.n	800479e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2221      	movs	r2, #33	@ 0x21
 80046c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ca:	f7fc ffd7 	bl	800167c <HAL_GetTick>
 80046ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	88fa      	ldrh	r2, [r7, #6]
 80046dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e8:	d108      	bne.n	80046fc <HAL_UART_Transmit+0x68>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	e003      	b.n	8004704 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004704:	e02f      	b.n	8004766 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2200      	movs	r2, #0
 800470e:	2180      	movs	r1, #128	@ 0x80
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fc4b 	bl	8004fac <UART_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e03b      	b.n	800479e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	881a      	ldrh	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004738:	b292      	uxth	r2, r2
 800473a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	3302      	adds	r3, #2
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	e007      	b.n	8004754 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	3301      	adds	r3, #1
 8004752:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1c9      	bne.n	8004706 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	2140      	movs	r1, #64	@ 0x40
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fc15 	bl	8004fac <UART_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e005      	b.n	800479e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	e000      	b.n	800479e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800479c:	2302      	movs	r3, #2
  }
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3720      	adds	r7, #32
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b08a      	sub	sp, #40	@ 0x28
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4ba4      	ldr	r3, [pc, #656]	@ (8004a68 <UART_SetConfig+0x2c0>)
 80047d8:	4013      	ands	r3, r2
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a99      	ldr	r2, [pc, #612]	@ (8004a6c <UART_SetConfig+0x2c4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004810:	4313      	orrs	r3, r2
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a90      	ldr	r2, [pc, #576]	@ (8004a70 <UART_SetConfig+0x2c8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d126      	bne.n	8004880 <UART_SetConfig+0xd8>
 8004832:	4b90      	ldr	r3, [pc, #576]	@ (8004a74 <UART_SetConfig+0x2cc>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b03      	cmp	r3, #3
 800483e:	d81b      	bhi.n	8004878 <UART_SetConfig+0xd0>
 8004840:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <UART_SetConfig+0xa0>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	08004859 	.word	0x08004859
 800484c:	08004869 	.word	0x08004869
 8004850:	08004861 	.word	0x08004861
 8004854:	08004871 	.word	0x08004871
 8004858:	2301      	movs	r3, #1
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e116      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004860:	2302      	movs	r3, #2
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e112      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004868:	2304      	movs	r3, #4
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e10e      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004870:	2308      	movs	r3, #8
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004876:	e10a      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004878:	2310      	movs	r3, #16
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487e:	e106      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a7c      	ldr	r2, [pc, #496]	@ (8004a78 <UART_SetConfig+0x2d0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d138      	bne.n	80048fc <UART_SetConfig+0x154>
 800488a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a74 <UART_SetConfig+0x2cc>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	f003 030c 	and.w	r3, r3, #12
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d82d      	bhi.n	80048f4 <UART_SetConfig+0x14c>
 8004898:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <UART_SetConfig+0xf8>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048f5 	.word	0x080048f5
 80048a8:	080048f5 	.word	0x080048f5
 80048ac:	080048f5 	.word	0x080048f5
 80048b0:	080048e5 	.word	0x080048e5
 80048b4:	080048f5 	.word	0x080048f5
 80048b8:	080048f5 	.word	0x080048f5
 80048bc:	080048f5 	.word	0x080048f5
 80048c0:	080048dd 	.word	0x080048dd
 80048c4:	080048f5 	.word	0x080048f5
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048ed 	.word	0x080048ed
 80048d4:	2300      	movs	r3, #0
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048da:	e0d8      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80048dc:	2302      	movs	r3, #2
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e2:	e0d4      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80048e4:	2304      	movs	r3, #4
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ea:	e0d0      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80048ec:	2308      	movs	r3, #8
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f2:	e0cc      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80048f4:	2310      	movs	r3, #16
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fa:	e0c8      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a5e      	ldr	r2, [pc, #376]	@ (8004a7c <UART_SetConfig+0x2d4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d125      	bne.n	8004952 <UART_SetConfig+0x1aa>
 8004906:	4b5b      	ldr	r3, [pc, #364]	@ (8004a74 <UART_SetConfig+0x2cc>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004910:	2b30      	cmp	r3, #48	@ 0x30
 8004912:	d016      	beq.n	8004942 <UART_SetConfig+0x19a>
 8004914:	2b30      	cmp	r3, #48	@ 0x30
 8004916:	d818      	bhi.n	800494a <UART_SetConfig+0x1a2>
 8004918:	2b20      	cmp	r3, #32
 800491a:	d00a      	beq.n	8004932 <UART_SetConfig+0x18a>
 800491c:	2b20      	cmp	r3, #32
 800491e:	d814      	bhi.n	800494a <UART_SetConfig+0x1a2>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <UART_SetConfig+0x182>
 8004924:	2b10      	cmp	r3, #16
 8004926:	d008      	beq.n	800493a <UART_SetConfig+0x192>
 8004928:	e00f      	b.n	800494a <UART_SetConfig+0x1a2>
 800492a:	2300      	movs	r3, #0
 800492c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004930:	e0ad      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004932:	2302      	movs	r3, #2
 8004934:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004938:	e0a9      	b.n	8004a8e <UART_SetConfig+0x2e6>
 800493a:	2304      	movs	r3, #4
 800493c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004940:	e0a5      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004942:	2308      	movs	r3, #8
 8004944:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004948:	e0a1      	b.n	8004a8e <UART_SetConfig+0x2e6>
 800494a:	2310      	movs	r3, #16
 800494c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004950:	e09d      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a4a      	ldr	r2, [pc, #296]	@ (8004a80 <UART_SetConfig+0x2d8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d125      	bne.n	80049a8 <UART_SetConfig+0x200>
 800495c:	4b45      	ldr	r3, [pc, #276]	@ (8004a74 <UART_SetConfig+0x2cc>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004962:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004966:	2bc0      	cmp	r3, #192	@ 0xc0
 8004968:	d016      	beq.n	8004998 <UART_SetConfig+0x1f0>
 800496a:	2bc0      	cmp	r3, #192	@ 0xc0
 800496c:	d818      	bhi.n	80049a0 <UART_SetConfig+0x1f8>
 800496e:	2b80      	cmp	r3, #128	@ 0x80
 8004970:	d00a      	beq.n	8004988 <UART_SetConfig+0x1e0>
 8004972:	2b80      	cmp	r3, #128	@ 0x80
 8004974:	d814      	bhi.n	80049a0 <UART_SetConfig+0x1f8>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <UART_SetConfig+0x1d8>
 800497a:	2b40      	cmp	r3, #64	@ 0x40
 800497c:	d008      	beq.n	8004990 <UART_SetConfig+0x1e8>
 800497e:	e00f      	b.n	80049a0 <UART_SetConfig+0x1f8>
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004986:	e082      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004988:	2302      	movs	r3, #2
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498e:	e07e      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004990:	2304      	movs	r3, #4
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004996:	e07a      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004998:	2308      	movs	r3, #8
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499e:	e076      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80049a0:	2310      	movs	r3, #16
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e072      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a35      	ldr	r2, [pc, #212]	@ (8004a84 <UART_SetConfig+0x2dc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d12a      	bne.n	8004a08 <UART_SetConfig+0x260>
 80049b2:	4b30      	ldr	r3, [pc, #192]	@ (8004a74 <UART_SetConfig+0x2cc>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c0:	d01a      	beq.n	80049f8 <UART_SetConfig+0x250>
 80049c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c6:	d81b      	bhi.n	8004a00 <UART_SetConfig+0x258>
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049cc:	d00c      	beq.n	80049e8 <UART_SetConfig+0x240>
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d2:	d815      	bhi.n	8004a00 <UART_SetConfig+0x258>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <UART_SetConfig+0x238>
 80049d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049dc:	d008      	beq.n	80049f0 <UART_SetConfig+0x248>
 80049de:	e00f      	b.n	8004a00 <UART_SetConfig+0x258>
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e6:	e052      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80049e8:	2302      	movs	r3, #2
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ee:	e04e      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80049f0:	2304      	movs	r3, #4
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e04a      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80049f8:	2308      	movs	r3, #8
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e046      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a00:	2310      	movs	r3, #16
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e042      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a17      	ldr	r2, [pc, #92]	@ (8004a6c <UART_SetConfig+0x2c4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d13a      	bne.n	8004a88 <UART_SetConfig+0x2e0>
 8004a12:	4b18      	ldr	r3, [pc, #96]	@ (8004a74 <UART_SetConfig+0x2cc>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a20:	d01a      	beq.n	8004a58 <UART_SetConfig+0x2b0>
 8004a22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a26:	d81b      	bhi.n	8004a60 <UART_SetConfig+0x2b8>
 8004a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2c:	d00c      	beq.n	8004a48 <UART_SetConfig+0x2a0>
 8004a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a32:	d815      	bhi.n	8004a60 <UART_SetConfig+0x2b8>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <UART_SetConfig+0x298>
 8004a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3c:	d008      	beq.n	8004a50 <UART_SetConfig+0x2a8>
 8004a3e:	e00f      	b.n	8004a60 <UART_SetConfig+0x2b8>
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a46:	e022      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4e:	e01e      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a50:	2304      	movs	r3, #4
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e01a      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5e:	e016      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a60:	2310      	movs	r3, #16
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e012      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a68:	efff69f3 	.word	0xefff69f3
 8004a6c:	40008000 	.word	0x40008000
 8004a70:	40013800 	.word	0x40013800
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40004400 	.word	0x40004400
 8004a7c:	40004800 	.word	0x40004800
 8004a80:	40004c00 	.word	0x40004c00
 8004a84:	40005000 	.word	0x40005000
 8004a88:	2310      	movs	r3, #16
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a9f      	ldr	r2, [pc, #636]	@ (8004d10 <UART_SetConfig+0x568>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d17a      	bne.n	8004b8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d824      	bhi.n	8004aea <UART_SetConfig+0x342>
 8004aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <UART_SetConfig+0x300>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004acd 	.word	0x08004acd
 8004aac:	08004aeb 	.word	0x08004aeb
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004aeb 	.word	0x08004aeb
 8004ab8:	08004adb 	.word	0x08004adb
 8004abc:	08004aeb 	.word	0x08004aeb
 8004ac0:	08004aeb 	.word	0x08004aeb
 8004ac4:	08004aeb 	.word	0x08004aeb
 8004ac8:	08004ae3 	.word	0x08004ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004acc:	f7fe f946 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8004ad0:	61f8      	str	r0, [r7, #28]
        break;
 8004ad2:	e010      	b.n	8004af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad4:	4b8f      	ldr	r3, [pc, #572]	@ (8004d14 <UART_SetConfig+0x56c>)
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e00d      	b.n	8004af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ada:	f7fe f8a7 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8004ade:	61f8      	str	r0, [r7, #28]
        break;
 8004ae0:	e009      	b.n	8004af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae6:	61fb      	str	r3, [r7, #28]
        break;
 8004ae8:	e005      	b.n	8004af6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004af4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80fb 	beq.w	8004cf4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d305      	bcc.n	8004b1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d903      	bls.n	8004b22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b20:	e0e8      	b.n	8004cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	2200      	movs	r2, #0
 8004b26:	461c      	mov	r4, r3
 8004b28:	4615      	mov	r5, r2
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	022b      	lsls	r3, r5, #8
 8004b34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b38:	0222      	lsls	r2, r4, #8
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	6849      	ldr	r1, [r1, #4]
 8004b3e:	0849      	lsrs	r1, r1, #1
 8004b40:	2000      	movs	r0, #0
 8004b42:	4688      	mov	r8, r1
 8004b44:	4681      	mov	r9, r0
 8004b46:	eb12 0a08 	adds.w	sl, r2, r8
 8004b4a:	eb43 0b09 	adc.w	fp, r3, r9
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5c:	4650      	mov	r0, sl
 8004b5e:	4659      	mov	r1, fp
 8004b60:	f7fb ff7c 	bl	8000a5c <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b72:	d308      	bcc.n	8004b86 <UART_SetConfig+0x3de>
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b7a:	d204      	bcs.n	8004b86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	60da      	str	r2, [r3, #12]
 8004b84:	e0b6      	b.n	8004cf4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b8c:	e0b2      	b.n	8004cf4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b96:	d15e      	bne.n	8004c56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d828      	bhi.n	8004bf2 <UART_SetConfig+0x44a>
 8004ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <UART_SetConfig+0x400>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004bd5 	.word	0x08004bd5
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004bf3 	.word	0x08004bf3
 8004bb8:	08004be3 	.word	0x08004be3
 8004bbc:	08004bf3 	.word	0x08004bf3
 8004bc0:	08004bf3 	.word	0x08004bf3
 8004bc4:	08004bf3 	.word	0x08004bf3
 8004bc8:	08004beb 	.word	0x08004beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bcc:	f7fe f8c6 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8004bd0:	61f8      	str	r0, [r7, #28]
        break;
 8004bd2:	e014      	b.n	8004bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd4:	f7fe f8d8 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8004bd8:	61f8      	str	r0, [r7, #28]
        break;
 8004bda:	e010      	b.n	8004bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8004d14 <UART_SetConfig+0x56c>)
 8004bde:	61fb      	str	r3, [r7, #28]
        break;
 8004be0:	e00d      	b.n	8004bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be2:	f7fe f823 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8004be6:	61f8      	str	r0, [r7, #28]
        break;
 8004be8:	e009      	b.n	8004bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bee:	61fb      	str	r3, [r7, #28]
        break;
 8004bf0:	e005      	b.n	8004bfe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d077      	beq.n	8004cf4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	005a      	lsls	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	441a      	add	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b0f      	cmp	r3, #15
 8004c1e:	d916      	bls.n	8004c4e <UART_SetConfig+0x4a6>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c26:	d212      	bcs.n	8004c4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f023 030f 	bic.w	r3, r3, #15
 8004c30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	8afb      	ldrh	r3, [r7, #22]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	8afa      	ldrh	r2, [r7, #22]
 8004c4a:	60da      	str	r2, [r3, #12]
 8004c4c:	e052      	b.n	8004cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c54:	e04e      	b.n	8004cf4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d827      	bhi.n	8004cae <UART_SetConfig+0x506>
 8004c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c64 <UART_SetConfig+0x4bc>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004c89 	.word	0x08004c89
 8004c68:	08004c91 	.word	0x08004c91
 8004c6c:	08004c99 	.word	0x08004c99
 8004c70:	08004caf 	.word	0x08004caf
 8004c74:	08004c9f 	.word	0x08004c9f
 8004c78:	08004caf 	.word	0x08004caf
 8004c7c:	08004caf 	.word	0x08004caf
 8004c80:	08004caf 	.word	0x08004caf
 8004c84:	08004ca7 	.word	0x08004ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c88:	f7fe f868 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8004c8c:	61f8      	str	r0, [r7, #28]
        break;
 8004c8e:	e014      	b.n	8004cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c90:	f7fe f87a 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8004c94:	61f8      	str	r0, [r7, #28]
        break;
 8004c96:	e010      	b.n	8004cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c98:	4b1e      	ldr	r3, [pc, #120]	@ (8004d14 <UART_SetConfig+0x56c>)
 8004c9a:	61fb      	str	r3, [r7, #28]
        break;
 8004c9c:	e00d      	b.n	8004cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9e:	f7fd ffc5 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8004ca2:	61f8      	str	r0, [r7, #28]
        break;
 8004ca4:	e009      	b.n	8004cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004caa:	61fb      	str	r3, [r7, #28]
        break;
 8004cac:	e005      	b.n	8004cba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cb8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d019      	beq.n	8004cf4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	085a      	lsrs	r2, r3, #1
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	441a      	add	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	d909      	bls.n	8004cee <UART_SetConfig+0x546>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce0:	d205      	bcs.n	8004cee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60da      	str	r2, [r3, #12]
 8004cec:	e002      	b.n	8004cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3728      	adds	r7, #40	@ 0x28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d0e:	bf00      	nop
 8004d10:	40008000 	.word	0x40008000
 8004d14:	00f42400 	.word	0x00f42400

08004d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e16:	d10a      	bne.n	8004e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b098      	sub	sp, #96	@ 0x60
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e6c:	f7fc fc06 	bl	800167c <HAL_GetTick>
 8004e70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d12e      	bne.n	8004ede <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f88c 	bl	8004fac <UART_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d021      	beq.n	8004ede <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e6      	bne.n	8004e9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e062      	b.n	8004fa4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d149      	bne.n	8004f80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f856 	bl	8004fac <UART_WaitOnFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d03c      	beq.n	8004f80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	623b      	str	r3, [r7, #32]
   return(result);
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e6      	bne.n	8004f06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f58:	61fa      	str	r2, [r7, #28]
 8004f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	69b9      	ldr	r1, [r7, #24]
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	617b      	str	r3, [r7, #20]
   return(result);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e011      	b.n	8004fa4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3758      	adds	r7, #88	@ 0x58
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbc:	e04f      	b.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d04b      	beq.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc6:	f7fc fb59 	bl	800167c <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e04e      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d037      	beq.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b80      	cmp	r3, #128	@ 0x80
 8004ff2:	d034      	beq.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b40      	cmp	r3, #64	@ 0x40
 8004ff8:	d031      	beq.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b08      	cmp	r3, #8
 8005006:	d110      	bne.n	800502a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2208      	movs	r2, #8
 800500e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f838 	bl	8005086 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2208      	movs	r2, #8
 800501a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e029      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005038:	d111      	bne.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f81e 	bl	8005086 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e00f      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4013      	ands	r3, r2
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	bf0c      	ite	eq
 800506e:	2301      	moveq	r3, #1
 8005070:	2300      	movne	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	429a      	cmp	r2, r3
 800507a:	d0a0      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005086:	b480      	push	{r7}
 8005088:	b095      	sub	sp, #84	@ 0x54
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80050ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e6      	bne.n	800508e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d118      	bne.n	800512e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	60bb      	str	r3, [r7, #8]
   return(result);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f023 0310 	bic.w	r3, r3, #16
 8005110:	647b      	str	r3, [r7, #68]	@ 0x44
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	613b      	str	r3, [r7, #16]
   return(result);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e6      	bne.n	80050fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005142:	bf00      	nop
 8005144:	3754      	adds	r7, #84	@ 0x54
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <sniprintf>:
 8005150:	b40c      	push	{r2, r3}
 8005152:	b530      	push	{r4, r5, lr}
 8005154:	4b18      	ldr	r3, [pc, #96]	@ (80051b8 <sniprintf+0x68>)
 8005156:	1e0c      	subs	r4, r1, #0
 8005158:	681d      	ldr	r5, [r3, #0]
 800515a:	b09d      	sub	sp, #116	@ 0x74
 800515c:	da08      	bge.n	8005170 <sniprintf+0x20>
 800515e:	238b      	movs	r3, #139	@ 0x8b
 8005160:	602b      	str	r3, [r5, #0]
 8005162:	f04f 30ff 	mov.w	r0, #4294967295
 8005166:	b01d      	add	sp, #116	@ 0x74
 8005168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800516c:	b002      	add	sp, #8
 800516e:	4770      	bx	lr
 8005170:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005174:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800517e:	bf14      	ite	ne
 8005180:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005184:	4623      	moveq	r3, r4
 8005186:	9304      	str	r3, [sp, #16]
 8005188:	9307      	str	r3, [sp, #28]
 800518a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800518e:	9002      	str	r0, [sp, #8]
 8005190:	9006      	str	r0, [sp, #24]
 8005192:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005196:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005198:	ab21      	add	r3, sp, #132	@ 0x84
 800519a:	a902      	add	r1, sp, #8
 800519c:	4628      	mov	r0, r5
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	f000 f994 	bl	80054cc <_svfiprintf_r>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	bfbc      	itt	lt
 80051a8:	238b      	movlt	r3, #139	@ 0x8b
 80051aa:	602b      	strlt	r3, [r5, #0]
 80051ac:	2c00      	cmp	r4, #0
 80051ae:	d0da      	beq.n	8005166 <sniprintf+0x16>
 80051b0:	9b02      	ldr	r3, [sp, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	e7d6      	b.n	8005166 <sniprintf+0x16>
 80051b8:	2000002c 	.word	0x2000002c

080051bc <memset>:
 80051bc:	4402      	add	r2, r0
 80051be:	4603      	mov	r3, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <__errno>:
 80051cc:	4b01      	ldr	r3, [pc, #4]	@ (80051d4 <__errno+0x8>)
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	2000002c 	.word	0x2000002c

080051d8 <__libc_init_array>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	4d0d      	ldr	r5, [pc, #52]	@ (8005210 <__libc_init_array+0x38>)
 80051dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005214 <__libc_init_array+0x3c>)
 80051de:	1b64      	subs	r4, r4, r5
 80051e0:	10a4      	asrs	r4, r4, #2
 80051e2:	2600      	movs	r6, #0
 80051e4:	42a6      	cmp	r6, r4
 80051e6:	d109      	bne.n	80051fc <__libc_init_array+0x24>
 80051e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005218 <__libc_init_array+0x40>)
 80051ea:	4c0c      	ldr	r4, [pc, #48]	@ (800521c <__libc_init_array+0x44>)
 80051ec:	f000 fc64 	bl	8005ab8 <_init>
 80051f0:	1b64      	subs	r4, r4, r5
 80051f2:	10a4      	asrs	r4, r4, #2
 80051f4:	2600      	movs	r6, #0
 80051f6:	42a6      	cmp	r6, r4
 80051f8:	d105      	bne.n	8005206 <__libc_init_array+0x2e>
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005200:	4798      	blx	r3
 8005202:	3601      	adds	r6, #1
 8005204:	e7ee      	b.n	80051e4 <__libc_init_array+0xc>
 8005206:	f855 3b04 	ldr.w	r3, [r5], #4
 800520a:	4798      	blx	r3
 800520c:	3601      	adds	r6, #1
 800520e:	e7f2      	b.n	80051f6 <__libc_init_array+0x1e>
 8005210:	08005b90 	.word	0x08005b90
 8005214:	08005b90 	.word	0x08005b90
 8005218:	08005b90 	.word	0x08005b90
 800521c:	08005b94 	.word	0x08005b94

08005220 <__retarget_lock_acquire_recursive>:
 8005220:	4770      	bx	lr

08005222 <__retarget_lock_release_recursive>:
 8005222:	4770      	bx	lr

08005224 <_free_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4605      	mov	r5, r0
 8005228:	2900      	cmp	r1, #0
 800522a:	d041      	beq.n	80052b0 <_free_r+0x8c>
 800522c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005230:	1f0c      	subs	r4, r1, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	bfb8      	it	lt
 8005236:	18e4      	addlt	r4, r4, r3
 8005238:	f000 f8e0 	bl	80053fc <__malloc_lock>
 800523c:	4a1d      	ldr	r2, [pc, #116]	@ (80052b4 <_free_r+0x90>)
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	b933      	cbnz	r3, 8005250 <_free_r+0x2c>
 8005242:	6063      	str	r3, [r4, #4]
 8005244:	6014      	str	r4, [r2, #0]
 8005246:	4628      	mov	r0, r5
 8005248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800524c:	f000 b8dc 	b.w	8005408 <__malloc_unlock>
 8005250:	42a3      	cmp	r3, r4
 8005252:	d908      	bls.n	8005266 <_free_r+0x42>
 8005254:	6820      	ldr	r0, [r4, #0]
 8005256:	1821      	adds	r1, r4, r0
 8005258:	428b      	cmp	r3, r1
 800525a:	bf01      	itttt	eq
 800525c:	6819      	ldreq	r1, [r3, #0]
 800525e:	685b      	ldreq	r3, [r3, #4]
 8005260:	1809      	addeq	r1, r1, r0
 8005262:	6021      	streq	r1, [r4, #0]
 8005264:	e7ed      	b.n	8005242 <_free_r+0x1e>
 8005266:	461a      	mov	r2, r3
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	b10b      	cbz	r3, 8005270 <_free_r+0x4c>
 800526c:	42a3      	cmp	r3, r4
 800526e:	d9fa      	bls.n	8005266 <_free_r+0x42>
 8005270:	6811      	ldr	r1, [r2, #0]
 8005272:	1850      	adds	r0, r2, r1
 8005274:	42a0      	cmp	r0, r4
 8005276:	d10b      	bne.n	8005290 <_free_r+0x6c>
 8005278:	6820      	ldr	r0, [r4, #0]
 800527a:	4401      	add	r1, r0
 800527c:	1850      	adds	r0, r2, r1
 800527e:	4283      	cmp	r3, r0
 8005280:	6011      	str	r1, [r2, #0]
 8005282:	d1e0      	bne.n	8005246 <_free_r+0x22>
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	6053      	str	r3, [r2, #4]
 800528a:	4408      	add	r0, r1
 800528c:	6010      	str	r0, [r2, #0]
 800528e:	e7da      	b.n	8005246 <_free_r+0x22>
 8005290:	d902      	bls.n	8005298 <_free_r+0x74>
 8005292:	230c      	movs	r3, #12
 8005294:	602b      	str	r3, [r5, #0]
 8005296:	e7d6      	b.n	8005246 <_free_r+0x22>
 8005298:	6820      	ldr	r0, [r4, #0]
 800529a:	1821      	adds	r1, r4, r0
 800529c:	428b      	cmp	r3, r1
 800529e:	bf04      	itt	eq
 80052a0:	6819      	ldreq	r1, [r3, #0]
 80052a2:	685b      	ldreq	r3, [r3, #4]
 80052a4:	6063      	str	r3, [r4, #4]
 80052a6:	bf04      	itt	eq
 80052a8:	1809      	addeq	r1, r1, r0
 80052aa:	6021      	streq	r1, [r4, #0]
 80052ac:	6054      	str	r4, [r2, #4]
 80052ae:	e7ca      	b.n	8005246 <_free_r+0x22>
 80052b0:	bd38      	pop	{r3, r4, r5, pc}
 80052b2:	bf00      	nop
 80052b4:	200002cc 	.word	0x200002cc

080052b8 <sbrk_aligned>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4e0f      	ldr	r6, [pc, #60]	@ (80052f8 <sbrk_aligned+0x40>)
 80052bc:	460c      	mov	r4, r1
 80052be:	6831      	ldr	r1, [r6, #0]
 80052c0:	4605      	mov	r5, r0
 80052c2:	b911      	cbnz	r1, 80052ca <sbrk_aligned+0x12>
 80052c4:	f000 fba4 	bl	8005a10 <_sbrk_r>
 80052c8:	6030      	str	r0, [r6, #0]
 80052ca:	4621      	mov	r1, r4
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 fb9f 	bl	8005a10 <_sbrk_r>
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	d103      	bne.n	80052de <sbrk_aligned+0x26>
 80052d6:	f04f 34ff 	mov.w	r4, #4294967295
 80052da:	4620      	mov	r0, r4
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
 80052de:	1cc4      	adds	r4, r0, #3
 80052e0:	f024 0403 	bic.w	r4, r4, #3
 80052e4:	42a0      	cmp	r0, r4
 80052e6:	d0f8      	beq.n	80052da <sbrk_aligned+0x22>
 80052e8:	1a21      	subs	r1, r4, r0
 80052ea:	4628      	mov	r0, r5
 80052ec:	f000 fb90 	bl	8005a10 <_sbrk_r>
 80052f0:	3001      	adds	r0, #1
 80052f2:	d1f2      	bne.n	80052da <sbrk_aligned+0x22>
 80052f4:	e7ef      	b.n	80052d6 <sbrk_aligned+0x1e>
 80052f6:	bf00      	nop
 80052f8:	200002c8 	.word	0x200002c8

080052fc <_malloc_r>:
 80052fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005300:	1ccd      	adds	r5, r1, #3
 8005302:	f025 0503 	bic.w	r5, r5, #3
 8005306:	3508      	adds	r5, #8
 8005308:	2d0c      	cmp	r5, #12
 800530a:	bf38      	it	cc
 800530c:	250c      	movcc	r5, #12
 800530e:	2d00      	cmp	r5, #0
 8005310:	4606      	mov	r6, r0
 8005312:	db01      	blt.n	8005318 <_malloc_r+0x1c>
 8005314:	42a9      	cmp	r1, r5
 8005316:	d904      	bls.n	8005322 <_malloc_r+0x26>
 8005318:	230c      	movs	r3, #12
 800531a:	6033      	str	r3, [r6, #0]
 800531c:	2000      	movs	r0, #0
 800531e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053f8 <_malloc_r+0xfc>
 8005326:	f000 f869 	bl	80053fc <__malloc_lock>
 800532a:	f8d8 3000 	ldr.w	r3, [r8]
 800532e:	461c      	mov	r4, r3
 8005330:	bb44      	cbnz	r4, 8005384 <_malloc_r+0x88>
 8005332:	4629      	mov	r1, r5
 8005334:	4630      	mov	r0, r6
 8005336:	f7ff ffbf 	bl	80052b8 <sbrk_aligned>
 800533a:	1c43      	adds	r3, r0, #1
 800533c:	4604      	mov	r4, r0
 800533e:	d158      	bne.n	80053f2 <_malloc_r+0xf6>
 8005340:	f8d8 4000 	ldr.w	r4, [r8]
 8005344:	4627      	mov	r7, r4
 8005346:	2f00      	cmp	r7, #0
 8005348:	d143      	bne.n	80053d2 <_malloc_r+0xd6>
 800534a:	2c00      	cmp	r4, #0
 800534c:	d04b      	beq.n	80053e6 <_malloc_r+0xea>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	4639      	mov	r1, r7
 8005352:	4630      	mov	r0, r6
 8005354:	eb04 0903 	add.w	r9, r4, r3
 8005358:	f000 fb5a 	bl	8005a10 <_sbrk_r>
 800535c:	4581      	cmp	r9, r0
 800535e:	d142      	bne.n	80053e6 <_malloc_r+0xea>
 8005360:	6821      	ldr	r1, [r4, #0]
 8005362:	1a6d      	subs	r5, r5, r1
 8005364:	4629      	mov	r1, r5
 8005366:	4630      	mov	r0, r6
 8005368:	f7ff ffa6 	bl	80052b8 <sbrk_aligned>
 800536c:	3001      	adds	r0, #1
 800536e:	d03a      	beq.n	80053e6 <_malloc_r+0xea>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	442b      	add	r3, r5
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	f8d8 3000 	ldr.w	r3, [r8]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	bb62      	cbnz	r2, 80053d8 <_malloc_r+0xdc>
 800537e:	f8c8 7000 	str.w	r7, [r8]
 8005382:	e00f      	b.n	80053a4 <_malloc_r+0xa8>
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	1b52      	subs	r2, r2, r5
 8005388:	d420      	bmi.n	80053cc <_malloc_r+0xd0>
 800538a:	2a0b      	cmp	r2, #11
 800538c:	d917      	bls.n	80053be <_malloc_r+0xc2>
 800538e:	1961      	adds	r1, r4, r5
 8005390:	42a3      	cmp	r3, r4
 8005392:	6025      	str	r5, [r4, #0]
 8005394:	bf18      	it	ne
 8005396:	6059      	strne	r1, [r3, #4]
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	bf08      	it	eq
 800539c:	f8c8 1000 	streq.w	r1, [r8]
 80053a0:	5162      	str	r2, [r4, r5]
 80053a2:	604b      	str	r3, [r1, #4]
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 f82f 	bl	8005408 <__malloc_unlock>
 80053aa:	f104 000b 	add.w	r0, r4, #11
 80053ae:	1d23      	adds	r3, r4, #4
 80053b0:	f020 0007 	bic.w	r0, r0, #7
 80053b4:	1ac2      	subs	r2, r0, r3
 80053b6:	bf1c      	itt	ne
 80053b8:	1a1b      	subne	r3, r3, r0
 80053ba:	50a3      	strne	r3, [r4, r2]
 80053bc:	e7af      	b.n	800531e <_malloc_r+0x22>
 80053be:	6862      	ldr	r2, [r4, #4]
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	bf0c      	ite	eq
 80053c4:	f8c8 2000 	streq.w	r2, [r8]
 80053c8:	605a      	strne	r2, [r3, #4]
 80053ca:	e7eb      	b.n	80053a4 <_malloc_r+0xa8>
 80053cc:	4623      	mov	r3, r4
 80053ce:	6864      	ldr	r4, [r4, #4]
 80053d0:	e7ae      	b.n	8005330 <_malloc_r+0x34>
 80053d2:	463c      	mov	r4, r7
 80053d4:	687f      	ldr	r7, [r7, #4]
 80053d6:	e7b6      	b.n	8005346 <_malloc_r+0x4a>
 80053d8:	461a      	mov	r2, r3
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	42a3      	cmp	r3, r4
 80053de:	d1fb      	bne.n	80053d8 <_malloc_r+0xdc>
 80053e0:	2300      	movs	r3, #0
 80053e2:	6053      	str	r3, [r2, #4]
 80053e4:	e7de      	b.n	80053a4 <_malloc_r+0xa8>
 80053e6:	230c      	movs	r3, #12
 80053e8:	6033      	str	r3, [r6, #0]
 80053ea:	4630      	mov	r0, r6
 80053ec:	f000 f80c 	bl	8005408 <__malloc_unlock>
 80053f0:	e794      	b.n	800531c <_malloc_r+0x20>
 80053f2:	6005      	str	r5, [r0, #0]
 80053f4:	e7d6      	b.n	80053a4 <_malloc_r+0xa8>
 80053f6:	bf00      	nop
 80053f8:	200002cc 	.word	0x200002cc

080053fc <__malloc_lock>:
 80053fc:	4801      	ldr	r0, [pc, #4]	@ (8005404 <__malloc_lock+0x8>)
 80053fe:	f7ff bf0f 	b.w	8005220 <__retarget_lock_acquire_recursive>
 8005402:	bf00      	nop
 8005404:	200002c4 	.word	0x200002c4

08005408 <__malloc_unlock>:
 8005408:	4801      	ldr	r0, [pc, #4]	@ (8005410 <__malloc_unlock+0x8>)
 800540a:	f7ff bf0a 	b.w	8005222 <__retarget_lock_release_recursive>
 800540e:	bf00      	nop
 8005410:	200002c4 	.word	0x200002c4

08005414 <__ssputs_r>:
 8005414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005418:	688e      	ldr	r6, [r1, #8]
 800541a:	461f      	mov	r7, r3
 800541c:	42be      	cmp	r6, r7
 800541e:	680b      	ldr	r3, [r1, #0]
 8005420:	4682      	mov	sl, r0
 8005422:	460c      	mov	r4, r1
 8005424:	4690      	mov	r8, r2
 8005426:	d82d      	bhi.n	8005484 <__ssputs_r+0x70>
 8005428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800542c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005430:	d026      	beq.n	8005480 <__ssputs_r+0x6c>
 8005432:	6965      	ldr	r5, [r4, #20]
 8005434:	6909      	ldr	r1, [r1, #16]
 8005436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800543a:	eba3 0901 	sub.w	r9, r3, r1
 800543e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005442:	1c7b      	adds	r3, r7, #1
 8005444:	444b      	add	r3, r9
 8005446:	106d      	asrs	r5, r5, #1
 8005448:	429d      	cmp	r5, r3
 800544a:	bf38      	it	cc
 800544c:	461d      	movcc	r5, r3
 800544e:	0553      	lsls	r3, r2, #21
 8005450:	d527      	bpl.n	80054a2 <__ssputs_r+0x8e>
 8005452:	4629      	mov	r1, r5
 8005454:	f7ff ff52 	bl	80052fc <_malloc_r>
 8005458:	4606      	mov	r6, r0
 800545a:	b360      	cbz	r0, 80054b6 <__ssputs_r+0xa2>
 800545c:	6921      	ldr	r1, [r4, #16]
 800545e:	464a      	mov	r2, r9
 8005460:	f000 fae6 	bl	8005a30 <memcpy>
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800546a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800546e:	81a3      	strh	r3, [r4, #12]
 8005470:	6126      	str	r6, [r4, #16]
 8005472:	6165      	str	r5, [r4, #20]
 8005474:	444e      	add	r6, r9
 8005476:	eba5 0509 	sub.w	r5, r5, r9
 800547a:	6026      	str	r6, [r4, #0]
 800547c:	60a5      	str	r5, [r4, #8]
 800547e:	463e      	mov	r6, r7
 8005480:	42be      	cmp	r6, r7
 8005482:	d900      	bls.n	8005486 <__ssputs_r+0x72>
 8005484:	463e      	mov	r6, r7
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	4632      	mov	r2, r6
 800548a:	4641      	mov	r1, r8
 800548c:	f000 faa6 	bl	80059dc <memmove>
 8005490:	68a3      	ldr	r3, [r4, #8]
 8005492:	1b9b      	subs	r3, r3, r6
 8005494:	60a3      	str	r3, [r4, #8]
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	4433      	add	r3, r6
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	2000      	movs	r0, #0
 800549e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a2:	462a      	mov	r2, r5
 80054a4:	f000 fad2 	bl	8005a4c <_realloc_r>
 80054a8:	4606      	mov	r6, r0
 80054aa:	2800      	cmp	r0, #0
 80054ac:	d1e0      	bne.n	8005470 <__ssputs_r+0x5c>
 80054ae:	6921      	ldr	r1, [r4, #16]
 80054b0:	4650      	mov	r0, sl
 80054b2:	f7ff feb7 	bl	8005224 <_free_r>
 80054b6:	230c      	movs	r3, #12
 80054b8:	f8ca 3000 	str.w	r3, [sl]
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	e7e9      	b.n	800549e <__ssputs_r+0x8a>
	...

080054cc <_svfiprintf_r>:
 80054cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d0:	4698      	mov	r8, r3
 80054d2:	898b      	ldrh	r3, [r1, #12]
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	b09d      	sub	sp, #116	@ 0x74
 80054d8:	4607      	mov	r7, r0
 80054da:	460d      	mov	r5, r1
 80054dc:	4614      	mov	r4, r2
 80054de:	d510      	bpl.n	8005502 <_svfiprintf_r+0x36>
 80054e0:	690b      	ldr	r3, [r1, #16]
 80054e2:	b973      	cbnz	r3, 8005502 <_svfiprintf_r+0x36>
 80054e4:	2140      	movs	r1, #64	@ 0x40
 80054e6:	f7ff ff09 	bl	80052fc <_malloc_r>
 80054ea:	6028      	str	r0, [r5, #0]
 80054ec:	6128      	str	r0, [r5, #16]
 80054ee:	b930      	cbnz	r0, 80054fe <_svfiprintf_r+0x32>
 80054f0:	230c      	movs	r3, #12
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	b01d      	add	sp, #116	@ 0x74
 80054fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fe:	2340      	movs	r3, #64	@ 0x40
 8005500:	616b      	str	r3, [r5, #20]
 8005502:	2300      	movs	r3, #0
 8005504:	9309      	str	r3, [sp, #36]	@ 0x24
 8005506:	2320      	movs	r3, #32
 8005508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800550c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005510:	2330      	movs	r3, #48	@ 0x30
 8005512:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80056b0 <_svfiprintf_r+0x1e4>
 8005516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800551a:	f04f 0901 	mov.w	r9, #1
 800551e:	4623      	mov	r3, r4
 8005520:	469a      	mov	sl, r3
 8005522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005526:	b10a      	cbz	r2, 800552c <_svfiprintf_r+0x60>
 8005528:	2a25      	cmp	r2, #37	@ 0x25
 800552a:	d1f9      	bne.n	8005520 <_svfiprintf_r+0x54>
 800552c:	ebba 0b04 	subs.w	fp, sl, r4
 8005530:	d00b      	beq.n	800554a <_svfiprintf_r+0x7e>
 8005532:	465b      	mov	r3, fp
 8005534:	4622      	mov	r2, r4
 8005536:	4629      	mov	r1, r5
 8005538:	4638      	mov	r0, r7
 800553a:	f7ff ff6b 	bl	8005414 <__ssputs_r>
 800553e:	3001      	adds	r0, #1
 8005540:	f000 80a7 	beq.w	8005692 <_svfiprintf_r+0x1c6>
 8005544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005546:	445a      	add	r2, fp
 8005548:	9209      	str	r2, [sp, #36]	@ 0x24
 800554a:	f89a 3000 	ldrb.w	r3, [sl]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 809f 	beq.w	8005692 <_svfiprintf_r+0x1c6>
 8005554:	2300      	movs	r3, #0
 8005556:	f04f 32ff 	mov.w	r2, #4294967295
 800555a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800555e:	f10a 0a01 	add.w	sl, sl, #1
 8005562:	9304      	str	r3, [sp, #16]
 8005564:	9307      	str	r3, [sp, #28]
 8005566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800556a:	931a      	str	r3, [sp, #104]	@ 0x68
 800556c:	4654      	mov	r4, sl
 800556e:	2205      	movs	r2, #5
 8005570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005574:	484e      	ldr	r0, [pc, #312]	@ (80056b0 <_svfiprintf_r+0x1e4>)
 8005576:	f7fa fe33 	bl	80001e0 <memchr>
 800557a:	9a04      	ldr	r2, [sp, #16]
 800557c:	b9d8      	cbnz	r0, 80055b6 <_svfiprintf_r+0xea>
 800557e:	06d0      	lsls	r0, r2, #27
 8005580:	bf44      	itt	mi
 8005582:	2320      	movmi	r3, #32
 8005584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005588:	0711      	lsls	r1, r2, #28
 800558a:	bf44      	itt	mi
 800558c:	232b      	movmi	r3, #43	@ 0x2b
 800558e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005592:	f89a 3000 	ldrb.w	r3, [sl]
 8005596:	2b2a      	cmp	r3, #42	@ 0x2a
 8005598:	d015      	beq.n	80055c6 <_svfiprintf_r+0xfa>
 800559a:	9a07      	ldr	r2, [sp, #28]
 800559c:	4654      	mov	r4, sl
 800559e:	2000      	movs	r0, #0
 80055a0:	f04f 0c0a 	mov.w	ip, #10
 80055a4:	4621      	mov	r1, r4
 80055a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055aa:	3b30      	subs	r3, #48	@ 0x30
 80055ac:	2b09      	cmp	r3, #9
 80055ae:	d94b      	bls.n	8005648 <_svfiprintf_r+0x17c>
 80055b0:	b1b0      	cbz	r0, 80055e0 <_svfiprintf_r+0x114>
 80055b2:	9207      	str	r2, [sp, #28]
 80055b4:	e014      	b.n	80055e0 <_svfiprintf_r+0x114>
 80055b6:	eba0 0308 	sub.w	r3, r0, r8
 80055ba:	fa09 f303 	lsl.w	r3, r9, r3
 80055be:	4313      	orrs	r3, r2
 80055c0:	9304      	str	r3, [sp, #16]
 80055c2:	46a2      	mov	sl, r4
 80055c4:	e7d2      	b.n	800556c <_svfiprintf_r+0xa0>
 80055c6:	9b03      	ldr	r3, [sp, #12]
 80055c8:	1d19      	adds	r1, r3, #4
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	9103      	str	r1, [sp, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bfbb      	ittet	lt
 80055d2:	425b      	neglt	r3, r3
 80055d4:	f042 0202 	orrlt.w	r2, r2, #2
 80055d8:	9307      	strge	r3, [sp, #28]
 80055da:	9307      	strlt	r3, [sp, #28]
 80055dc:	bfb8      	it	lt
 80055de:	9204      	strlt	r2, [sp, #16]
 80055e0:	7823      	ldrb	r3, [r4, #0]
 80055e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80055e4:	d10a      	bne.n	80055fc <_svfiprintf_r+0x130>
 80055e6:	7863      	ldrb	r3, [r4, #1]
 80055e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80055ea:	d132      	bne.n	8005652 <_svfiprintf_r+0x186>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	1d1a      	adds	r2, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	9203      	str	r2, [sp, #12]
 80055f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055f8:	3402      	adds	r4, #2
 80055fa:	9305      	str	r3, [sp, #20]
 80055fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056c0 <_svfiprintf_r+0x1f4>
 8005600:	7821      	ldrb	r1, [r4, #0]
 8005602:	2203      	movs	r2, #3
 8005604:	4650      	mov	r0, sl
 8005606:	f7fa fdeb 	bl	80001e0 <memchr>
 800560a:	b138      	cbz	r0, 800561c <_svfiprintf_r+0x150>
 800560c:	9b04      	ldr	r3, [sp, #16]
 800560e:	eba0 000a 	sub.w	r0, r0, sl
 8005612:	2240      	movs	r2, #64	@ 0x40
 8005614:	4082      	lsls	r2, r0
 8005616:	4313      	orrs	r3, r2
 8005618:	3401      	adds	r4, #1
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005620:	4824      	ldr	r0, [pc, #144]	@ (80056b4 <_svfiprintf_r+0x1e8>)
 8005622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005626:	2206      	movs	r2, #6
 8005628:	f7fa fdda 	bl	80001e0 <memchr>
 800562c:	2800      	cmp	r0, #0
 800562e:	d036      	beq.n	800569e <_svfiprintf_r+0x1d2>
 8005630:	4b21      	ldr	r3, [pc, #132]	@ (80056b8 <_svfiprintf_r+0x1ec>)
 8005632:	bb1b      	cbnz	r3, 800567c <_svfiprintf_r+0x1b0>
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	3307      	adds	r3, #7
 8005638:	f023 0307 	bic.w	r3, r3, #7
 800563c:	3308      	adds	r3, #8
 800563e:	9303      	str	r3, [sp, #12]
 8005640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005642:	4433      	add	r3, r6
 8005644:	9309      	str	r3, [sp, #36]	@ 0x24
 8005646:	e76a      	b.n	800551e <_svfiprintf_r+0x52>
 8005648:	fb0c 3202 	mla	r2, ip, r2, r3
 800564c:	460c      	mov	r4, r1
 800564e:	2001      	movs	r0, #1
 8005650:	e7a8      	b.n	80055a4 <_svfiprintf_r+0xd8>
 8005652:	2300      	movs	r3, #0
 8005654:	3401      	adds	r4, #1
 8005656:	9305      	str	r3, [sp, #20]
 8005658:	4619      	mov	r1, r3
 800565a:	f04f 0c0a 	mov.w	ip, #10
 800565e:	4620      	mov	r0, r4
 8005660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005664:	3a30      	subs	r2, #48	@ 0x30
 8005666:	2a09      	cmp	r2, #9
 8005668:	d903      	bls.n	8005672 <_svfiprintf_r+0x1a6>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0c6      	beq.n	80055fc <_svfiprintf_r+0x130>
 800566e:	9105      	str	r1, [sp, #20]
 8005670:	e7c4      	b.n	80055fc <_svfiprintf_r+0x130>
 8005672:	fb0c 2101 	mla	r1, ip, r1, r2
 8005676:	4604      	mov	r4, r0
 8005678:	2301      	movs	r3, #1
 800567a:	e7f0      	b.n	800565e <_svfiprintf_r+0x192>
 800567c:	ab03      	add	r3, sp, #12
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	462a      	mov	r2, r5
 8005682:	4b0e      	ldr	r3, [pc, #56]	@ (80056bc <_svfiprintf_r+0x1f0>)
 8005684:	a904      	add	r1, sp, #16
 8005686:	4638      	mov	r0, r7
 8005688:	f3af 8000 	nop.w
 800568c:	1c42      	adds	r2, r0, #1
 800568e:	4606      	mov	r6, r0
 8005690:	d1d6      	bne.n	8005640 <_svfiprintf_r+0x174>
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	065b      	lsls	r3, r3, #25
 8005696:	f53f af2d 	bmi.w	80054f4 <_svfiprintf_r+0x28>
 800569a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800569c:	e72c      	b.n	80054f8 <_svfiprintf_r+0x2c>
 800569e:	ab03      	add	r3, sp, #12
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	462a      	mov	r2, r5
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <_svfiprintf_r+0x1f0>)
 80056a6:	a904      	add	r1, sp, #16
 80056a8:	4638      	mov	r0, r7
 80056aa:	f000 f879 	bl	80057a0 <_printf_i>
 80056ae:	e7ed      	b.n	800568c <_svfiprintf_r+0x1c0>
 80056b0:	08005b54 	.word	0x08005b54
 80056b4:	08005b5e 	.word	0x08005b5e
 80056b8:	00000000 	.word	0x00000000
 80056bc:	08005415 	.word	0x08005415
 80056c0:	08005b5a 	.word	0x08005b5a

080056c4 <_printf_common>:
 80056c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	4616      	mov	r6, r2
 80056ca:	4698      	mov	r8, r3
 80056cc:	688a      	ldr	r2, [r1, #8]
 80056ce:	690b      	ldr	r3, [r1, #16]
 80056d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056d4:	4293      	cmp	r3, r2
 80056d6:	bfb8      	it	lt
 80056d8:	4613      	movlt	r3, r2
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056e0:	4607      	mov	r7, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	b10a      	cbz	r2, 80056ea <_printf_common+0x26>
 80056e6:	3301      	adds	r3, #1
 80056e8:	6033      	str	r3, [r6, #0]
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	0699      	lsls	r1, r3, #26
 80056ee:	bf42      	ittt	mi
 80056f0:	6833      	ldrmi	r3, [r6, #0]
 80056f2:	3302      	addmi	r3, #2
 80056f4:	6033      	strmi	r3, [r6, #0]
 80056f6:	6825      	ldr	r5, [r4, #0]
 80056f8:	f015 0506 	ands.w	r5, r5, #6
 80056fc:	d106      	bne.n	800570c <_printf_common+0x48>
 80056fe:	f104 0a19 	add.w	sl, r4, #25
 8005702:	68e3      	ldr	r3, [r4, #12]
 8005704:	6832      	ldr	r2, [r6, #0]
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	42ab      	cmp	r3, r5
 800570a:	dc26      	bgt.n	800575a <_printf_common+0x96>
 800570c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	3b00      	subs	r3, #0
 8005714:	bf18      	it	ne
 8005716:	2301      	movne	r3, #1
 8005718:	0692      	lsls	r2, r2, #26
 800571a:	d42b      	bmi.n	8005774 <_printf_common+0xb0>
 800571c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005720:	4641      	mov	r1, r8
 8005722:	4638      	mov	r0, r7
 8005724:	47c8      	blx	r9
 8005726:	3001      	adds	r0, #1
 8005728:	d01e      	beq.n	8005768 <_printf_common+0xa4>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	6922      	ldr	r2, [r4, #16]
 800572e:	f003 0306 	and.w	r3, r3, #6
 8005732:	2b04      	cmp	r3, #4
 8005734:	bf02      	ittt	eq
 8005736:	68e5      	ldreq	r5, [r4, #12]
 8005738:	6833      	ldreq	r3, [r6, #0]
 800573a:	1aed      	subeq	r5, r5, r3
 800573c:	68a3      	ldr	r3, [r4, #8]
 800573e:	bf0c      	ite	eq
 8005740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005744:	2500      	movne	r5, #0
 8005746:	4293      	cmp	r3, r2
 8005748:	bfc4      	itt	gt
 800574a:	1a9b      	subgt	r3, r3, r2
 800574c:	18ed      	addgt	r5, r5, r3
 800574e:	2600      	movs	r6, #0
 8005750:	341a      	adds	r4, #26
 8005752:	42b5      	cmp	r5, r6
 8005754:	d11a      	bne.n	800578c <_printf_common+0xc8>
 8005756:	2000      	movs	r0, #0
 8005758:	e008      	b.n	800576c <_printf_common+0xa8>
 800575a:	2301      	movs	r3, #1
 800575c:	4652      	mov	r2, sl
 800575e:	4641      	mov	r1, r8
 8005760:	4638      	mov	r0, r7
 8005762:	47c8      	blx	r9
 8005764:	3001      	adds	r0, #1
 8005766:	d103      	bne.n	8005770 <_printf_common+0xac>
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005770:	3501      	adds	r5, #1
 8005772:	e7c6      	b.n	8005702 <_printf_common+0x3e>
 8005774:	18e1      	adds	r1, r4, r3
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	2030      	movs	r0, #48	@ 0x30
 800577a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800577e:	4422      	add	r2, r4
 8005780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005788:	3302      	adds	r3, #2
 800578a:	e7c7      	b.n	800571c <_printf_common+0x58>
 800578c:	2301      	movs	r3, #1
 800578e:	4622      	mov	r2, r4
 8005790:	4641      	mov	r1, r8
 8005792:	4638      	mov	r0, r7
 8005794:	47c8      	blx	r9
 8005796:	3001      	adds	r0, #1
 8005798:	d0e6      	beq.n	8005768 <_printf_common+0xa4>
 800579a:	3601      	adds	r6, #1
 800579c:	e7d9      	b.n	8005752 <_printf_common+0x8e>
	...

080057a0 <_printf_i>:
 80057a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	7e0f      	ldrb	r7, [r1, #24]
 80057a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057a8:	2f78      	cmp	r7, #120	@ 0x78
 80057aa:	4691      	mov	r9, r2
 80057ac:	4680      	mov	r8, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	469a      	mov	sl, r3
 80057b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057b6:	d807      	bhi.n	80057c8 <_printf_i+0x28>
 80057b8:	2f62      	cmp	r7, #98	@ 0x62
 80057ba:	d80a      	bhi.n	80057d2 <_printf_i+0x32>
 80057bc:	2f00      	cmp	r7, #0
 80057be:	f000 80d1 	beq.w	8005964 <_printf_i+0x1c4>
 80057c2:	2f58      	cmp	r7, #88	@ 0x58
 80057c4:	f000 80b8 	beq.w	8005938 <_printf_i+0x198>
 80057c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057d0:	e03a      	b.n	8005848 <_printf_i+0xa8>
 80057d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057d6:	2b15      	cmp	r3, #21
 80057d8:	d8f6      	bhi.n	80057c8 <_printf_i+0x28>
 80057da:	a101      	add	r1, pc, #4	@ (adr r1, 80057e0 <_printf_i+0x40>)
 80057dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e0:	08005839 	.word	0x08005839
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	080057c9 	.word	0x080057c9
 80057ec:	080057c9 	.word	0x080057c9
 80057f0:	080057c9 	.word	0x080057c9
 80057f4:	080057c9 	.word	0x080057c9
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	080057c9 	.word	0x080057c9
 8005800:	080057c9 	.word	0x080057c9
 8005804:	080057c9 	.word	0x080057c9
 8005808:	080057c9 	.word	0x080057c9
 800580c:	0800594b 	.word	0x0800594b
 8005810:	08005877 	.word	0x08005877
 8005814:	08005905 	.word	0x08005905
 8005818:	080057c9 	.word	0x080057c9
 800581c:	080057c9 	.word	0x080057c9
 8005820:	0800596d 	.word	0x0800596d
 8005824:	080057c9 	.word	0x080057c9
 8005828:	08005877 	.word	0x08005877
 800582c:	080057c9 	.word	0x080057c9
 8005830:	080057c9 	.word	0x080057c9
 8005834:	0800590d 	.word	0x0800590d
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	1d1a      	adds	r2, r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6032      	str	r2, [r6, #0]
 8005840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005848:	2301      	movs	r3, #1
 800584a:	e09c      	b.n	8005986 <_printf_i+0x1e6>
 800584c:	6833      	ldr	r3, [r6, #0]
 800584e:	6820      	ldr	r0, [r4, #0]
 8005850:	1d19      	adds	r1, r3, #4
 8005852:	6031      	str	r1, [r6, #0]
 8005854:	0606      	lsls	r6, r0, #24
 8005856:	d501      	bpl.n	800585c <_printf_i+0xbc>
 8005858:	681d      	ldr	r5, [r3, #0]
 800585a:	e003      	b.n	8005864 <_printf_i+0xc4>
 800585c:	0645      	lsls	r5, r0, #25
 800585e:	d5fb      	bpl.n	8005858 <_printf_i+0xb8>
 8005860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005864:	2d00      	cmp	r5, #0
 8005866:	da03      	bge.n	8005870 <_printf_i+0xd0>
 8005868:	232d      	movs	r3, #45	@ 0x2d
 800586a:	426d      	negs	r5, r5
 800586c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005870:	4858      	ldr	r0, [pc, #352]	@ (80059d4 <_printf_i+0x234>)
 8005872:	230a      	movs	r3, #10
 8005874:	e011      	b.n	800589a <_printf_i+0xfa>
 8005876:	6821      	ldr	r1, [r4, #0]
 8005878:	6833      	ldr	r3, [r6, #0]
 800587a:	0608      	lsls	r0, r1, #24
 800587c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005880:	d402      	bmi.n	8005888 <_printf_i+0xe8>
 8005882:	0649      	lsls	r1, r1, #25
 8005884:	bf48      	it	mi
 8005886:	b2ad      	uxthmi	r5, r5
 8005888:	2f6f      	cmp	r7, #111	@ 0x6f
 800588a:	4852      	ldr	r0, [pc, #328]	@ (80059d4 <_printf_i+0x234>)
 800588c:	6033      	str	r3, [r6, #0]
 800588e:	bf14      	ite	ne
 8005890:	230a      	movne	r3, #10
 8005892:	2308      	moveq	r3, #8
 8005894:	2100      	movs	r1, #0
 8005896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800589a:	6866      	ldr	r6, [r4, #4]
 800589c:	60a6      	str	r6, [r4, #8]
 800589e:	2e00      	cmp	r6, #0
 80058a0:	db05      	blt.n	80058ae <_printf_i+0x10e>
 80058a2:	6821      	ldr	r1, [r4, #0]
 80058a4:	432e      	orrs	r6, r5
 80058a6:	f021 0104 	bic.w	r1, r1, #4
 80058aa:	6021      	str	r1, [r4, #0]
 80058ac:	d04b      	beq.n	8005946 <_printf_i+0x1a6>
 80058ae:	4616      	mov	r6, r2
 80058b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80058b4:	fb03 5711 	mls	r7, r3, r1, r5
 80058b8:	5dc7      	ldrb	r7, [r0, r7]
 80058ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058be:	462f      	mov	r7, r5
 80058c0:	42bb      	cmp	r3, r7
 80058c2:	460d      	mov	r5, r1
 80058c4:	d9f4      	bls.n	80058b0 <_printf_i+0x110>
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d10b      	bne.n	80058e2 <_printf_i+0x142>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	07df      	lsls	r7, r3, #31
 80058ce:	d508      	bpl.n	80058e2 <_printf_i+0x142>
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	6861      	ldr	r1, [r4, #4]
 80058d4:	4299      	cmp	r1, r3
 80058d6:	bfde      	ittt	le
 80058d8:	2330      	movle	r3, #48	@ 0x30
 80058da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058e2:	1b92      	subs	r2, r2, r6
 80058e4:	6122      	str	r2, [r4, #16]
 80058e6:	f8cd a000 	str.w	sl, [sp]
 80058ea:	464b      	mov	r3, r9
 80058ec:	aa03      	add	r2, sp, #12
 80058ee:	4621      	mov	r1, r4
 80058f0:	4640      	mov	r0, r8
 80058f2:	f7ff fee7 	bl	80056c4 <_printf_common>
 80058f6:	3001      	adds	r0, #1
 80058f8:	d14a      	bne.n	8005990 <_printf_i+0x1f0>
 80058fa:	f04f 30ff 	mov.w	r0, #4294967295
 80058fe:	b004      	add	sp, #16
 8005900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	f043 0320 	orr.w	r3, r3, #32
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	4832      	ldr	r0, [pc, #200]	@ (80059d8 <_printf_i+0x238>)
 800590e:	2778      	movs	r7, #120	@ 0x78
 8005910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	6831      	ldr	r1, [r6, #0]
 8005918:	061f      	lsls	r7, r3, #24
 800591a:	f851 5b04 	ldr.w	r5, [r1], #4
 800591e:	d402      	bmi.n	8005926 <_printf_i+0x186>
 8005920:	065f      	lsls	r7, r3, #25
 8005922:	bf48      	it	mi
 8005924:	b2ad      	uxthmi	r5, r5
 8005926:	6031      	str	r1, [r6, #0]
 8005928:	07d9      	lsls	r1, r3, #31
 800592a:	bf44      	itt	mi
 800592c:	f043 0320 	orrmi.w	r3, r3, #32
 8005930:	6023      	strmi	r3, [r4, #0]
 8005932:	b11d      	cbz	r5, 800593c <_printf_i+0x19c>
 8005934:	2310      	movs	r3, #16
 8005936:	e7ad      	b.n	8005894 <_printf_i+0xf4>
 8005938:	4826      	ldr	r0, [pc, #152]	@ (80059d4 <_printf_i+0x234>)
 800593a:	e7e9      	b.n	8005910 <_printf_i+0x170>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	f023 0320 	bic.w	r3, r3, #32
 8005942:	6023      	str	r3, [r4, #0]
 8005944:	e7f6      	b.n	8005934 <_printf_i+0x194>
 8005946:	4616      	mov	r6, r2
 8005948:	e7bd      	b.n	80058c6 <_printf_i+0x126>
 800594a:	6833      	ldr	r3, [r6, #0]
 800594c:	6825      	ldr	r5, [r4, #0]
 800594e:	6961      	ldr	r1, [r4, #20]
 8005950:	1d18      	adds	r0, r3, #4
 8005952:	6030      	str	r0, [r6, #0]
 8005954:	062e      	lsls	r6, r5, #24
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	d501      	bpl.n	800595e <_printf_i+0x1be>
 800595a:	6019      	str	r1, [r3, #0]
 800595c:	e002      	b.n	8005964 <_printf_i+0x1c4>
 800595e:	0668      	lsls	r0, r5, #25
 8005960:	d5fb      	bpl.n	800595a <_printf_i+0x1ba>
 8005962:	8019      	strh	r1, [r3, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	6123      	str	r3, [r4, #16]
 8005968:	4616      	mov	r6, r2
 800596a:	e7bc      	b.n	80058e6 <_printf_i+0x146>
 800596c:	6833      	ldr	r3, [r6, #0]
 800596e:	1d1a      	adds	r2, r3, #4
 8005970:	6032      	str	r2, [r6, #0]
 8005972:	681e      	ldr	r6, [r3, #0]
 8005974:	6862      	ldr	r2, [r4, #4]
 8005976:	2100      	movs	r1, #0
 8005978:	4630      	mov	r0, r6
 800597a:	f7fa fc31 	bl	80001e0 <memchr>
 800597e:	b108      	cbz	r0, 8005984 <_printf_i+0x1e4>
 8005980:	1b80      	subs	r0, r0, r6
 8005982:	6060      	str	r0, [r4, #4]
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	6123      	str	r3, [r4, #16]
 8005988:	2300      	movs	r3, #0
 800598a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800598e:	e7aa      	b.n	80058e6 <_printf_i+0x146>
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	4632      	mov	r2, r6
 8005994:	4649      	mov	r1, r9
 8005996:	4640      	mov	r0, r8
 8005998:	47d0      	blx	sl
 800599a:	3001      	adds	r0, #1
 800599c:	d0ad      	beq.n	80058fa <_printf_i+0x15a>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	079b      	lsls	r3, r3, #30
 80059a2:	d413      	bmi.n	80059cc <_printf_i+0x22c>
 80059a4:	68e0      	ldr	r0, [r4, #12]
 80059a6:	9b03      	ldr	r3, [sp, #12]
 80059a8:	4298      	cmp	r0, r3
 80059aa:	bfb8      	it	lt
 80059ac:	4618      	movlt	r0, r3
 80059ae:	e7a6      	b.n	80058fe <_printf_i+0x15e>
 80059b0:	2301      	movs	r3, #1
 80059b2:	4632      	mov	r2, r6
 80059b4:	4649      	mov	r1, r9
 80059b6:	4640      	mov	r0, r8
 80059b8:	47d0      	blx	sl
 80059ba:	3001      	adds	r0, #1
 80059bc:	d09d      	beq.n	80058fa <_printf_i+0x15a>
 80059be:	3501      	adds	r5, #1
 80059c0:	68e3      	ldr	r3, [r4, #12]
 80059c2:	9903      	ldr	r1, [sp, #12]
 80059c4:	1a5b      	subs	r3, r3, r1
 80059c6:	42ab      	cmp	r3, r5
 80059c8:	dcf2      	bgt.n	80059b0 <_printf_i+0x210>
 80059ca:	e7eb      	b.n	80059a4 <_printf_i+0x204>
 80059cc:	2500      	movs	r5, #0
 80059ce:	f104 0619 	add.w	r6, r4, #25
 80059d2:	e7f5      	b.n	80059c0 <_printf_i+0x220>
 80059d4:	08005b65 	.word	0x08005b65
 80059d8:	08005b76 	.word	0x08005b76

080059dc <memmove>:
 80059dc:	4288      	cmp	r0, r1
 80059de:	b510      	push	{r4, lr}
 80059e0:	eb01 0402 	add.w	r4, r1, r2
 80059e4:	d902      	bls.n	80059ec <memmove+0x10>
 80059e6:	4284      	cmp	r4, r0
 80059e8:	4623      	mov	r3, r4
 80059ea:	d807      	bhi.n	80059fc <memmove+0x20>
 80059ec:	1e43      	subs	r3, r0, #1
 80059ee:	42a1      	cmp	r1, r4
 80059f0:	d008      	beq.n	8005a04 <memmove+0x28>
 80059f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059fa:	e7f8      	b.n	80059ee <memmove+0x12>
 80059fc:	4402      	add	r2, r0
 80059fe:	4601      	mov	r1, r0
 8005a00:	428a      	cmp	r2, r1
 8005a02:	d100      	bne.n	8005a06 <memmove+0x2a>
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a0e:	e7f7      	b.n	8005a00 <memmove+0x24>

08005a10 <_sbrk_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4d06      	ldr	r5, [pc, #24]	@ (8005a2c <_sbrk_r+0x1c>)
 8005a14:	2300      	movs	r3, #0
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	f7fb fd4c 	bl	80014b8 <_sbrk>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_sbrk_r+0x1a>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_sbrk_r+0x1a>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	200002c0 	.word	0x200002c0

08005a30 <memcpy>:
 8005a30:	440a      	add	r2, r1
 8005a32:	4291      	cmp	r1, r2
 8005a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a38:	d100      	bne.n	8005a3c <memcpy+0xc>
 8005a3a:	4770      	bx	lr
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a46:	4291      	cmp	r1, r2
 8005a48:	d1f9      	bne.n	8005a3e <memcpy+0xe>
 8005a4a:	bd10      	pop	{r4, pc}

08005a4c <_realloc_r>:
 8005a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a50:	4607      	mov	r7, r0
 8005a52:	4614      	mov	r4, r2
 8005a54:	460d      	mov	r5, r1
 8005a56:	b921      	cbnz	r1, 8005a62 <_realloc_r+0x16>
 8005a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	f7ff bc4d 	b.w	80052fc <_malloc_r>
 8005a62:	b92a      	cbnz	r2, 8005a70 <_realloc_r+0x24>
 8005a64:	f7ff fbde 	bl	8005224 <_free_r>
 8005a68:	4625      	mov	r5, r4
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a70:	f000 f81a 	bl	8005aa8 <_malloc_usable_size_r>
 8005a74:	4284      	cmp	r4, r0
 8005a76:	4606      	mov	r6, r0
 8005a78:	d802      	bhi.n	8005a80 <_realloc_r+0x34>
 8005a7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a7e:	d8f4      	bhi.n	8005a6a <_realloc_r+0x1e>
 8005a80:	4621      	mov	r1, r4
 8005a82:	4638      	mov	r0, r7
 8005a84:	f7ff fc3a 	bl	80052fc <_malloc_r>
 8005a88:	4680      	mov	r8, r0
 8005a8a:	b908      	cbnz	r0, 8005a90 <_realloc_r+0x44>
 8005a8c:	4645      	mov	r5, r8
 8005a8e:	e7ec      	b.n	8005a6a <_realloc_r+0x1e>
 8005a90:	42b4      	cmp	r4, r6
 8005a92:	4622      	mov	r2, r4
 8005a94:	4629      	mov	r1, r5
 8005a96:	bf28      	it	cs
 8005a98:	4632      	movcs	r2, r6
 8005a9a:	f7ff ffc9 	bl	8005a30 <memcpy>
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	f7ff fbbf 	bl	8005224 <_free_r>
 8005aa6:	e7f1      	b.n	8005a8c <_realloc_r+0x40>

08005aa8 <_malloc_usable_size_r>:
 8005aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aac:	1f18      	subs	r0, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bfbc      	itt	lt
 8005ab2:	580b      	ldrlt	r3, [r1, r0]
 8005ab4:	18c0      	addlt	r0, r0, r3
 8005ab6:	4770      	bx	lr

08005ab8 <_init>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr

08005ac4 <_fini>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr

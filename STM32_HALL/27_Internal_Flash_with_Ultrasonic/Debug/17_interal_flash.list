
17_interal_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004140  08004140  00005140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d8  080041d8  0000607c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041d8  080041d8  000051d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041e0  080041e0  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041e0  080041e0  000051e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041e4  080041e4  000051e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080041e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000007c  08004264  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004264  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b385  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc0  00000000  00000000  00011431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  000131f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000797  00000000  00000000  00013be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025dcd  00000000  00000000  0001437f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c20a  00000000  00000000  0003a14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7f99  00000000  00000000  00046356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e2ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cac  00000000  00000000  0012e334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00130fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004128 	.word	0x08004128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004128 	.word	0x08004128

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Flash_Write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Flash_Write(uint32_t addr, uint32_t data)
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 80005b6:	f000 fc65 	bl	8000e84 <HAL_FLASH_Unlock>

    // Erase one page first (only needed if writing first time or overwriting)
    FLASH_EraseInitTypeDef eraseInit;
    uint32_t pageError = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]

    eraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
    eraseInit.Page        = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80005c8:	0adb      	lsrs	r3, r3, #11
 80005ca:	61bb      	str	r3, [r7, #24]
    eraseInit.NbPages     = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
    eraseInit.Banks       = FLASH_BANK_2;  // or FLASH_BANK_2 depending on addr
 80005d0:	2302      	movs	r3, #2
 80005d2:	617b      	str	r3, [r7, #20]

    if (HAL_FLASHEx_Erase(&eraseInit, &pageError) != HAL_OK)
 80005d4:	f107 020c 	add.w	r2, r7, #12
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fd34 	bl	800104c <HAL_FLASHEx_Erase>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d002      	beq.n	80005f0 <Flash_Write+0x44>
    {
        // Handle error
        HAL_FLASH_Lock();
 80005ea:	f000 fc6d 	bl	8000ec8 <HAL_FLASH_Lock>
 80005ee:	e00b      	b.n	8000608 <Flash_Write+0x5c>
        return;
    }

    // Program the word
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, data);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	461c      	mov	r4, r3
 80005f6:	4615      	mov	r5, r2
 80005f8:	4622      	mov	r2, r4
 80005fa:	462b      	mov	r3, r5
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fbd4 	bl	8000dac <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 8000604:	f000 fc60 	bl	8000ec8 <HAL_FLASH_Lock>
}
 8000608:	3720      	adds	r7, #32
 800060a:	46bd      	mov	sp, r7
 800060c:	bdb0      	pop	{r4, r5, r7, pc}

0800060e <Flash_Read>:

uint32_t Flash_Read(uint32_t addr)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
    return *(uint32_t*)addr;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 char msg[64];

	 uint32_t myData = 0x12345678;  // test data
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <main+0x70>)
 8000630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fa35 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f837 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f8b7 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063e:	f000 f885 	bl	800074c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Write to Flash
  for(int i=0;i<5;i++)
 8000642:	2300      	movs	r3, #0
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000646:	e022      	b.n	800068e <main+0x66>
  {
   Flash_Write(FLASH_USER_START_ADDR, myData);
 8000648:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800064a:	4814      	ldr	r0, [pc, #80]	@ (800069c <main+0x74>)
 800064c:	f7ff ffae 	bl	80005ac <Flash_Write>
   myData +=1;
 8000650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000652:	3301      	adds	r3, #1
 8000654:	64fb      	str	r3, [r7, #76]	@ 0x4c
   HAL_Delay(10);
 8000656:	200a      	movs	r0, #10
 8000658:	f000 fa9e 	bl	8000b98 <HAL_Delay>

   // Read back
   uint32_t readData = Flash_Read(FLASH_USER_START_ADDR);
 800065c:	480f      	ldr	r0, [pc, #60]	@ (800069c <main+0x74>)
 800065e:	f7ff ffd6 	bl	800060e <Flash_Read>
 8000662:	6478      	str	r0, [r7, #68]	@ 0x44

   // Print to serial terminal
   snprintf(msg, sizeof(msg), "Read from Flash: 0x%08lX\r\n", readData);
 8000664:	1d38      	adds	r0, r7, #4
 8000666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <main+0x78>)
 800066a:	2140      	movs	r1, #64	@ 0x40
 800066c:	f003 f8a8 	bl	80037c0 <sniprintf>
   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fdac 	bl	80001d0 <strlen>
 8000678:	4603      	mov	r3, r0
 800067a:	b29a      	uxth	r2, r3
 800067c:	1d39      	adds	r1, r7, #4
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	4808      	ldr	r0, [pc, #32]	@ (80006a4 <main+0x7c>)
 8000684:	f002 fb3e 	bl	8002d04 <HAL_UART_Transmit>
  for(int i=0;i<5;i++)
 8000688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800068a:	3301      	adds	r3, #1
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800068e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000690:	2b04      	cmp	r3, #4
 8000692:	ddd9      	ble.n	8000648 <main+0x20>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <main+0x6c>
 8000698:	12345678 	.word	0x12345678
 800069c:	080ff800 	.word	0x080ff800
 80006a0:	08004140 	.word	0x08004140
 80006a4:	20000098 	.word	0x20000098

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	@ 0x58
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2244      	movs	r2, #68	@ 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f8b8 	bl	800382c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ce:	f000 ffb9 	bl	8001644 <HAL_PWREx_ControlVoltageScaling>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d8:	f000 f8ba 	bl	8000850 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e6:	2310      	movs	r3, #16
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006f6:	230a      	movs	r3, #10
 80006f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fff0 	bl	80016f0 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000716:	f000 f89b 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	2104      	movs	r1, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fbb8 	bl	8001ea8 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073e:	f000 f887 	bl	8000850 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	@ 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	@ (80007a8 <MX_USART2_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000790:	f002 fa6a 	bl	8002c68 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 f859 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000098 	.word	0x20000098
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a20      	ldr	r2, [pc, #128]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a1a      	ldr	r2, [pc, #104]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_GPIO_Init+0x9c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_GPIO_Init+0x9c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a0e      	ldr	r2, [pc, #56]	@ (8000848 <MX_GPIO_Init+0x9c>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_GPIO_Init+0x9c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000822:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000828:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_GPIO_Init+0xa0>)
 800083a:	f000 fd4b 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	@ 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000
 800084c:	48000800 	.word	0x48000800

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <Error_Handler+0x8>

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000866:	4a0e      	ldr	r2, [pc, #56]	@ (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6613      	str	r3, [r2, #96]	@ 0x60
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6593      	str	r3, [r2, #88]	@ 0x58
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0ac      	sub	sp, #176	@ 0xb0
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2288      	movs	r2, #136	@ 0x88
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 ffb1 	bl	800382c <memset>
  if(huart->Instance==USART2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a21      	ldr	r2, [pc, #132]	@ (8000954 <HAL_UART_MspInit+0xb0>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d13b      	bne.n	800094c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d8:	2300      	movs	r3, #0
 80008da:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 fd05 	bl	80022f0 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008ec:	f7ff ffb0 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <HAL_UART_MspInit+0xb4>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f4:	4a18      	ldr	r2, [pc, #96]	@ (8000958 <HAL_UART_MspInit+0xb4>)
 80008f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <HAL_UART_MspInit+0xb4>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <HAL_UART_MspInit+0xb4>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090c:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <HAL_UART_MspInit+0xb4>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000914:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <HAL_UART_MspInit+0xb4>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000920:	230c      	movs	r3, #12
 8000922:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000938:	2307      	movs	r3, #7
 800093a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000948:	f000 fcc4 	bl	80012d4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800094c:	bf00      	nop
 800094e:	37b0      	adds	r7, #176	@ 0xb0
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40004400 	.word	0x40004400
 8000958:	40021000 	.word	0x40021000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <NMI_Handler+0x4>

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <MemManage_Handler+0x4>

08000974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <UsageFault_Handler+0x4>

08000984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b2:	f000 f8d1 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	@ (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f002 ff26 	bl	800383c <__errno>
 80009f0:	4603      	mov	r3, r0
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <_sbrk+0x64>)
 8000a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20018000 	.word	0x20018000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	20000120 	.word	0x20000120
 8000a24:	20000270 	.word	0x20000270

08000a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a50:	f7ff ffea 	bl	8000a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	@ (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f002 fee5 	bl	8003848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7e:	f7ff fdd3 	bl	8000628 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000a90:	080041e8 	.word	0x080041e8
  ldr r2, =_sbss
 8000a94:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000a98:	20000270 	.word	0x20000270

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <HAL_Init+0x3c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a0b      	ldr	r2, [pc, #44]	@ (8000adc <HAL_Init+0x3c>)
 8000ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ab4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f000 f944 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 f80f 	bl	8000ae0 <HAL_InitTick>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	71fb      	strb	r3, [r7, #7]
 8000acc:	e001      	b.n	8000ad2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ace:	f7ff fec5 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <HAL_InitTick+0x6c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d023      	beq.n	8000b3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HAL_InitTick+0x70>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <HAL_InitTick+0x6c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f941 	bl	8000d92 <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10f      	bne.n	8000b36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d809      	bhi.n	8000b30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f919 	bl	8000d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b28:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <HAL_InitTick+0x74>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	e007      	b.n	8000b40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	e004      	b.n	8000b40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	e001      	b.n	8000b40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000124 	.word	0x20000124

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000124 	.word	0x20000124

08000b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff ffee 	bl	8000b80 <HAL_GetTick>
 8000ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb0:	d005      	beq.n	8000bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <HAL_Delay+0x44>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bbe:	bf00      	nop
 8000bc0:	f7ff ffde 	bl	8000b80 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d8f7      	bhi.n	8000bc0 <HAL_Delay+0x28>
  {
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008

08000be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c12:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60d3      	str	r3, [r2, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	@ 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff47 	bl	8000be0 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff5c 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffb0 	bl	8000d00 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000e7c <HAL_FLASH_Program+0xd0>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d101      	bne.n	8000dca <HAL_FLASH_Program+0x1e>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e053      	b.n	8000e72 <HAL_FLASH_Program+0xc6>
 8000dca:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <HAL_FLASH_Program+0xd0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dd0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000dd4:	f000 f888 	bl	8000ee8 <FLASH_WaitForLastOperation>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d143      	bne.n	8000e6a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000de2:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <HAL_FLASH_Program+0xd0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000de8:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <HAL_FLASH_Program+0xd4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d009      	beq.n	8000e08 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <HAL_FLASH_Program+0xd4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a21      	ldr	r2, [pc, #132]	@ (8000e80 <HAL_FLASH_Program+0xd4>)
 8000dfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000dfe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <HAL_FLASH_Program+0xd0>)
 8000e02:	2202      	movs	r2, #2
 8000e04:	771a      	strb	r2, [r3, #28]
 8000e06:	e002      	b.n	8000e0e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_FLASH_Program+0xd0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d107      	bne.n	8000e24 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e18:	68b8      	ldr	r0, [r7, #8]
 8000e1a:	f000 f8bb 	bl	8000f94 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	e010      	b.n	8000e46 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d002      	beq.n	8000e30 <HAL_FLASH_Program+0x84>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d10a      	bne.n	8000e46 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	4619      	mov	r1, r3
 8000e34:	68b8      	ldr	r0, [r7, #8]
 8000e36:	f000 f8d3 	bl	8000fe0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d102      	bne.n	8000e46 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000e40:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000e44:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e46:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e4a:	f000 f84d 	bl	8000ee8 <FLASH_WaitForLastOperation>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <HAL_FLASH_Program+0xd4>)
 8000e5a:	695a      	ldr	r2, [r3, #20]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	4907      	ldr	r1, [pc, #28]	@ (8000e80 <HAL_FLASH_Program+0xd4>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000e66:	f000 f9eb 	bl	8001240 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e6a:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <HAL_FLASH_Program+0xd0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]

  return status;
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000000c 	.word	0x2000000c
 8000e80:	40022000 	.word	0x40022000

08000e84 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <HAL_FLASH_Unlock+0x38>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	da0b      	bge.n	8000eae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <HAL_FLASH_Unlock+0x38>)
 8000e98:	4a09      	ldr	r2, [pc, #36]	@ (8000ec0 <HAL_FLASH_Unlock+0x3c>)
 8000e9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <HAL_FLASH_Unlock+0x38>)
 8000e9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ec4 <HAL_FLASH_Unlock+0x40>)
 8000ea0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_FLASH_Unlock+0x38>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	da01      	bge.n	8000eae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40022000 	.word	0x40022000
 8000ec0:	45670123 	.word	0x45670123
 8000ec4:	cdef89ab 	.word	0xcdef89ab

08000ec8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <HAL_FLASH_Lock+0x1c>)
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_FLASH_Lock+0x1c>)
 8000ed2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ed6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff fe46 	bl	8000b80 <HAL_GetTick>
 8000ef4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000ef6:	e00d      	b.n	8000f14 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efe:	d009      	beq.n	8000f14 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8000f00:	f7ff fe3e 	bl	8000b80 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d801      	bhi.n	8000f14 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e036      	b.n	8000f82 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000f14:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <FLASH_WaitForLastOperation+0xa4>)
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1eb      	bne.n	8000ef8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000f20:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <FLASH_WaitForLastOperation+0xa4>)
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d01d      	beq.n	8000f6e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <FLASH_WaitForLastOperation+0xa8>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <FLASH_WaitForLastOperation+0xa8>)
 8000f3c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f44:	d307      	bcc.n	8000f56 <FLASH_WaitForLastOperation+0x6e>
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <FLASH_WaitForLastOperation+0xa4>)
 8000f48:	699a      	ldr	r2, [r3, #24]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8000f50:	490e      	ldr	r1, [pc, #56]	@ (8000f8c <FLASH_WaitForLastOperation+0xa4>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	618b      	str	r3, [r1, #24]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <FLASH_WaitForLastOperation+0x82>
 8000f60:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <FLASH_WaitForLastOperation+0xa4>)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000f68:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e009      	b.n	8000f82 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f6e:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <FLASH_WaitForLastOperation+0xa4>)
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f7a:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <FLASH_WaitForLastOperation+0xa4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40022000 	.word	0x40022000
 8000f90:	2000000c 	.word	0x2000000c

08000f94 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <FLASH_Program_DoubleWord+0x48>)
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <FLASH_Program_DoubleWord+0x48>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000fb2:	f3bf 8f6f 	isb	sy
}
 8000fb6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8000fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	000a      	movs	r2, r1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	68f9      	ldr	r1, [r7, #12]
 8000fca:	3104      	adds	r1, #4
 8000fcc:	4613      	mov	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	@ 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8000fea:	2340      	movs	r3, #64	@ 0x40
 8000fec:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <FLASH_Program_Fast+0x68>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a13      	ldr	r2, [pc, #76]	@ (8001048 <FLASH_Program_Fast+0x68>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001000:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001002:	f3ef 8310 	mrs	r3, PRIMASK
 8001006:	60fb      	str	r3, [r7, #12]
  return(result);
 8001008:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800100a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	3304      	adds	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3304      	adds	r3, #4
 8001022:	617b      	str	r3, [r7, #20]
    row_index--;
 8001024:	7ffb      	ldrb	r3, [r7, #31]
 8001026:	3b01      	subs	r3, #1
 8001028:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800102a:	7ffb      	ldrb	r3, [r7, #31]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1ef      	bne.n	8001010 <FLASH_Program_Fast+0x30>
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f383 8810 	msr	PRIMASK, r3
}
 800103a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800103c:	bf00      	nop
 800103e:	3724      	adds	r7, #36	@ 0x24
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40022000 	.word	0x40022000

0800104c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001056:	4b49      	ldr	r3, [pc, #292]	@ (800117c <HAL_FLASHEx_Erase+0x130>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d101      	bne.n	8001062 <HAL_FLASHEx_Erase+0x16>
 800105e:	2302      	movs	r3, #2
 8001060:	e087      	b.n	8001172 <HAL_FLASHEx_Erase+0x126>
 8001062:	4b46      	ldr	r3, [pc, #280]	@ (800117c <HAL_FLASHEx_Erase+0x130>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001068:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800106c:	f7ff ff3c 	bl	8000ee8 <FLASH_WaitForLastOperation>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d177      	bne.n	800116a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800107a:	4b40      	ldr	r3, [pc, #256]	@ (800117c <HAL_FLASHEx_Erase+0x130>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001080:	4b3f      	ldr	r3, [pc, #252]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800108c:	4b3c      	ldr	r3, [pc, #240]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001094:	2b00      	cmp	r3, #0
 8001096:	d009      	beq.n	80010ac <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001098:	4b39      	ldr	r3, [pc, #228]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a38      	ldr	r2, [pc, #224]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 800109e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010a2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80010a4:	4b35      	ldr	r3, [pc, #212]	@ (800117c <HAL_FLASHEx_Erase+0x130>)
 80010a6:	2203      	movs	r2, #3
 80010a8:	771a      	strb	r2, [r3, #28]
 80010aa:	e016      	b.n	80010da <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80010ac:	4b33      	ldr	r3, [pc, #204]	@ (800117c <HAL_FLASHEx_Erase+0x130>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	771a      	strb	r2, [r3, #28]
 80010b2:	e012      	b.n	80010da <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80010b4:	4b32      	ldr	r3, [pc, #200]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d009      	beq.n	80010d4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80010c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 80010c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010ca:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	@ (800117c <HAL_FLASHEx_Erase+0x130>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	771a      	strb	r2, [r3, #28]
 80010d2:	e002      	b.n	80010da <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80010d4:	4b29      	ldr	r3, [pc, #164]	@ (800117c <HAL_FLASHEx_Erase+0x130>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d113      	bne.n	800110a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f84c 	bl	8001184 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010f0:	f7ff fefa 	bl	8000ee8 <FLASH_WaitForLastOperation>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80010f8:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4a20      	ldr	r2, [pc, #128]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 80010fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001102:	f023 0304 	bic.w	r3, r3, #4
 8001106:	6153      	str	r3, [r2, #20]
 8001108:	e02d      	b.n	8001166 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	e01d      	b.n	8001156 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4619      	mov	r1, r3
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	f000 f857 	bl	80011d4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001126:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800112a:	f7ff fedd 	bl	8000ee8 <FLASH_WaitForLastOperation>
 800112e:	4603      	mov	r3, r0
 8001130:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <HAL_FLASHEx_Erase+0x134>)
 8001138:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800113c:	f023 0302 	bic.w	r3, r3, #2
 8001140:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	601a      	str	r2, [r3, #0]
          break;
 800114e:	e00a      	b.n	8001166 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	3301      	adds	r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4413      	add	r3, r2
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3d9      	bcc.n	800111a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001166:	f000 f86b 	bl	8001240 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800116a:	4b04      	ldr	r3, [pc, #16]	@ (800117c <HAL_FLASHEx_Erase+0x130>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]

  return status;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000000c 	.word	0x2000000c
 8001180:	40022000 	.word	0x40022000

08001184 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <FLASH_MassErase+0x4c>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <FLASH_MassErase+0x4c>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <FLASH_MassErase+0x4c>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a07      	ldr	r2, [pc, #28]	@ (80011d0 <FLASH_MassErase+0x4c>)
 80011b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011b6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <FLASH_MassErase+0x4c>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <FLASH_MassErase+0x4c>)
 80011be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c2:	6153      	str	r3, [r2, #20]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40022000 	.word	0x40022000

080011d4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <FLASH_PageErase+0x68>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	4a13      	ldr	r2, [pc, #76]	@ (800123c <FLASH_PageErase+0x68>)
 80011ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80011f2:	6153      	str	r3, [r2, #20]
 80011f4:	e005      	b.n	8001202 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <FLASH_PageErase+0x68>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <FLASH_PageErase+0x68>)
 80011fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001200:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <FLASH_PageErase+0x68>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8001212:	490a      	ldr	r1, [pc, #40]	@ (800123c <FLASH_PageErase+0x68>)
 8001214:	4313      	orrs	r3, r2
 8001216:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <FLASH_PageErase+0x68>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	4a07      	ldr	r2, [pc, #28]	@ (800123c <FLASH_PageErase+0x68>)
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <FLASH_PageErase+0x68>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <FLASH_PageErase+0x68>)
 800122a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122e:	6153      	str	r3, [r2, #20]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40022000 	.word	0x40022000

08001240 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <FLASH_FlushCaches+0x8c>)
 8001248:	7f1b      	ldrb	r3, [r3, #28]
 800124a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d002      	beq.n	8001258 <FLASH_FlushCaches+0x18>
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d117      	bne.n	8001288 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1c      	ldr	r2, [pc, #112]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 800125e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001262:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a19      	ldr	r2, [pc, #100]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 800126a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a16      	ldr	r2, [pc, #88]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 8001276:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800127a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a13      	ldr	r2, [pc, #76]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 8001282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001286:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d002      	beq.n	8001294 <FLASH_FlushCaches+0x54>
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d111      	bne.n	80012b8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 800129a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 80012a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	@ (80012d0 <FLASH_FlushCaches+0x90>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012b6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <FLASH_FlushCaches+0x8c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	771a      	strb	r2, [r3, #28]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000000c 	.word	0x2000000c
 80012d0:	40022000 	.word	0x40022000

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e17f      	b.n	80015e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8171 	beq.w	80015de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d005      	beq.n	8001314 <HAL_GPIO_Init+0x40>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d130      	bne.n	8001376 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134a:	2201      	movs	r2, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 0201 	and.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b03      	cmp	r3, #3
 8001380:	d118      	bne.n	80013b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001388:	2201      	movs	r2, #1
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	f003 0201 	and.w	r2, r3, #1
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d017      	beq.n	80013f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d123      	bne.n	8001444 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	6939      	ldr	r1, [r7, #16]
 8001440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0203 	and.w	r2, r3, #3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80ac 	beq.w	80015de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b5f      	ldr	r3, [pc, #380]	@ (8001604 <HAL_GPIO_Init+0x330>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	4a5e      	ldr	r2, [pc, #376]	@ (8001604 <HAL_GPIO_Init+0x330>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6613      	str	r3, [r2, #96]	@ 0x60
 8001492:	4b5c      	ldr	r3, [pc, #368]	@ (8001604 <HAL_GPIO_Init+0x330>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800149e:	4a5a      	ldr	r2, [pc, #360]	@ (8001608 <HAL_GPIO_Init+0x334>)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014c8:	d025      	beq.n	8001516 <HAL_GPIO_Init+0x242>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4f      	ldr	r2, [pc, #316]	@ (800160c <HAL_GPIO_Init+0x338>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d01f      	beq.n	8001512 <HAL_GPIO_Init+0x23e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001610 <HAL_GPIO_Init+0x33c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d019      	beq.n	800150e <HAL_GPIO_Init+0x23a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001614 <HAL_GPIO_Init+0x340>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0x236>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001618 <HAL_GPIO_Init+0x344>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00d      	beq.n	8001506 <HAL_GPIO_Init+0x232>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4b      	ldr	r2, [pc, #300]	@ (800161c <HAL_GPIO_Init+0x348>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x22e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001620 <HAL_GPIO_Init+0x34c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_GPIO_Init+0x22a>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e00c      	b.n	8001518 <HAL_GPIO_Init+0x244>
 80014fe:	2307      	movs	r3, #7
 8001500:	e00a      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001502:	2305      	movs	r3, #5
 8001504:	e008      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001506:	2304      	movs	r3, #4
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x244>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x244>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001516:	2300      	movs	r3, #0
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001528:	4937      	ldr	r1, [pc, #220]	@ (8001608 <HAL_GPIO_Init+0x334>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001536:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <HAL_GPIO_Init+0x350>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800155a:	4a32      	ldr	r2, [pc, #200]	@ (8001624 <HAL_GPIO_Init+0x350>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001560:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <HAL_GPIO_Init+0x350>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001584:	4a27      	ldr	r2, [pc, #156]	@ (8001624 <HAL_GPIO_Init+0x350>)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800158a:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <HAL_GPIO_Init+0x350>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001624 <HAL_GPIO_Init+0x350>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <HAL_GPIO_Init+0x350>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d8:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <HAL_GPIO_Init+0x350>)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f47f ae78 	bne.w	80012e4 <HAL_GPIO_Init+0x10>
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000
 800160c:	48000400 	.word	0x48000400
 8001610:	48000800 	.word	0x48000800
 8001614:	48000c00 	.word	0x48000c00
 8001618:	48001000 	.word	0x48001000
 800161c:	48001400 	.word	0x48001400
 8001620:	48001800 	.word	0x48001800
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <HAL_PWREx_GetVoltageRange+0x18>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40007000 	.word	0x40007000

08001644 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001652:	d130      	bne.n	80016b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001654:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800165c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001660:	d038      	beq.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800166a:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001670:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2232      	movs	r2, #50	@ 0x32
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	4a1b      	ldr	r2, [pc, #108]	@ (80016ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	0c9b      	lsrs	r3, r3, #18
 8001684:	3301      	adds	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001688:	e002      	b.n	8001690 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3b01      	subs	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001690:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800169c:	d102      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f2      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016b0:	d110      	bne.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e00f      	b.n	80016d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016c2:	d007      	beq.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016cc:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40007000 	.word	0x40007000
 80016e8:	20000000 	.word	0x20000000
 80016ec:	431bde83 	.word	0x431bde83

080016f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e3ca      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001702:	4b97      	ldr	r3, [pc, #604]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800170c:	4b94      	ldr	r3, [pc, #592]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80e4 	beq.w	80018ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_RCC_OscConfig+0x4a>
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b0c      	cmp	r3, #12
 800172e:	f040 808b 	bne.w	8001848 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b01      	cmp	r3, #1
 8001736:	f040 8087 	bne.w	8001848 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800173a:	4b89      	ldr	r3, [pc, #548]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x62>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e3a2      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1a      	ldr	r2, [r3, #32]
 8001756:	4b82      	ldr	r3, [pc, #520]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <HAL_RCC_OscConfig+0x7c>
 8001762:	4b7f      	ldr	r3, [pc, #508]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800176a:	e005      	b.n	8001778 <HAL_RCC_OscConfig+0x88>
 800176c:	4b7c      	ldr	r3, [pc, #496]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001778:	4293      	cmp	r3, r2
 800177a:	d223      	bcs.n	80017c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4618      	mov	r0, r3
 8001782:	f000 fd55 	bl	8002230 <RCC_SetFlashLatencyFromMSIRange>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e383      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001790:	4b73      	ldr	r3, [pc, #460]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a72      	ldr	r2, [pc, #456]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b70      	ldr	r3, [pc, #448]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	496d      	ldr	r1, [pc, #436]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	4968      	ldr	r1, [pc, #416]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
 80017c2:	e025      	b.n	8001810 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c4:	4b66      	ldr	r3, [pc, #408]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a65      	ldr	r2, [pc, #404]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b63      	ldr	r3, [pc, #396]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4960      	ldr	r1, [pc, #384]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	495b      	ldr	r1, [pc, #364]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fd15 	bl	8002230 <RCC_SetFlashLatencyFromMSIRange>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e343      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001810:	f000 fc4a 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b52      	ldr	r3, [pc, #328]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	4950      	ldr	r1, [pc, #320]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	4a4e      	ldr	r2, [pc, #312]	@ (8001968 <HAL_RCC_OscConfig+0x278>)
 800182e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001830:	4b4e      	ldr	r3, [pc, #312]	@ (800196c <HAL_RCC_OscConfig+0x27c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f953 	bl	8000ae0 <HAL_InitTick>
 800183a:	4603      	mov	r3, r0
 800183c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d052      	beq.n	80018ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	e327      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d032      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001850:	4b43      	ldr	r3, [pc, #268]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a42      	ldr	r2, [pc, #264]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800185c:	f7ff f990 	bl	8000b80 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001864:	f7ff f98c 	bl	8000b80 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e310      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001876:	4b3a      	ldr	r3, [pc, #232]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001882:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a36      	ldr	r2, [pc, #216]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4931      	ldr	r1, [pc, #196]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	492c      	ldr	r1, [pc, #176]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
 80018b4:	e01a      	b.n	80018ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a29      	ldr	r2, [pc, #164]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c2:	f7ff f95d 	bl	8000b80 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ca:	f7ff f959 	bl	8000b80 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e2dd      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x1da>
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d074      	beq.n	80019e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d005      	beq.n	800190a <HAL_RCC_OscConfig+0x21a>
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d10e      	bne.n	8001922 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d10b      	bne.n	8001922 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d064      	beq.n	80019e0 <HAL_RCC_OscConfig+0x2f0>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d160      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e2ba      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x24a>
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	e026      	b.n	8001988 <HAL_RCC_OscConfig+0x298>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001942:	d115      	bne.n	8001970 <HAL_RCC_OscConfig+0x280>
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800194a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a02      	ldr	r2, [pc, #8]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	e014      	b.n	8001988 <HAL_RCC_OscConfig+0x298>
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	0800415c 	.word	0x0800415c
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004
 8001970:	4ba0      	ldr	r3, [pc, #640]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a9f      	ldr	r2, [pc, #636]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b9d      	ldr	r3, [pc, #628]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a9c      	ldr	r2, [pc, #624]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff f8f6 	bl	8000b80 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff f8f2 	bl	8000b80 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	@ 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e276      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019aa:	4b92      	ldr	r3, [pc, #584]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x2a8>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff f8e2 	bl	8000b80 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff f8de 	bl	8000b80 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	@ 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e262      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d2:	4b88      	ldr	r3, [pc, #544]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2d0>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d060      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_OscConfig+0x310>
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d119      	bne.n	8001a2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d116      	bne.n	8001a2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a00:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_OscConfig+0x328>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e23f      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b76      	ldr	r3, [pc, #472]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	061b      	lsls	r3, r3, #24
 8001a26:	4973      	ldr	r1, [pc, #460]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2c:	e040      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d023      	beq.n	8001a7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a36:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f89d 	bl	8000b80 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff f899 	bl	8000b80 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e21d      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a5c:	4b65      	ldr	r3, [pc, #404]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a68:	4b62      	ldr	r3, [pc, #392]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	495f      	ldr	r1, [pc, #380]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
 8001a7c:	e018      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f879 	bl	8000b80 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff f875 	bl	8000b80 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e1f9      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa4:	4b53      	ldr	r3, [pc, #332]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d03c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01c      	beq.n	8001afe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aca:	4a4a      	ldr	r2, [pc, #296]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f854 	bl	8000b80 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff f850 	bl	8000b80 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1d4      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aee:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ef      	beq.n	8001adc <HAL_RCC_OscConfig+0x3ec>
 8001afc:	e01b      	b.n	8001b36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b04:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f837 	bl	8000b80 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b16:	f7ff f833 	bl	8000b80 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e1b7      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b28:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ef      	bne.n	8001b16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80a6 	beq.w	8001c90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b48:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10d      	bne.n	8001b70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b58:	4a26      	ldr	r2, [pc, #152]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_RCC_OscConfig+0x508>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d118      	bne.n	8001bae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <HAL_RCC_OscConfig+0x508>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf8 <HAL_RCC_OscConfig+0x508>)
 8001b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b88:	f7fe fffa 	bl	8000b80 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b90:	f7fe fff6 	bl	8000b80 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e17a      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <HAL_RCC_OscConfig+0x508>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4d8>
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bc6:	e029      	b.n	8001c1c <HAL_RCC_OscConfig+0x52c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d115      	bne.n	8001bfc <HAL_RCC_OscConfig+0x50c>
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd6:	4a07      	ldr	r2, [pc, #28]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001be0:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be6:	4a03      	ldr	r2, [pc, #12]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bf0:	e014      	b.n	8001c1c <HAL_RCC_OscConfig+0x52c>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	4b9c      	ldr	r3, [pc, #624]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c02:	4a9b      	ldr	r2, [pc, #620]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c0c:	4b98      	ldr	r3, [pc, #608]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c12:	4a97      	ldr	r2, [pc, #604]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001c14:	f023 0304 	bic.w	r3, r3, #4
 8001c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d016      	beq.n	8001c52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7fe ffac 	bl	8000b80 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7fe ffa8 	bl	8000b80 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e12a      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c42:	4b8b      	ldr	r3, [pc, #556]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0ed      	beq.n	8001c2c <HAL_RCC_OscConfig+0x53c>
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c52:	f7fe ff95 	bl	8000b80 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe ff91 	bl	8000b80 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e113      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c70:	4b7f      	ldr	r3, [pc, #508]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ed      	bne.n	8001c5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b7a      	ldr	r3, [pc, #488]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c88:	4a79      	ldr	r2, [pc, #484]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80fe 	beq.w	8001e96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	f040 80d0 	bne.w	8001e44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ca4:	4b72      	ldr	r3, [pc, #456]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d130      	bne.n	8001d1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d127      	bne.n	8001d1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d11f      	bne.n	8001d1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ce4:	2a07      	cmp	r2, #7
 8001ce6:	bf14      	ite	ne
 8001ce8:	2201      	movne	r2, #1
 8001cea:	2200      	moveq	r2, #0
 8001cec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d113      	bne.n	8001d1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d06e      	beq.n	8001df8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d069      	beq.n	8001df4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d20:	4b53      	ldr	r3, [pc, #332]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d2c:	4b50      	ldr	r3, [pc, #320]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0ad      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a4b      	ldr	r2, [pc, #300]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d48:	f7fe ff1a 	bl	8000b80 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7fe ff16 	bl	8000b80 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e09a      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d62:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6e:	4b40      	ldr	r3, [pc, #256]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	4b40      	ldr	r3, [pc, #256]	@ (8001e74 <HAL_RCC_OscConfig+0x784>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d7e:	3a01      	subs	r2, #1
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	4311      	orrs	r1, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d88:	0212      	lsls	r2, r2, #8
 8001d8a:	4311      	orrs	r1, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d90:	0852      	lsrs	r2, r2, #1
 8001d92:	3a01      	subs	r2, #1
 8001d94:	0552      	lsls	r2, r2, #21
 8001d96:	4311      	orrs	r1, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d9c:	0852      	lsrs	r2, r2, #1
 8001d9e:	3a01      	subs	r2, #1
 8001da0:	0652      	lsls	r2, r2, #25
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001da8:	0912      	lsrs	r2, r2, #4
 8001daa:	0452      	lsls	r2, r2, #17
 8001dac:	430a      	orrs	r2, r1
 8001dae:	4930      	ldr	r1, [pc, #192]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001db4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dcc:	f7fe fed8 	bl	8000b80 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe fed4 	bl	8000b80 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e058      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df2:	e050      	b.n	8001e96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e04f      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d148      	bne.n	8001e96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e04:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a19      	ldr	r2, [pc, #100]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001e0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e10:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a16      	ldr	r2, [pc, #88]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e1c:	f7fe feb0 	bl	8000b80 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e24:	f7fe feac 	bl	8000b80 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e030      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x734>
 8001e42:	e028      	b.n	8001e96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d023      	beq.n	8001e92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a08      	ldr	r2, [pc, #32]	@ (8001e70 <HAL_RCC_OscConfig+0x780>)
 8001e50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7fe fe93 	bl	8000b80 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5c:	e00c      	b.n	8001e78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7fe fe8f 	bl	8000b80 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d905      	bls.n	8001e78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e013      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
 8001e70:	40021000 	.word	0x40021000
 8001e74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <HAL_RCC_OscConfig+0x7b0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1ec      	bne.n	8001e5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_RCC_OscConfig+0x7b0>)
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	4905      	ldr	r1, [pc, #20]	@ (8001ea0 <HAL_RCC_OscConfig+0x7b0>)
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_RCC_OscConfig+0x7b4>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
 8001e90:	e001      	b.n	8001e96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	feeefffc 	.word	0xfeeefffc

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0e7      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b75      	ldr	r3, [pc, #468]	@ (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d910      	bls.n	8001eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b72      	ldr	r3, [pc, #456]	@ (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 0207 	bic.w	r2, r3, #7
 8001ed2:	4970      	ldr	r1, [pc, #448]	@ (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b6e      	ldr	r3, [pc, #440]	@ (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0cf      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d010      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	4b66      	ldr	r3, [pc, #408]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d908      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b63      	ldr	r3, [pc, #396]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4960      	ldr	r1, [pc, #384]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d04c      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d121      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0a6      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f46:	4b54      	ldr	r3, [pc, #336]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d115      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e09a      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e08e      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e086      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4b46      	ldr	r3, [pc, #280]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4943      	ldr	r1, [pc, #268]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f90:	f7fe fdf6 	bl	8000b80 <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7fe fdf2 	bl	8000b80 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e06e      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	4b3a      	ldr	r3, [pc, #232]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 020c 	and.w	r2, r3, #12
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1eb      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d010      	beq.n	8001fee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4b31      	ldr	r3, [pc, #196]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d208      	bcs.n	8001fee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	492b      	ldr	r1, [pc, #172]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fee:	4b29      	ldr	r3, [pc, #164]	@ (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d210      	bcs.n	800201e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffc:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 0207 	bic.w	r2, r3, #7
 8002004:	4923      	ldr	r1, [pc, #140]	@ (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200c:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <HAL_RCC_ClockConfig+0x1ec>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d001      	beq.n	800201e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e036      	b.n	800208c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202a:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4918      	ldr	r1, [pc, #96]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4910      	ldr	r1, [pc, #64]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800205c:	f000 f824 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	490b      	ldr	r1, [pc, #44]	@ (800209c <HAL_RCC_ClockConfig+0x1f4>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	4a09      	ldr	r2, [pc, #36]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f8>)
 800207a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <HAL_RCC_ClockConfig+0x1fc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fd2d 	bl	8000ae0 <HAL_InitTick>
 8002086:	4603      	mov	r3, r0
 8002088:	72fb      	strb	r3, [r7, #11]

  return status;
 800208a:	7afb      	ldrb	r3, [r7, #11]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40022000 	.word	0x40022000
 8002098:	40021000 	.word	0x40021000
 800209c:	0800415c 	.word	0x0800415c
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000004 	.word	0x20000004

080020a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	@ 0x24
 80020ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b6:	4b3e      	ldr	r3, [pc, #248]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c0:	4b3b      	ldr	r3, [pc, #236]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x34>
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d121      	bne.n	800211a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d11e      	bne.n	800211a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020dc:	4b34      	ldr	r3, [pc, #208]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020e8:	4b31      	ldr	r3, [pc, #196]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	e005      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020f8:	4b2d      	ldr	r3, [pc, #180]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002104:	4a2b      	ldr	r2, [pc, #172]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10d      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d102      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002120:	4b25      	ldr	r3, [pc, #148]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	e004      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b08      	cmp	r3, #8
 800212a:	d101      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800212c:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x114>)
 800212e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d134      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002136:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d003      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0xa6>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d003      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0xac>
 800214c:	e005      	b.n	800215a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800214e:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002150:	617b      	str	r3, [r7, #20]
      break;
 8002152:	e005      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002154:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x114>)
 8002156:	617b      	str	r3, [r7, #20]
      break;
 8002158:	e002      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	617b      	str	r3, [r7, #20]
      break;
 800215e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002160:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	3301      	adds	r3, #1
 800216c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	fb03 f202 	mul.w	r2, r3, r2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	0e5b      	lsrs	r3, r3, #25
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	3301      	adds	r3, #1
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021a0:	69bb      	ldr	r3, [r7, #24]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	@ 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08004174 	.word	0x08004174
 80021b8:	00f42400 	.word	0x00f42400
 80021bc:	007a1200 	.word	0x007a1200

080021c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c4:	4b03      	ldr	r3, [pc, #12]	@ (80021d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000000 	.word	0x20000000

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021dc:	f7ff fff0 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4904      	ldr	r1, [pc, #16]	@ (8002200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	0800416c 	.word	0x0800416c

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002208:	f7ff ffda 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0adb      	lsrs	r3, r3, #11
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4904      	ldr	r1, [pc, #16]	@ (800222c <HAL_RCC_GetPCLK2Freq+0x28>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	0800416c 	.word	0x0800416c

08002230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800223c:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002248:	f7ff f9ee 	bl	8001628 <HAL_PWREx_GetVoltageRange>
 800224c:	6178      	str	r0, [r7, #20]
 800224e:	e014      	b.n	800227a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b25      	ldr	r3, [pc, #148]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	4a24      	ldr	r2, [pc, #144]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	@ 0x58
 800225c:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002268:	f7ff f9de 	bl	8001628 <HAL_PWREx_GetVoltageRange>
 800226c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002278:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002280:	d10b      	bne.n	800229a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b80      	cmp	r3, #128	@ 0x80
 8002286:	d919      	bls.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2ba0      	cmp	r3, #160	@ 0xa0
 800228c:	d902      	bls.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800228e:	2302      	movs	r3, #2
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	e013      	b.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002294:	2301      	movs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	e010      	b.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b80      	cmp	r3, #128	@ 0x80
 800229e:	d902      	bls.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022a0:	2303      	movs	r3, #3
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	e00a      	b.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b80      	cmp	r3, #128	@ 0x80
 80022aa:	d102      	bne.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ac:	2302      	movs	r3, #2
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e004      	b.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b70      	cmp	r3, #112	@ 0x70
 80022b6:	d101      	bne.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022b8:	2301      	movs	r3, #1
 80022ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 0207 	bic.w	r2, r3, #7
 80022c4:	4909      	ldr	r1, [pc, #36]	@ (80022ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022cc:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40022000 	.word	0x40022000

080022f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022f8:	2300      	movs	r3, #0
 80022fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022fc:	2300      	movs	r3, #0
 80022fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002308:	2b00      	cmp	r3, #0
 800230a:	d041      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002310:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002314:	d02a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002316:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800231a:	d824      	bhi.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800231c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002320:	d008      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002322:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002326:	d81e      	bhi.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800232c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002330:	d010      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002332:	e018      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002334:	4b86      	ldr	r3, [pc, #536]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a85      	ldr	r2, [pc, #532]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002340:	e015      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fabb 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002352:	e00c      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3320      	adds	r3, #32
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fba6 	bl	8002aac <RCCEx_PLLSAI2_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002364:	e003      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	74fb      	strb	r3, [r7, #19]
      break;
 800236a:	e000      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800236c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800236e:	7cfb      	ldrb	r3, [r7, #19]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10b      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002374:	4b76      	ldr	r3, [pc, #472]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002382:	4973      	ldr	r1, [pc, #460]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800238a:	e001      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d041      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023a4:	d02a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023aa:	d824      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023b0:	d008      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023b6:	d81e      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c0:	d010      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023c2:	e018      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023c4:	4b62      	ldr	r3, [pc, #392]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a61      	ldr	r2, [pc, #388]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023d0:	e015      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fa73 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 80023de:	4603      	mov	r3, r0
 80023e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023e2:	e00c      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3320      	adds	r3, #32
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fb5e 	bl	8002aac <RCCEx_PLLSAI2_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023f4:	e003      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	74fb      	strb	r3, [r7, #19]
      break;
 80023fa:	e000      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023fe:	7cfb      	ldrb	r3, [r7, #19]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10b      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002404:	4b52      	ldr	r3, [pc, #328]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002412:	494f      	ldr	r1, [pc, #316]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800241a:	e001      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a0 	beq.w	800256e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002432:	4b47      	ldr	r3, [pc, #284]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002442:	2300      	movs	r3, #0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	4b41      	ldr	r3, [pc, #260]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	4a40      	ldr	r2, [pc, #256]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002452:	6593      	str	r3, [r2, #88]	@ 0x58
 8002454:	4b3e      	ldr	r3, [pc, #248]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002460:	2301      	movs	r3, #1
 8002462:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002464:	4b3b      	ldr	r3, [pc, #236]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a3a      	ldr	r2, [pc, #232]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002470:	f7fe fb86 	bl	8000b80 <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002476:	e009      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002478:	f7fe fb82 	bl	8000b80 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d902      	bls.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	74fb      	strb	r3, [r7, #19]
        break;
 800248a:	e005      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800248c:	4b31      	ldr	r3, [pc, #196]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ef      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d15c      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800249e:	4b2c      	ldr	r3, [pc, #176]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01f      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d019      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024bc:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024c8:	4b21      	ldr	r3, [pc, #132]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ce:	4a20      	ldr	r2, [pc, #128]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024de:	4a1c      	ldr	r2, [pc, #112]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024e8:	4a19      	ldr	r2, [pc, #100]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d016      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7fe fb41 	bl	8000b80 <HAL_GetTick>
 80024fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002500:	e00b      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe fb3d 	bl	8000b80 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d902      	bls.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	74fb      	strb	r3, [r7, #19]
            break;
 8002518:	e006      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ec      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800252e:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800253e:	4904      	ldr	r1, [pc, #16]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002546:	e009      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
 800254c:	e006      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255c:	7c7b      	ldrb	r3, [r7, #17]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b9e      	ldr	r3, [pc, #632]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	4a9d      	ldr	r2, [pc, #628]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800256c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800257a:	4b98      	ldr	r3, [pc, #608]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002580:	f023 0203 	bic.w	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	4994      	ldr	r1, [pc, #592]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800259c:	4b8f      	ldr	r3, [pc, #572]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a2:	f023 020c 	bic.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025aa:	498c      	ldr	r1, [pc, #560]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025be:	4b87      	ldr	r3, [pc, #540]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	4983      	ldr	r1, [pc, #524]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025e0:	4b7e      	ldr	r3, [pc, #504]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	497b      	ldr	r1, [pc, #492]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002602:	4b76      	ldr	r3, [pc, #472]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002610:	4972      	ldr	r1, [pc, #456]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002624:	4b6d      	ldr	r3, [pc, #436]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	496a      	ldr	r1, [pc, #424]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002646:	4b65      	ldr	r3, [pc, #404]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002654:	4961      	ldr	r1, [pc, #388]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002668:	4b5c      	ldr	r3, [pc, #368]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	4959      	ldr	r1, [pc, #356]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800268a:	4b54      	ldr	r3, [pc, #336]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002690:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002698:	4950      	ldr	r1, [pc, #320]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026ac:	4b4b      	ldr	r3, [pc, #300]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	4948      	ldr	r1, [pc, #288]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ce:	4b43      	ldr	r3, [pc, #268]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	493f      	ldr	r1, [pc, #252]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d028      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026f0:	4b3a      	ldr	r3, [pc, #232]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026fe:	4937      	ldr	r1, [pc, #220]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800270a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800270e:	d106      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002710:	4b32      	ldr	r3, [pc, #200]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a31      	ldr	r2, [pc, #196]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800271a:	60d3      	str	r3, [r2, #12]
 800271c:	e011      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002722:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002726:	d10c      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f8c8 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800273e:	7cfb      	ldrb	r3, [r7, #19]
 8002740:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d028      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800274e:	4b23      	ldr	r3, [pc, #140]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002754:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275c:	491f      	ldr	r1, [pc, #124]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800276c:	d106      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800276e:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	4a1a      	ldr	r2, [pc, #104]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002778:	60d3      	str	r3, [r2, #12]
 800277a:	e011      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	2101      	movs	r1, #1
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f899 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 8002792:	4603      	mov	r3, r0
 8002794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d02b      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ba:	4908      	ldr	r1, [pc, #32]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027ca:	d109      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027cc:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a02      	ldr	r2, [pc, #8]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027d6:	60d3      	str	r3, [r2, #12]
 80027d8:	e014      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3304      	adds	r3, #4
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f867 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d02f      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002810:	4b2b      	ldr	r3, [pc, #172]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002816:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800281e:	4928      	ldr	r1, [pc, #160]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800282a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800282e:	d10d      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3304      	adds	r3, #4
 8002834:	2102      	movs	r1, #2
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f844 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d014      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	74bb      	strb	r3, [r7, #18]
 800284a:	e011      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002854:	d10c      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3320      	adds	r3, #32
 800285a:	2102      	movs	r1, #2
 800285c:	4618      	mov	r0, r3
 800285e:	f000 f925 	bl	8002aac <RCCEx_PLLSAI2_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002866:	7cfb      	ldrb	r3, [r7, #19]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800287c:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800288a:	490d      	ldr	r1, [pc, #52]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800289e:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ae:	4904      	ldr	r1, [pc, #16]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000

080028c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028d2:	4b75      	ldr	r3, [pc, #468]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d018      	beq.n	8002910 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028de:	4b72      	ldr	r3, [pc, #456]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0203 	and.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d10d      	bne.n	800290a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
       ||
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028f6:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
       ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d047      	beq.n	800299a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	e044      	b.n	800299a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d018      	beq.n	800294a <RCCEx_PLLSAI1_Config+0x86>
 8002918:	2b03      	cmp	r3, #3
 800291a:	d825      	bhi.n	8002968 <RCCEx_PLLSAI1_Config+0xa4>
 800291c:	2b01      	cmp	r3, #1
 800291e:	d002      	beq.n	8002926 <RCCEx_PLLSAI1_Config+0x62>
 8002920:	2b02      	cmp	r3, #2
 8002922:	d009      	beq.n	8002938 <RCCEx_PLLSAI1_Config+0x74>
 8002924:	e020      	b.n	8002968 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002926:	4b60      	ldr	r3, [pc, #384]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d11d      	bne.n	800296e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002936:	e01a      	b.n	800296e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002938:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d116      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002948:	e013      	b.n	8002972 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800294a:	4b57      	ldr	r3, [pc, #348]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10f      	bne.n	8002976 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002956:	4b54      	ldr	r3, [pc, #336]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002966:	e006      	b.n	8002976 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      break;
 800296c:	e004      	b.n	8002978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296e:	bf00      	nop
 8002970:	e002      	b.n	8002978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002972:	bf00      	nop
 8002974:	e000      	b.n	8002978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002976:	bf00      	nop
    }

    if(status == HAL_OK)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800297e:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	430b      	orrs	r3, r1
 8002994:	4944      	ldr	r1, [pc, #272]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d17d      	bne.n	8002a9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029a0:	4b41      	ldr	r3, [pc, #260]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a40      	ldr	r2, [pc, #256]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ac:	f7fe f8e8 	bl	8000b80 <HAL_GetTick>
 80029b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029b2:	e009      	b.n	80029c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b4:	f7fe f8e4 	bl	8000b80 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d902      	bls.n	80029c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	73fb      	strb	r3, [r7, #15]
        break;
 80029c6:	e005      	b.n	80029d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029c8:	4b37      	ldr	r3, [pc, #220]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ef      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d160      	bne.n	8002a9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d111      	bne.n	8002a04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e0:	4b31      	ldr	r3, [pc, #196]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6892      	ldr	r2, [r2, #8]
 80029f0:	0211      	lsls	r1, r2, #8
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	0912      	lsrs	r2, r2, #4
 80029f8:	0452      	lsls	r2, r2, #17
 80029fa:	430a      	orrs	r2, r1
 80029fc:	492a      	ldr	r1, [pc, #168]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	610b      	str	r3, [r1, #16]
 8002a02:	e027      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d112      	bne.n	8002a30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a0a:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6892      	ldr	r2, [r2, #8]
 8002a1a:	0211      	lsls	r1, r2, #8
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6912      	ldr	r2, [r2, #16]
 8002a20:	0852      	lsrs	r2, r2, #1
 8002a22:	3a01      	subs	r2, #1
 8002a24:	0552      	lsls	r2, r2, #21
 8002a26:	430a      	orrs	r2, r1
 8002a28:	491f      	ldr	r1, [pc, #124]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	610b      	str	r3, [r1, #16]
 8002a2e:	e011      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a30:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6892      	ldr	r2, [r2, #8]
 8002a40:	0211      	lsls	r1, r2, #8
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6952      	ldr	r2, [r2, #20]
 8002a46:	0852      	lsrs	r2, r2, #1
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	0652      	lsls	r2, r2, #25
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	4916      	ldr	r1, [pc, #88]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a54:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a13      	ldr	r2, [pc, #76]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe f88e 	bl	8000b80 <HAL_GetTick>
 8002a64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a66:	e009      	b.n	8002a7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a68:	f7fe f88a 	bl	8000b80 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d902      	bls.n	8002a7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	73fb      	strb	r3, [r7, #15]
          break;
 8002a7a:	e005      	b.n	8002a88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ef      	beq.n	8002a68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	4904      	ldr	r1, [pc, #16]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000

08002aac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aba:	4b6a      	ldr	r3, [pc, #424]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d018      	beq.n	8002af8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ac6:	4b67      	ldr	r3, [pc, #412]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0203 	and.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d10d      	bne.n	8002af2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
       ||
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ade:	4b61      	ldr	r3, [pc, #388]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
       ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d047      	beq.n	8002b82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	e044      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d018      	beq.n	8002b32 <RCCEx_PLLSAI2_Config+0x86>
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d825      	bhi.n	8002b50 <RCCEx_PLLSAI2_Config+0xa4>
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d002      	beq.n	8002b0e <RCCEx_PLLSAI2_Config+0x62>
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d009      	beq.n	8002b20 <RCCEx_PLLSAI2_Config+0x74>
 8002b0c:	e020      	b.n	8002b50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b0e:	4b55      	ldr	r3, [pc, #340]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11d      	bne.n	8002b56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1e:	e01a      	b.n	8002b56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b20:	4b50      	ldr	r3, [pc, #320]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d116      	bne.n	8002b5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b30:	e013      	b.n	8002b5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b32:	4b4c      	ldr	r3, [pc, #304]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b3e:	4b49      	ldr	r3, [pc, #292]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b4e:	e006      	b.n	8002b5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      break;
 8002b54:	e004      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b56:	bf00      	nop
 8002b58:	e002      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e000      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10d      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b66:	4b3f      	ldr	r3, [pc, #252]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	4939      	ldr	r1, [pc, #228]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d167      	bne.n	8002c58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b88:	4b36      	ldr	r3, [pc, #216]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a35      	ldr	r2, [pc, #212]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b94:	f7fd fff4 	bl	8000b80 <HAL_GetTick>
 8002b98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b9a:	e009      	b.n	8002bb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b9c:	f7fd fff0 	bl	8000b80 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d902      	bls.n	8002bb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	73fb      	strb	r3, [r7, #15]
        break;
 8002bae:	e005      	b.n	8002bbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ef      	bne.n	8002b9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d14a      	bne.n	8002c58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d111      	bne.n	8002bec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bc8:	4b26      	ldr	r3, [pc, #152]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6892      	ldr	r2, [r2, #8]
 8002bd8:	0211      	lsls	r1, r2, #8
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	0912      	lsrs	r2, r2, #4
 8002be0:	0452      	lsls	r2, r2, #17
 8002be2:	430a      	orrs	r2, r1
 8002be4:	491f      	ldr	r1, [pc, #124]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	614b      	str	r3, [r1, #20]
 8002bea:	e011      	b.n	8002c10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bec:	4b1d      	ldr	r3, [pc, #116]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bf4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6892      	ldr	r2, [r2, #8]
 8002bfc:	0211      	lsls	r1, r2, #8
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6912      	ldr	r2, [r2, #16]
 8002c02:	0852      	lsrs	r2, r2, #1
 8002c04:	3a01      	subs	r2, #1
 8002c06:	0652      	lsls	r2, r2, #25
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	4916      	ldr	r1, [pc, #88]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c10:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a13      	ldr	r2, [pc, #76]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fd ffb0 	bl	8000b80 <HAL_GetTick>
 8002c20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c22:	e009      	b.n	8002c38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c24:	f7fd ffac 	bl	8000b80 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d902      	bls.n	8002c38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	73fb      	strb	r3, [r7, #15]
          break;
 8002c36:	e005      	b.n	8002c44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c38:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ef      	beq.n	8002c24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	4904      	ldr	r1, [pc, #16]	@ (8002c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000

08002c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e040      	b.n	8002cfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fd fe0a 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	@ 0x24
 8002c94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fb6a 	bl	8003388 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8af 	bl	8002e18 <UART_SetConfig>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e01b      	b.n	8002cfc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ce2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fbe9 	bl	80034cc <UART_CheckIdleState>
 8002cfa:	4603      	mov	r3, r0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	@ 0x28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d177      	bne.n	8002e0c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_UART_Transmit+0x24>
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e070      	b.n	8002e0e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2221      	movs	r2, #33	@ 0x21
 8002d38:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d3a:	f7fd ff21 	bl	8000b80 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	88fa      	ldrh	r2, [r7, #6]
 8002d44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d58:	d108      	bne.n	8002d6c <HAL_UART_Transmit+0x68>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	e003      	b.n	8002d74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d74:	e02f      	b.n	8002dd6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2180      	movs	r1, #128	@ 0x80
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fc4b 	bl	800361c <UART_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e03b      	b.n	8002e0e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da8:	b292      	uxth	r2, r2
 8002daa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	3302      	adds	r3, #2
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	e007      	b.n	8002dc4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1c9      	bne.n	8002d76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2140      	movs	r1, #64	@ 0x40
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fc15 	bl	800361c <UART_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e005      	b.n	8002e0e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e1c:	b08a      	sub	sp, #40	@ 0x28
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4ba4      	ldr	r3, [pc, #656]	@ (80030d8 <UART_SetConfig+0x2c0>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a99      	ldr	r2, [pc, #612]	@ (80030dc <UART_SetConfig+0x2c4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d004      	beq.n	8002e84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e80:	4313      	orrs	r3, r2
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a90      	ldr	r2, [pc, #576]	@ (80030e0 <UART_SetConfig+0x2c8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d126      	bne.n	8002ef0 <UART_SetConfig+0xd8>
 8002ea2:	4b90      	ldr	r3, [pc, #576]	@ (80030e4 <UART_SetConfig+0x2cc>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d81b      	bhi.n	8002ee8 <UART_SetConfig+0xd0>
 8002eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <UART_SetConfig+0xa0>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002ed9 	.word	0x08002ed9
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08002ee1 	.word	0x08002ee1
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ece:	e116      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ed6:	e112      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ede:	e10e      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ee6:	e10a      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002ee8:	2310      	movs	r3, #16
 8002eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eee:	e106      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a7c      	ldr	r2, [pc, #496]	@ (80030e8 <UART_SetConfig+0x2d0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d138      	bne.n	8002f6c <UART_SetConfig+0x154>
 8002efa:	4b7a      	ldr	r3, [pc, #488]	@ (80030e4 <UART_SetConfig+0x2cc>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	d82d      	bhi.n	8002f64 <UART_SetConfig+0x14c>
 8002f08:	a201      	add	r2, pc, #4	@ (adr r2, 8002f10 <UART_SetConfig+0xf8>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f45 	.word	0x08002f45
 8002f14:	08002f65 	.word	0x08002f65
 8002f18:	08002f65 	.word	0x08002f65
 8002f1c:	08002f65 	.word	0x08002f65
 8002f20:	08002f55 	.word	0x08002f55
 8002f24:	08002f65 	.word	0x08002f65
 8002f28:	08002f65 	.word	0x08002f65
 8002f2c:	08002f65 	.word	0x08002f65
 8002f30:	08002f4d 	.word	0x08002f4d
 8002f34:	08002f65 	.word	0x08002f65
 8002f38:	08002f65 	.word	0x08002f65
 8002f3c:	08002f65 	.word	0x08002f65
 8002f40:	08002f5d 	.word	0x08002f5d
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f4a:	e0d8      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f52:	e0d4      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002f54:	2304      	movs	r3, #4
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5a:	e0d0      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f62:	e0cc      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002f64:	2310      	movs	r3, #16
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f6a:	e0c8      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5e      	ldr	r2, [pc, #376]	@ (80030ec <UART_SetConfig+0x2d4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d125      	bne.n	8002fc2 <UART_SetConfig+0x1aa>
 8002f76:	4b5b      	ldr	r3, [pc, #364]	@ (80030e4 <UART_SetConfig+0x2cc>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002f80:	2b30      	cmp	r3, #48	@ 0x30
 8002f82:	d016      	beq.n	8002fb2 <UART_SetConfig+0x19a>
 8002f84:	2b30      	cmp	r3, #48	@ 0x30
 8002f86:	d818      	bhi.n	8002fba <UART_SetConfig+0x1a2>
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d00a      	beq.n	8002fa2 <UART_SetConfig+0x18a>
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d814      	bhi.n	8002fba <UART_SetConfig+0x1a2>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <UART_SetConfig+0x182>
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d008      	beq.n	8002faa <UART_SetConfig+0x192>
 8002f98:	e00f      	b.n	8002fba <UART_SetConfig+0x1a2>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa0:	e0ad      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa8:	e0a9      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002faa:	2304      	movs	r3, #4
 8002fac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb0:	e0a5      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb8:	e0a1      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002fba:	2310      	movs	r3, #16
 8002fbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc0:	e09d      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a4a      	ldr	r2, [pc, #296]	@ (80030f0 <UART_SetConfig+0x2d8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d125      	bne.n	8003018 <UART_SetConfig+0x200>
 8002fcc:	4b45      	ldr	r3, [pc, #276]	@ (80030e4 <UART_SetConfig+0x2cc>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002fd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fd8:	d016      	beq.n	8003008 <UART_SetConfig+0x1f0>
 8002fda:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fdc:	d818      	bhi.n	8003010 <UART_SetConfig+0x1f8>
 8002fde:	2b80      	cmp	r3, #128	@ 0x80
 8002fe0:	d00a      	beq.n	8002ff8 <UART_SetConfig+0x1e0>
 8002fe2:	2b80      	cmp	r3, #128	@ 0x80
 8002fe4:	d814      	bhi.n	8003010 <UART_SetConfig+0x1f8>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <UART_SetConfig+0x1d8>
 8002fea:	2b40      	cmp	r3, #64	@ 0x40
 8002fec:	d008      	beq.n	8003000 <UART_SetConfig+0x1e8>
 8002fee:	e00f      	b.n	8003010 <UART_SetConfig+0x1f8>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff6:	e082      	b.n	80030fe <UART_SetConfig+0x2e6>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffe:	e07e      	b.n	80030fe <UART_SetConfig+0x2e6>
 8003000:	2304      	movs	r3, #4
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003006:	e07a      	b.n	80030fe <UART_SetConfig+0x2e6>
 8003008:	2308      	movs	r3, #8
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300e:	e076      	b.n	80030fe <UART_SetConfig+0x2e6>
 8003010:	2310      	movs	r3, #16
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003016:	e072      	b.n	80030fe <UART_SetConfig+0x2e6>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a35      	ldr	r2, [pc, #212]	@ (80030f4 <UART_SetConfig+0x2dc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d12a      	bne.n	8003078 <UART_SetConfig+0x260>
 8003022:	4b30      	ldr	r3, [pc, #192]	@ (80030e4 <UART_SetConfig+0x2cc>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800302c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003030:	d01a      	beq.n	8003068 <UART_SetConfig+0x250>
 8003032:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003036:	d81b      	bhi.n	8003070 <UART_SetConfig+0x258>
 8003038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800303c:	d00c      	beq.n	8003058 <UART_SetConfig+0x240>
 800303e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003042:	d815      	bhi.n	8003070 <UART_SetConfig+0x258>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <UART_SetConfig+0x238>
 8003048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800304c:	d008      	beq.n	8003060 <UART_SetConfig+0x248>
 800304e:	e00f      	b.n	8003070 <UART_SetConfig+0x258>
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003056:	e052      	b.n	80030fe <UART_SetConfig+0x2e6>
 8003058:	2302      	movs	r3, #2
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305e:	e04e      	b.n	80030fe <UART_SetConfig+0x2e6>
 8003060:	2304      	movs	r3, #4
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003066:	e04a      	b.n	80030fe <UART_SetConfig+0x2e6>
 8003068:	2308      	movs	r3, #8
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800306e:	e046      	b.n	80030fe <UART_SetConfig+0x2e6>
 8003070:	2310      	movs	r3, #16
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003076:	e042      	b.n	80030fe <UART_SetConfig+0x2e6>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a17      	ldr	r2, [pc, #92]	@ (80030dc <UART_SetConfig+0x2c4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d13a      	bne.n	80030f8 <UART_SetConfig+0x2e0>
 8003082:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <UART_SetConfig+0x2cc>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003088:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800308c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003090:	d01a      	beq.n	80030c8 <UART_SetConfig+0x2b0>
 8003092:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003096:	d81b      	bhi.n	80030d0 <UART_SetConfig+0x2b8>
 8003098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800309c:	d00c      	beq.n	80030b8 <UART_SetConfig+0x2a0>
 800309e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030a2:	d815      	bhi.n	80030d0 <UART_SetConfig+0x2b8>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <UART_SetConfig+0x298>
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ac:	d008      	beq.n	80030c0 <UART_SetConfig+0x2a8>
 80030ae:	e00f      	b.n	80030d0 <UART_SetConfig+0x2b8>
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b6:	e022      	b.n	80030fe <UART_SetConfig+0x2e6>
 80030b8:	2302      	movs	r3, #2
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030be:	e01e      	b.n	80030fe <UART_SetConfig+0x2e6>
 80030c0:	2304      	movs	r3, #4
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c6:	e01a      	b.n	80030fe <UART_SetConfig+0x2e6>
 80030c8:	2308      	movs	r3, #8
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ce:	e016      	b.n	80030fe <UART_SetConfig+0x2e6>
 80030d0:	2310      	movs	r3, #16
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d6:	e012      	b.n	80030fe <UART_SetConfig+0x2e6>
 80030d8:	efff69f3 	.word	0xefff69f3
 80030dc:	40008000 	.word	0x40008000
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40004400 	.word	0x40004400
 80030ec:	40004800 	.word	0x40004800
 80030f0:	40004c00 	.word	0x40004c00
 80030f4:	40005000 	.word	0x40005000
 80030f8:	2310      	movs	r3, #16
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a9f      	ldr	r2, [pc, #636]	@ (8003380 <UART_SetConfig+0x568>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d17a      	bne.n	80031fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003108:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800310c:	2b08      	cmp	r3, #8
 800310e:	d824      	bhi.n	800315a <UART_SetConfig+0x342>
 8003110:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <UART_SetConfig+0x300>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800313d 	.word	0x0800313d
 800311c:	0800315b 	.word	0x0800315b
 8003120:	08003145 	.word	0x08003145
 8003124:	0800315b 	.word	0x0800315b
 8003128:	0800314b 	.word	0x0800314b
 800312c:	0800315b 	.word	0x0800315b
 8003130:	0800315b 	.word	0x0800315b
 8003134:	0800315b 	.word	0x0800315b
 8003138:	08003153 	.word	0x08003153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800313c:	f7ff f84c 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003140:	61f8      	str	r0, [r7, #28]
        break;
 8003142:	e010      	b.n	8003166 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003144:	4b8f      	ldr	r3, [pc, #572]	@ (8003384 <UART_SetConfig+0x56c>)
 8003146:	61fb      	str	r3, [r7, #28]
        break;
 8003148:	e00d      	b.n	8003166 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314a:	f7fe ffad 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 800314e:	61f8      	str	r0, [r7, #28]
        break;
 8003150:	e009      	b.n	8003166 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003156:	61fb      	str	r3, [r7, #28]
        break;
 8003158:	e005      	b.n	8003166 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80fb 	beq.w	8003364 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	429a      	cmp	r2, r3
 800317c:	d305      	bcc.n	800318a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	429a      	cmp	r2, r3
 8003188:	d903      	bls.n	8003192 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003190:	e0e8      	b.n	8003364 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	2200      	movs	r2, #0
 8003196:	461c      	mov	r4, r3
 8003198:	4615      	mov	r5, r2
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	022b      	lsls	r3, r5, #8
 80031a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031a8:	0222      	lsls	r2, r4, #8
 80031aa:	68f9      	ldr	r1, [r7, #12]
 80031ac:	6849      	ldr	r1, [r1, #4]
 80031ae:	0849      	lsrs	r1, r1, #1
 80031b0:	2000      	movs	r0, #0
 80031b2:	4688      	mov	r8, r1
 80031b4:	4681      	mov	r9, r0
 80031b6:	eb12 0a08 	adds.w	sl, r2, r8
 80031ba:	eb43 0b09 	adc.w	fp, r3, r9
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031cc:	4650      	mov	r0, sl
 80031ce:	4659      	mov	r1, fp
 80031d0:	f7fd f856 	bl	8000280 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4613      	mov	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031e2:	d308      	bcc.n	80031f6 <UART_SetConfig+0x3de>
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031ea:	d204      	bcs.n	80031f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	60da      	str	r2, [r3, #12]
 80031f4:	e0b6      	b.n	8003364 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80031fc:	e0b2      	b.n	8003364 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003206:	d15e      	bne.n	80032c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003208:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800320c:	2b08      	cmp	r3, #8
 800320e:	d828      	bhi.n	8003262 <UART_SetConfig+0x44a>
 8003210:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <UART_SetConfig+0x400>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800323d 	.word	0x0800323d
 800321c:	08003245 	.word	0x08003245
 8003220:	0800324d 	.word	0x0800324d
 8003224:	08003263 	.word	0x08003263
 8003228:	08003253 	.word	0x08003253
 800322c:	08003263 	.word	0x08003263
 8003230:	08003263 	.word	0x08003263
 8003234:	08003263 	.word	0x08003263
 8003238:	0800325b 	.word	0x0800325b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800323c:	f7fe ffcc 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003240:	61f8      	str	r0, [r7, #28]
        break;
 8003242:	e014      	b.n	800326e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003244:	f7fe ffde 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8003248:	61f8      	str	r0, [r7, #28]
        break;
 800324a:	e010      	b.n	800326e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800324c:	4b4d      	ldr	r3, [pc, #308]	@ (8003384 <UART_SetConfig+0x56c>)
 800324e:	61fb      	str	r3, [r7, #28]
        break;
 8003250:	e00d      	b.n	800326e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003252:	f7fe ff29 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8003256:	61f8      	str	r0, [r7, #28]
        break;
 8003258:	e009      	b.n	800326e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800325e:	61fb      	str	r3, [r7, #28]
        break;
 8003260:	e005      	b.n	800326e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800326c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d077      	beq.n	8003364 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005a      	lsls	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	441a      	add	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d916      	bls.n	80032be <UART_SetConfig+0x4a6>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003296:	d212      	bcs.n	80032be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f023 030f 	bic.w	r3, r3, #15
 80032a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	8afb      	ldrh	r3, [r7, #22]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	8afa      	ldrh	r2, [r7, #22]
 80032ba:	60da      	str	r2, [r3, #12]
 80032bc:	e052      	b.n	8003364 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032c4:	e04e      	b.n	8003364 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d827      	bhi.n	800331e <UART_SetConfig+0x506>
 80032ce:	a201      	add	r2, pc, #4	@ (adr r2, 80032d4 <UART_SetConfig+0x4bc>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	08003301 	.word	0x08003301
 80032dc:	08003309 	.word	0x08003309
 80032e0:	0800331f 	.word	0x0800331f
 80032e4:	0800330f 	.word	0x0800330f
 80032e8:	0800331f 	.word	0x0800331f
 80032ec:	0800331f 	.word	0x0800331f
 80032f0:	0800331f 	.word	0x0800331f
 80032f4:	08003317 	.word	0x08003317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7fe ff6e 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 80032fc:	61f8      	str	r0, [r7, #28]
        break;
 80032fe:	e014      	b.n	800332a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003300:	f7fe ff80 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8003304:	61f8      	str	r0, [r7, #28]
        break;
 8003306:	e010      	b.n	800332a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003308:	4b1e      	ldr	r3, [pc, #120]	@ (8003384 <UART_SetConfig+0x56c>)
 800330a:	61fb      	str	r3, [r7, #28]
        break;
 800330c:	e00d      	b.n	800332a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330e:	f7fe fecb 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8003312:	61f8      	str	r0, [r7, #28]
        break;
 8003314:	e009      	b.n	800332a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800331a:	61fb      	str	r3, [r7, #28]
        break;
 800331c:	e005      	b.n	800332a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003328:	bf00      	nop
    }

    if (pclk != 0U)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d019      	beq.n	8003364 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	085a      	lsrs	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	441a      	add	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b0f      	cmp	r3, #15
 8003348:	d909      	bls.n	800335e <UART_SetConfig+0x546>
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003350:	d205      	bcs.n	800335e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	e002      	b.n	8003364 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003370:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003374:	4618      	mov	r0, r3
 8003376:	3728      	adds	r7, #40	@ 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337e:	bf00      	nop
 8003380:	40008000 	.word	0x40008000
 8003384:	00f42400 	.word	0x00f42400

08003388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01a      	beq.n	800349e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003486:	d10a      	bne.n	800349e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  }
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b098      	sub	sp, #96	@ 0x60
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034dc:	f7fd fb50 	bl	8000b80 <HAL_GetTick>
 80034e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d12e      	bne.n	800354e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f8:	2200      	movs	r2, #0
 80034fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f88c 	bl	800361c <UART_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d021      	beq.n	800354e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003512:	e853 3f00 	ldrex	r3, [r3]
 8003516:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800351e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003528:	647b      	str	r3, [r7, #68]	@ 0x44
 800352a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800352e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003530:	e841 2300 	strex	r3, r2, [r1]
 8003534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e6      	bne.n	800350a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e062      	b.n	8003614 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b04      	cmp	r3, #4
 800355a:	d149      	bne.n	80035f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800355c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003564:	2200      	movs	r2, #0
 8003566:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f856 	bl	800361c <UART_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d03c      	beq.n	80035f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	e853 3f00 	ldrex	r3, [r3]
 8003582:	623b      	str	r3, [r7, #32]
   return(result);
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800358a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003594:	633b      	str	r3, [r7, #48]	@ 0x30
 8003596:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800359a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e6      	bne.n	8003576 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3308      	adds	r3, #8
 80035ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3308      	adds	r3, #8
 80035c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035c8:	61fa      	str	r2, [r7, #28]
 80035ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	69b9      	ldr	r1, [r7, #24]
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	617b      	str	r3, [r7, #20]
   return(result);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e5      	bne.n	80035a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e011      	b.n	8003614 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3758      	adds	r7, #88	@ 0x58
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	e04f      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d04b      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003636:	f7fd faa3 	bl	8000b80 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <UART_WaitOnFlagUntilTimeout+0x30>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e04e      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d037      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b80      	cmp	r3, #128	@ 0x80
 8003662:	d034      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	d031      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d110      	bne.n	800369a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2208      	movs	r2, #8
 800367e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f838 	bl	80036f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2208      	movs	r2, #8
 800368a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e029      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036a8:	d111      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f81e 	bl	80036f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e00f      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	429a      	cmp	r2, r3
 80036dc:	bf0c      	ite	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	2300      	movne	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d0a0      	beq.n	800362e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b095      	sub	sp, #84	@ 0x54
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003706:	e853 3f00 	ldrex	r3, [r3]
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800371c:	643b      	str	r3, [r7, #64]	@ 0x40
 800371e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003724:	e841 2300 	strex	r3, r2, [r1]
 8003728:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e6      	bne.n	80036fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3308      	adds	r3, #8
 8003736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3308      	adds	r3, #8
 800374e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003750:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e5      	bne.n	8003730 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003768:	2b01      	cmp	r3, #1
 800376a:	d118      	bne.n	800379e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	60bb      	str	r3, [r7, #8]
   return(result);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f023 0310 	bic.w	r3, r3, #16
 8003780:	647b      	str	r3, [r7, #68]	@ 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	6979      	ldr	r1, [r7, #20]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	613b      	str	r3, [r7, #16]
   return(result);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e6      	bne.n	800376c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037b2:	bf00      	nop
 80037b4:	3754      	adds	r7, #84	@ 0x54
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <sniprintf>:
 80037c0:	b40c      	push	{r2, r3}
 80037c2:	b530      	push	{r4, r5, lr}
 80037c4:	4b18      	ldr	r3, [pc, #96]	@ (8003828 <sniprintf+0x68>)
 80037c6:	1e0c      	subs	r4, r1, #0
 80037c8:	681d      	ldr	r5, [r3, #0]
 80037ca:	b09d      	sub	sp, #116	@ 0x74
 80037cc:	da08      	bge.n	80037e0 <sniprintf+0x20>
 80037ce:	238b      	movs	r3, #139	@ 0x8b
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295
 80037d6:	b01d      	add	sp, #116	@ 0x74
 80037d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037dc:	b002      	add	sp, #8
 80037de:	4770      	bx	lr
 80037e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80037e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 80037ee:	bf14      	ite	ne
 80037f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80037f4:	4623      	moveq	r3, r4
 80037f6:	9304      	str	r3, [sp, #16]
 80037f8:	9307      	str	r3, [sp, #28]
 80037fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037fe:	9002      	str	r0, [sp, #8]
 8003800:	9006      	str	r0, [sp, #24]
 8003802:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003806:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003808:	ab21      	add	r3, sp, #132	@ 0x84
 800380a:	a902      	add	r1, sp, #8
 800380c:	4628      	mov	r0, r5
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	f000 f994 	bl	8003b3c <_svfiprintf_r>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	bfbc      	itt	lt
 8003818:	238b      	movlt	r3, #139	@ 0x8b
 800381a:	602b      	strlt	r3, [r5, #0]
 800381c:	2c00      	cmp	r4, #0
 800381e:	d0da      	beq.n	80037d6 <sniprintf+0x16>
 8003820:	9b02      	ldr	r3, [sp, #8]
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	e7d6      	b.n	80037d6 <sniprintf+0x16>
 8003828:	2000002c 	.word	0x2000002c

0800382c <memset>:
 800382c:	4402      	add	r2, r0
 800382e:	4603      	mov	r3, r0
 8003830:	4293      	cmp	r3, r2
 8003832:	d100      	bne.n	8003836 <memset+0xa>
 8003834:	4770      	bx	lr
 8003836:	f803 1b01 	strb.w	r1, [r3], #1
 800383a:	e7f9      	b.n	8003830 <memset+0x4>

0800383c <__errno>:
 800383c:	4b01      	ldr	r3, [pc, #4]	@ (8003844 <__errno+0x8>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	2000002c 	.word	0x2000002c

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4d0d      	ldr	r5, [pc, #52]	@ (8003880 <__libc_init_array+0x38>)
 800384c:	4c0d      	ldr	r4, [pc, #52]	@ (8003884 <__libc_init_array+0x3c>)
 800384e:	1b64      	subs	r4, r4, r5
 8003850:	10a4      	asrs	r4, r4, #2
 8003852:	2600      	movs	r6, #0
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	4d0b      	ldr	r5, [pc, #44]	@ (8003888 <__libc_init_array+0x40>)
 800385a:	4c0c      	ldr	r4, [pc, #48]	@ (800388c <__libc_init_array+0x44>)
 800385c:	f000 fc64 	bl	8004128 <_init>
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	2600      	movs	r6, #0
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	f855 3b04 	ldr.w	r3, [r5], #4
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	080041e0 	.word	0x080041e0
 8003884:	080041e0 	.word	0x080041e0
 8003888:	080041e0 	.word	0x080041e0
 800388c:	080041e4 	.word	0x080041e4

08003890 <__retarget_lock_acquire_recursive>:
 8003890:	4770      	bx	lr

08003892 <__retarget_lock_release_recursive>:
 8003892:	4770      	bx	lr

08003894 <_free_r>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	4605      	mov	r5, r0
 8003898:	2900      	cmp	r1, #0
 800389a:	d041      	beq.n	8003920 <_free_r+0x8c>
 800389c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a0:	1f0c      	subs	r4, r1, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bfb8      	it	lt
 80038a6:	18e4      	addlt	r4, r4, r3
 80038a8:	f000 f8e0 	bl	8003a6c <__malloc_lock>
 80038ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003924 <_free_r+0x90>)
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	b933      	cbnz	r3, 80038c0 <_free_r+0x2c>
 80038b2:	6063      	str	r3, [r4, #4]
 80038b4:	6014      	str	r4, [r2, #0]
 80038b6:	4628      	mov	r0, r5
 80038b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038bc:	f000 b8dc 	b.w	8003a78 <__malloc_unlock>
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d908      	bls.n	80038d6 <_free_r+0x42>
 80038c4:	6820      	ldr	r0, [r4, #0]
 80038c6:	1821      	adds	r1, r4, r0
 80038c8:	428b      	cmp	r3, r1
 80038ca:	bf01      	itttt	eq
 80038cc:	6819      	ldreq	r1, [r3, #0]
 80038ce:	685b      	ldreq	r3, [r3, #4]
 80038d0:	1809      	addeq	r1, r1, r0
 80038d2:	6021      	streq	r1, [r4, #0]
 80038d4:	e7ed      	b.n	80038b2 <_free_r+0x1e>
 80038d6:	461a      	mov	r2, r3
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	b10b      	cbz	r3, 80038e0 <_free_r+0x4c>
 80038dc:	42a3      	cmp	r3, r4
 80038de:	d9fa      	bls.n	80038d6 <_free_r+0x42>
 80038e0:	6811      	ldr	r1, [r2, #0]
 80038e2:	1850      	adds	r0, r2, r1
 80038e4:	42a0      	cmp	r0, r4
 80038e6:	d10b      	bne.n	8003900 <_free_r+0x6c>
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	4401      	add	r1, r0
 80038ec:	1850      	adds	r0, r2, r1
 80038ee:	4283      	cmp	r3, r0
 80038f0:	6011      	str	r1, [r2, #0]
 80038f2:	d1e0      	bne.n	80038b6 <_free_r+0x22>
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	6053      	str	r3, [r2, #4]
 80038fa:	4408      	add	r0, r1
 80038fc:	6010      	str	r0, [r2, #0]
 80038fe:	e7da      	b.n	80038b6 <_free_r+0x22>
 8003900:	d902      	bls.n	8003908 <_free_r+0x74>
 8003902:	230c      	movs	r3, #12
 8003904:	602b      	str	r3, [r5, #0]
 8003906:	e7d6      	b.n	80038b6 <_free_r+0x22>
 8003908:	6820      	ldr	r0, [r4, #0]
 800390a:	1821      	adds	r1, r4, r0
 800390c:	428b      	cmp	r3, r1
 800390e:	bf04      	itt	eq
 8003910:	6819      	ldreq	r1, [r3, #0]
 8003912:	685b      	ldreq	r3, [r3, #4]
 8003914:	6063      	str	r3, [r4, #4]
 8003916:	bf04      	itt	eq
 8003918:	1809      	addeq	r1, r1, r0
 800391a:	6021      	streq	r1, [r4, #0]
 800391c:	6054      	str	r4, [r2, #4]
 800391e:	e7ca      	b.n	80038b6 <_free_r+0x22>
 8003920:	bd38      	pop	{r3, r4, r5, pc}
 8003922:	bf00      	nop
 8003924:	2000026c 	.word	0x2000026c

08003928 <sbrk_aligned>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	4e0f      	ldr	r6, [pc, #60]	@ (8003968 <sbrk_aligned+0x40>)
 800392c:	460c      	mov	r4, r1
 800392e:	6831      	ldr	r1, [r6, #0]
 8003930:	4605      	mov	r5, r0
 8003932:	b911      	cbnz	r1, 800393a <sbrk_aligned+0x12>
 8003934:	f000 fba4 	bl	8004080 <_sbrk_r>
 8003938:	6030      	str	r0, [r6, #0]
 800393a:	4621      	mov	r1, r4
 800393c:	4628      	mov	r0, r5
 800393e:	f000 fb9f 	bl	8004080 <_sbrk_r>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	d103      	bne.n	800394e <sbrk_aligned+0x26>
 8003946:	f04f 34ff 	mov.w	r4, #4294967295
 800394a:	4620      	mov	r0, r4
 800394c:	bd70      	pop	{r4, r5, r6, pc}
 800394e:	1cc4      	adds	r4, r0, #3
 8003950:	f024 0403 	bic.w	r4, r4, #3
 8003954:	42a0      	cmp	r0, r4
 8003956:	d0f8      	beq.n	800394a <sbrk_aligned+0x22>
 8003958:	1a21      	subs	r1, r4, r0
 800395a:	4628      	mov	r0, r5
 800395c:	f000 fb90 	bl	8004080 <_sbrk_r>
 8003960:	3001      	adds	r0, #1
 8003962:	d1f2      	bne.n	800394a <sbrk_aligned+0x22>
 8003964:	e7ef      	b.n	8003946 <sbrk_aligned+0x1e>
 8003966:	bf00      	nop
 8003968:	20000268 	.word	0x20000268

0800396c <_malloc_r>:
 800396c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003970:	1ccd      	adds	r5, r1, #3
 8003972:	f025 0503 	bic.w	r5, r5, #3
 8003976:	3508      	adds	r5, #8
 8003978:	2d0c      	cmp	r5, #12
 800397a:	bf38      	it	cc
 800397c:	250c      	movcc	r5, #12
 800397e:	2d00      	cmp	r5, #0
 8003980:	4606      	mov	r6, r0
 8003982:	db01      	blt.n	8003988 <_malloc_r+0x1c>
 8003984:	42a9      	cmp	r1, r5
 8003986:	d904      	bls.n	8003992 <_malloc_r+0x26>
 8003988:	230c      	movs	r3, #12
 800398a:	6033      	str	r3, [r6, #0]
 800398c:	2000      	movs	r0, #0
 800398e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003992:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a68 <_malloc_r+0xfc>
 8003996:	f000 f869 	bl	8003a6c <__malloc_lock>
 800399a:	f8d8 3000 	ldr.w	r3, [r8]
 800399e:	461c      	mov	r4, r3
 80039a0:	bb44      	cbnz	r4, 80039f4 <_malloc_r+0x88>
 80039a2:	4629      	mov	r1, r5
 80039a4:	4630      	mov	r0, r6
 80039a6:	f7ff ffbf 	bl	8003928 <sbrk_aligned>
 80039aa:	1c43      	adds	r3, r0, #1
 80039ac:	4604      	mov	r4, r0
 80039ae:	d158      	bne.n	8003a62 <_malloc_r+0xf6>
 80039b0:	f8d8 4000 	ldr.w	r4, [r8]
 80039b4:	4627      	mov	r7, r4
 80039b6:	2f00      	cmp	r7, #0
 80039b8:	d143      	bne.n	8003a42 <_malloc_r+0xd6>
 80039ba:	2c00      	cmp	r4, #0
 80039bc:	d04b      	beq.n	8003a56 <_malloc_r+0xea>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	4639      	mov	r1, r7
 80039c2:	4630      	mov	r0, r6
 80039c4:	eb04 0903 	add.w	r9, r4, r3
 80039c8:	f000 fb5a 	bl	8004080 <_sbrk_r>
 80039cc:	4581      	cmp	r9, r0
 80039ce:	d142      	bne.n	8003a56 <_malloc_r+0xea>
 80039d0:	6821      	ldr	r1, [r4, #0]
 80039d2:	1a6d      	subs	r5, r5, r1
 80039d4:	4629      	mov	r1, r5
 80039d6:	4630      	mov	r0, r6
 80039d8:	f7ff ffa6 	bl	8003928 <sbrk_aligned>
 80039dc:	3001      	adds	r0, #1
 80039de:	d03a      	beq.n	8003a56 <_malloc_r+0xea>
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	442b      	add	r3, r5
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	f8d8 3000 	ldr.w	r3, [r8]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	bb62      	cbnz	r2, 8003a48 <_malloc_r+0xdc>
 80039ee:	f8c8 7000 	str.w	r7, [r8]
 80039f2:	e00f      	b.n	8003a14 <_malloc_r+0xa8>
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	1b52      	subs	r2, r2, r5
 80039f8:	d420      	bmi.n	8003a3c <_malloc_r+0xd0>
 80039fa:	2a0b      	cmp	r2, #11
 80039fc:	d917      	bls.n	8003a2e <_malloc_r+0xc2>
 80039fe:	1961      	adds	r1, r4, r5
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	6025      	str	r5, [r4, #0]
 8003a04:	bf18      	it	ne
 8003a06:	6059      	strne	r1, [r3, #4]
 8003a08:	6863      	ldr	r3, [r4, #4]
 8003a0a:	bf08      	it	eq
 8003a0c:	f8c8 1000 	streq.w	r1, [r8]
 8003a10:	5162      	str	r2, [r4, r5]
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	4630      	mov	r0, r6
 8003a16:	f000 f82f 	bl	8003a78 <__malloc_unlock>
 8003a1a:	f104 000b 	add.w	r0, r4, #11
 8003a1e:	1d23      	adds	r3, r4, #4
 8003a20:	f020 0007 	bic.w	r0, r0, #7
 8003a24:	1ac2      	subs	r2, r0, r3
 8003a26:	bf1c      	itt	ne
 8003a28:	1a1b      	subne	r3, r3, r0
 8003a2a:	50a3      	strne	r3, [r4, r2]
 8003a2c:	e7af      	b.n	800398e <_malloc_r+0x22>
 8003a2e:	6862      	ldr	r2, [r4, #4]
 8003a30:	42a3      	cmp	r3, r4
 8003a32:	bf0c      	ite	eq
 8003a34:	f8c8 2000 	streq.w	r2, [r8]
 8003a38:	605a      	strne	r2, [r3, #4]
 8003a3a:	e7eb      	b.n	8003a14 <_malloc_r+0xa8>
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	6864      	ldr	r4, [r4, #4]
 8003a40:	e7ae      	b.n	80039a0 <_malloc_r+0x34>
 8003a42:	463c      	mov	r4, r7
 8003a44:	687f      	ldr	r7, [r7, #4]
 8003a46:	e7b6      	b.n	80039b6 <_malloc_r+0x4a>
 8003a48:	461a      	mov	r2, r3
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	42a3      	cmp	r3, r4
 8003a4e:	d1fb      	bne.n	8003a48 <_malloc_r+0xdc>
 8003a50:	2300      	movs	r3, #0
 8003a52:	6053      	str	r3, [r2, #4]
 8003a54:	e7de      	b.n	8003a14 <_malloc_r+0xa8>
 8003a56:	230c      	movs	r3, #12
 8003a58:	6033      	str	r3, [r6, #0]
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f000 f80c 	bl	8003a78 <__malloc_unlock>
 8003a60:	e794      	b.n	800398c <_malloc_r+0x20>
 8003a62:	6005      	str	r5, [r0, #0]
 8003a64:	e7d6      	b.n	8003a14 <_malloc_r+0xa8>
 8003a66:	bf00      	nop
 8003a68:	2000026c 	.word	0x2000026c

08003a6c <__malloc_lock>:
 8003a6c:	4801      	ldr	r0, [pc, #4]	@ (8003a74 <__malloc_lock+0x8>)
 8003a6e:	f7ff bf0f 	b.w	8003890 <__retarget_lock_acquire_recursive>
 8003a72:	bf00      	nop
 8003a74:	20000264 	.word	0x20000264

08003a78 <__malloc_unlock>:
 8003a78:	4801      	ldr	r0, [pc, #4]	@ (8003a80 <__malloc_unlock+0x8>)
 8003a7a:	f7ff bf0a 	b.w	8003892 <__retarget_lock_release_recursive>
 8003a7e:	bf00      	nop
 8003a80:	20000264 	.word	0x20000264

08003a84 <__ssputs_r>:
 8003a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a88:	688e      	ldr	r6, [r1, #8]
 8003a8a:	461f      	mov	r7, r3
 8003a8c:	42be      	cmp	r6, r7
 8003a8e:	680b      	ldr	r3, [r1, #0]
 8003a90:	4682      	mov	sl, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	4690      	mov	r8, r2
 8003a96:	d82d      	bhi.n	8003af4 <__ssputs_r+0x70>
 8003a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003aa0:	d026      	beq.n	8003af0 <__ssputs_r+0x6c>
 8003aa2:	6965      	ldr	r5, [r4, #20]
 8003aa4:	6909      	ldr	r1, [r1, #16]
 8003aa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aaa:	eba3 0901 	sub.w	r9, r3, r1
 8003aae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ab2:	1c7b      	adds	r3, r7, #1
 8003ab4:	444b      	add	r3, r9
 8003ab6:	106d      	asrs	r5, r5, #1
 8003ab8:	429d      	cmp	r5, r3
 8003aba:	bf38      	it	cc
 8003abc:	461d      	movcc	r5, r3
 8003abe:	0553      	lsls	r3, r2, #21
 8003ac0:	d527      	bpl.n	8003b12 <__ssputs_r+0x8e>
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	f7ff ff52 	bl	800396c <_malloc_r>
 8003ac8:	4606      	mov	r6, r0
 8003aca:	b360      	cbz	r0, 8003b26 <__ssputs_r+0xa2>
 8003acc:	6921      	ldr	r1, [r4, #16]
 8003ace:	464a      	mov	r2, r9
 8003ad0:	f000 fae6 	bl	80040a0 <memcpy>
 8003ad4:	89a3      	ldrh	r3, [r4, #12]
 8003ad6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ade:	81a3      	strh	r3, [r4, #12]
 8003ae0:	6126      	str	r6, [r4, #16]
 8003ae2:	6165      	str	r5, [r4, #20]
 8003ae4:	444e      	add	r6, r9
 8003ae6:	eba5 0509 	sub.w	r5, r5, r9
 8003aea:	6026      	str	r6, [r4, #0]
 8003aec:	60a5      	str	r5, [r4, #8]
 8003aee:	463e      	mov	r6, r7
 8003af0:	42be      	cmp	r6, r7
 8003af2:	d900      	bls.n	8003af6 <__ssputs_r+0x72>
 8003af4:	463e      	mov	r6, r7
 8003af6:	6820      	ldr	r0, [r4, #0]
 8003af8:	4632      	mov	r2, r6
 8003afa:	4641      	mov	r1, r8
 8003afc:	f000 faa6 	bl	800404c <memmove>
 8003b00:	68a3      	ldr	r3, [r4, #8]
 8003b02:	1b9b      	subs	r3, r3, r6
 8003b04:	60a3      	str	r3, [r4, #8]
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	4433      	add	r3, r6
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b12:	462a      	mov	r2, r5
 8003b14:	f000 fad2 	bl	80040bc <_realloc_r>
 8003b18:	4606      	mov	r6, r0
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d1e0      	bne.n	8003ae0 <__ssputs_r+0x5c>
 8003b1e:	6921      	ldr	r1, [r4, #16]
 8003b20:	4650      	mov	r0, sl
 8003b22:	f7ff feb7 	bl	8003894 <_free_r>
 8003b26:	230c      	movs	r3, #12
 8003b28:	f8ca 3000 	str.w	r3, [sl]
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b32:	81a3      	strh	r3, [r4, #12]
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295
 8003b38:	e7e9      	b.n	8003b0e <__ssputs_r+0x8a>
	...

08003b3c <_svfiprintf_r>:
 8003b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b40:	4698      	mov	r8, r3
 8003b42:	898b      	ldrh	r3, [r1, #12]
 8003b44:	061b      	lsls	r3, r3, #24
 8003b46:	b09d      	sub	sp, #116	@ 0x74
 8003b48:	4607      	mov	r7, r0
 8003b4a:	460d      	mov	r5, r1
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	d510      	bpl.n	8003b72 <_svfiprintf_r+0x36>
 8003b50:	690b      	ldr	r3, [r1, #16]
 8003b52:	b973      	cbnz	r3, 8003b72 <_svfiprintf_r+0x36>
 8003b54:	2140      	movs	r1, #64	@ 0x40
 8003b56:	f7ff ff09 	bl	800396c <_malloc_r>
 8003b5a:	6028      	str	r0, [r5, #0]
 8003b5c:	6128      	str	r0, [r5, #16]
 8003b5e:	b930      	cbnz	r0, 8003b6e <_svfiprintf_r+0x32>
 8003b60:	230c      	movs	r3, #12
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	f04f 30ff 	mov.w	r0, #4294967295
 8003b68:	b01d      	add	sp, #116	@ 0x74
 8003b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6e:	2340      	movs	r3, #64	@ 0x40
 8003b70:	616b      	str	r3, [r5, #20]
 8003b72:	2300      	movs	r3, #0
 8003b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b76:	2320      	movs	r3, #32
 8003b78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b80:	2330      	movs	r3, #48	@ 0x30
 8003b82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003d20 <_svfiprintf_r+0x1e4>
 8003b86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b8a:	f04f 0901 	mov.w	r9, #1
 8003b8e:	4623      	mov	r3, r4
 8003b90:	469a      	mov	sl, r3
 8003b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b96:	b10a      	cbz	r2, 8003b9c <_svfiprintf_r+0x60>
 8003b98:	2a25      	cmp	r2, #37	@ 0x25
 8003b9a:	d1f9      	bne.n	8003b90 <_svfiprintf_r+0x54>
 8003b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003ba0:	d00b      	beq.n	8003bba <_svfiprintf_r+0x7e>
 8003ba2:	465b      	mov	r3, fp
 8003ba4:	4622      	mov	r2, r4
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	4638      	mov	r0, r7
 8003baa:	f7ff ff6b 	bl	8003a84 <__ssputs_r>
 8003bae:	3001      	adds	r0, #1
 8003bb0:	f000 80a7 	beq.w	8003d02 <_svfiprintf_r+0x1c6>
 8003bb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bb6:	445a      	add	r2, fp
 8003bb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bba:	f89a 3000 	ldrb.w	r3, [sl]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 809f 	beq.w	8003d02 <_svfiprintf_r+0x1c6>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bce:	f10a 0a01 	add.w	sl, sl, #1
 8003bd2:	9304      	str	r3, [sp, #16]
 8003bd4:	9307      	str	r3, [sp, #28]
 8003bd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bda:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bdc:	4654      	mov	r4, sl
 8003bde:	2205      	movs	r2, #5
 8003be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be4:	484e      	ldr	r0, [pc, #312]	@ (8003d20 <_svfiprintf_r+0x1e4>)
 8003be6:	f7fc fafb 	bl	80001e0 <memchr>
 8003bea:	9a04      	ldr	r2, [sp, #16]
 8003bec:	b9d8      	cbnz	r0, 8003c26 <_svfiprintf_r+0xea>
 8003bee:	06d0      	lsls	r0, r2, #27
 8003bf0:	bf44      	itt	mi
 8003bf2:	2320      	movmi	r3, #32
 8003bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bf8:	0711      	lsls	r1, r2, #28
 8003bfa:	bf44      	itt	mi
 8003bfc:	232b      	movmi	r3, #43	@ 0x2b
 8003bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c02:	f89a 3000 	ldrb.w	r3, [sl]
 8003c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c08:	d015      	beq.n	8003c36 <_svfiprintf_r+0xfa>
 8003c0a:	9a07      	ldr	r2, [sp, #28]
 8003c0c:	4654      	mov	r4, sl
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f04f 0c0a 	mov.w	ip, #10
 8003c14:	4621      	mov	r1, r4
 8003c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c1a:	3b30      	subs	r3, #48	@ 0x30
 8003c1c:	2b09      	cmp	r3, #9
 8003c1e:	d94b      	bls.n	8003cb8 <_svfiprintf_r+0x17c>
 8003c20:	b1b0      	cbz	r0, 8003c50 <_svfiprintf_r+0x114>
 8003c22:	9207      	str	r2, [sp, #28]
 8003c24:	e014      	b.n	8003c50 <_svfiprintf_r+0x114>
 8003c26:	eba0 0308 	sub.w	r3, r0, r8
 8003c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	9304      	str	r3, [sp, #16]
 8003c32:	46a2      	mov	sl, r4
 8003c34:	e7d2      	b.n	8003bdc <_svfiprintf_r+0xa0>
 8003c36:	9b03      	ldr	r3, [sp, #12]
 8003c38:	1d19      	adds	r1, r3, #4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	9103      	str	r1, [sp, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bfbb      	ittet	lt
 8003c42:	425b      	neglt	r3, r3
 8003c44:	f042 0202 	orrlt.w	r2, r2, #2
 8003c48:	9307      	strge	r3, [sp, #28]
 8003c4a:	9307      	strlt	r3, [sp, #28]
 8003c4c:	bfb8      	it	lt
 8003c4e:	9204      	strlt	r2, [sp, #16]
 8003c50:	7823      	ldrb	r3, [r4, #0]
 8003c52:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c54:	d10a      	bne.n	8003c6c <_svfiprintf_r+0x130>
 8003c56:	7863      	ldrb	r3, [r4, #1]
 8003c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c5a:	d132      	bne.n	8003cc2 <_svfiprintf_r+0x186>
 8003c5c:	9b03      	ldr	r3, [sp, #12]
 8003c5e:	1d1a      	adds	r2, r3, #4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	9203      	str	r2, [sp, #12]
 8003c64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c68:	3402      	adds	r4, #2
 8003c6a:	9305      	str	r3, [sp, #20]
 8003c6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003d30 <_svfiprintf_r+0x1f4>
 8003c70:	7821      	ldrb	r1, [r4, #0]
 8003c72:	2203      	movs	r2, #3
 8003c74:	4650      	mov	r0, sl
 8003c76:	f7fc fab3 	bl	80001e0 <memchr>
 8003c7a:	b138      	cbz	r0, 8003c8c <_svfiprintf_r+0x150>
 8003c7c:	9b04      	ldr	r3, [sp, #16]
 8003c7e:	eba0 000a 	sub.w	r0, r0, sl
 8003c82:	2240      	movs	r2, #64	@ 0x40
 8003c84:	4082      	lsls	r2, r0
 8003c86:	4313      	orrs	r3, r2
 8003c88:	3401      	adds	r4, #1
 8003c8a:	9304      	str	r3, [sp, #16]
 8003c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c90:	4824      	ldr	r0, [pc, #144]	@ (8003d24 <_svfiprintf_r+0x1e8>)
 8003c92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c96:	2206      	movs	r2, #6
 8003c98:	f7fc faa2 	bl	80001e0 <memchr>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d036      	beq.n	8003d0e <_svfiprintf_r+0x1d2>
 8003ca0:	4b21      	ldr	r3, [pc, #132]	@ (8003d28 <_svfiprintf_r+0x1ec>)
 8003ca2:	bb1b      	cbnz	r3, 8003cec <_svfiprintf_r+0x1b0>
 8003ca4:	9b03      	ldr	r3, [sp, #12]
 8003ca6:	3307      	adds	r3, #7
 8003ca8:	f023 0307 	bic.w	r3, r3, #7
 8003cac:	3308      	adds	r3, #8
 8003cae:	9303      	str	r3, [sp, #12]
 8003cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cb2:	4433      	add	r3, r6
 8003cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cb6:	e76a      	b.n	8003b8e <_svfiprintf_r+0x52>
 8003cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	e7a8      	b.n	8003c14 <_svfiprintf_r+0xd8>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	3401      	adds	r4, #1
 8003cc6:	9305      	str	r3, [sp, #20]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f04f 0c0a 	mov.w	ip, #10
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cd4:	3a30      	subs	r2, #48	@ 0x30
 8003cd6:	2a09      	cmp	r2, #9
 8003cd8:	d903      	bls.n	8003ce2 <_svfiprintf_r+0x1a6>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0c6      	beq.n	8003c6c <_svfiprintf_r+0x130>
 8003cde:	9105      	str	r1, [sp, #20]
 8003ce0:	e7c4      	b.n	8003c6c <_svfiprintf_r+0x130>
 8003ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e7f0      	b.n	8003cce <_svfiprintf_r+0x192>
 8003cec:	ab03      	add	r3, sp, #12
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	462a      	mov	r2, r5
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d2c <_svfiprintf_r+0x1f0>)
 8003cf4:	a904      	add	r1, sp, #16
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	f3af 8000 	nop.w
 8003cfc:	1c42      	adds	r2, r0, #1
 8003cfe:	4606      	mov	r6, r0
 8003d00:	d1d6      	bne.n	8003cb0 <_svfiprintf_r+0x174>
 8003d02:	89ab      	ldrh	r3, [r5, #12]
 8003d04:	065b      	lsls	r3, r3, #25
 8003d06:	f53f af2d 	bmi.w	8003b64 <_svfiprintf_r+0x28>
 8003d0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d0c:	e72c      	b.n	8003b68 <_svfiprintf_r+0x2c>
 8003d0e:	ab03      	add	r3, sp, #12
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	462a      	mov	r2, r5
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <_svfiprintf_r+0x1f0>)
 8003d16:	a904      	add	r1, sp, #16
 8003d18:	4638      	mov	r0, r7
 8003d1a:	f000 f879 	bl	8003e10 <_printf_i>
 8003d1e:	e7ed      	b.n	8003cfc <_svfiprintf_r+0x1c0>
 8003d20:	080041a4 	.word	0x080041a4
 8003d24:	080041ae 	.word	0x080041ae
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	08003a85 	.word	0x08003a85
 8003d30:	080041aa 	.word	0x080041aa

08003d34 <_printf_common>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	4616      	mov	r6, r2
 8003d3a:	4698      	mov	r8, r3
 8003d3c:	688a      	ldr	r2, [r1, #8]
 8003d3e:	690b      	ldr	r3, [r1, #16]
 8003d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d44:	4293      	cmp	r3, r2
 8003d46:	bfb8      	it	lt
 8003d48:	4613      	movlt	r3, r2
 8003d4a:	6033      	str	r3, [r6, #0]
 8003d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d50:	4607      	mov	r7, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	b10a      	cbz	r2, 8003d5a <_printf_common+0x26>
 8003d56:	3301      	adds	r3, #1
 8003d58:	6033      	str	r3, [r6, #0]
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	0699      	lsls	r1, r3, #26
 8003d5e:	bf42      	ittt	mi
 8003d60:	6833      	ldrmi	r3, [r6, #0]
 8003d62:	3302      	addmi	r3, #2
 8003d64:	6033      	strmi	r3, [r6, #0]
 8003d66:	6825      	ldr	r5, [r4, #0]
 8003d68:	f015 0506 	ands.w	r5, r5, #6
 8003d6c:	d106      	bne.n	8003d7c <_printf_common+0x48>
 8003d6e:	f104 0a19 	add.w	sl, r4, #25
 8003d72:	68e3      	ldr	r3, [r4, #12]
 8003d74:	6832      	ldr	r2, [r6, #0]
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	42ab      	cmp	r3, r5
 8003d7a:	dc26      	bgt.n	8003dca <_printf_common+0x96>
 8003d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	3b00      	subs	r3, #0
 8003d84:	bf18      	it	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	0692      	lsls	r2, r2, #26
 8003d8a:	d42b      	bmi.n	8003de4 <_printf_common+0xb0>
 8003d8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d90:	4641      	mov	r1, r8
 8003d92:	4638      	mov	r0, r7
 8003d94:	47c8      	blx	r9
 8003d96:	3001      	adds	r0, #1
 8003d98:	d01e      	beq.n	8003dd8 <_printf_common+0xa4>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	6922      	ldr	r2, [r4, #16]
 8003d9e:	f003 0306 	and.w	r3, r3, #6
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf02      	ittt	eq
 8003da6:	68e5      	ldreq	r5, [r4, #12]
 8003da8:	6833      	ldreq	r3, [r6, #0]
 8003daa:	1aed      	subeq	r5, r5, r3
 8003dac:	68a3      	ldr	r3, [r4, #8]
 8003dae:	bf0c      	ite	eq
 8003db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db4:	2500      	movne	r5, #0
 8003db6:	4293      	cmp	r3, r2
 8003db8:	bfc4      	itt	gt
 8003dba:	1a9b      	subgt	r3, r3, r2
 8003dbc:	18ed      	addgt	r5, r5, r3
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	341a      	adds	r4, #26
 8003dc2:	42b5      	cmp	r5, r6
 8003dc4:	d11a      	bne.n	8003dfc <_printf_common+0xc8>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e008      	b.n	8003ddc <_printf_common+0xa8>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4652      	mov	r2, sl
 8003dce:	4641      	mov	r1, r8
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	47c8      	blx	r9
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	d103      	bne.n	8003de0 <_printf_common+0xac>
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de0:	3501      	adds	r5, #1
 8003de2:	e7c6      	b.n	8003d72 <_printf_common+0x3e>
 8003de4:	18e1      	adds	r1, r4, r3
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	2030      	movs	r0, #48	@ 0x30
 8003dea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dee:	4422      	add	r2, r4
 8003df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003df8:	3302      	adds	r3, #2
 8003dfa:	e7c7      	b.n	8003d8c <_printf_common+0x58>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	4622      	mov	r2, r4
 8003e00:	4641      	mov	r1, r8
 8003e02:	4638      	mov	r0, r7
 8003e04:	47c8      	blx	r9
 8003e06:	3001      	adds	r0, #1
 8003e08:	d0e6      	beq.n	8003dd8 <_printf_common+0xa4>
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	e7d9      	b.n	8003dc2 <_printf_common+0x8e>
	...

08003e10 <_printf_i>:
 8003e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e14:	7e0f      	ldrb	r7, [r1, #24]
 8003e16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e18:	2f78      	cmp	r7, #120	@ 0x78
 8003e1a:	4691      	mov	r9, r2
 8003e1c:	4680      	mov	r8, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	469a      	mov	sl, r3
 8003e22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e26:	d807      	bhi.n	8003e38 <_printf_i+0x28>
 8003e28:	2f62      	cmp	r7, #98	@ 0x62
 8003e2a:	d80a      	bhi.n	8003e42 <_printf_i+0x32>
 8003e2c:	2f00      	cmp	r7, #0
 8003e2e:	f000 80d1 	beq.w	8003fd4 <_printf_i+0x1c4>
 8003e32:	2f58      	cmp	r7, #88	@ 0x58
 8003e34:	f000 80b8 	beq.w	8003fa8 <_printf_i+0x198>
 8003e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e40:	e03a      	b.n	8003eb8 <_printf_i+0xa8>
 8003e42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e46:	2b15      	cmp	r3, #21
 8003e48:	d8f6      	bhi.n	8003e38 <_printf_i+0x28>
 8003e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8003e50 <_printf_i+0x40>)
 8003e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e50:	08003ea9 	.word	0x08003ea9
 8003e54:	08003ebd 	.word	0x08003ebd
 8003e58:	08003e39 	.word	0x08003e39
 8003e5c:	08003e39 	.word	0x08003e39
 8003e60:	08003e39 	.word	0x08003e39
 8003e64:	08003e39 	.word	0x08003e39
 8003e68:	08003ebd 	.word	0x08003ebd
 8003e6c:	08003e39 	.word	0x08003e39
 8003e70:	08003e39 	.word	0x08003e39
 8003e74:	08003e39 	.word	0x08003e39
 8003e78:	08003e39 	.word	0x08003e39
 8003e7c:	08003fbb 	.word	0x08003fbb
 8003e80:	08003ee7 	.word	0x08003ee7
 8003e84:	08003f75 	.word	0x08003f75
 8003e88:	08003e39 	.word	0x08003e39
 8003e8c:	08003e39 	.word	0x08003e39
 8003e90:	08003fdd 	.word	0x08003fdd
 8003e94:	08003e39 	.word	0x08003e39
 8003e98:	08003ee7 	.word	0x08003ee7
 8003e9c:	08003e39 	.word	0x08003e39
 8003ea0:	08003e39 	.word	0x08003e39
 8003ea4:	08003f7d 	.word	0x08003f7d
 8003ea8:	6833      	ldr	r3, [r6, #0]
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6032      	str	r2, [r6, #0]
 8003eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003eb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e09c      	b.n	8003ff6 <_printf_i+0x1e6>
 8003ebc:	6833      	ldr	r3, [r6, #0]
 8003ebe:	6820      	ldr	r0, [r4, #0]
 8003ec0:	1d19      	adds	r1, r3, #4
 8003ec2:	6031      	str	r1, [r6, #0]
 8003ec4:	0606      	lsls	r6, r0, #24
 8003ec6:	d501      	bpl.n	8003ecc <_printf_i+0xbc>
 8003ec8:	681d      	ldr	r5, [r3, #0]
 8003eca:	e003      	b.n	8003ed4 <_printf_i+0xc4>
 8003ecc:	0645      	lsls	r5, r0, #25
 8003ece:	d5fb      	bpl.n	8003ec8 <_printf_i+0xb8>
 8003ed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ed4:	2d00      	cmp	r5, #0
 8003ed6:	da03      	bge.n	8003ee0 <_printf_i+0xd0>
 8003ed8:	232d      	movs	r3, #45	@ 0x2d
 8003eda:	426d      	negs	r5, r5
 8003edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ee0:	4858      	ldr	r0, [pc, #352]	@ (8004044 <_printf_i+0x234>)
 8003ee2:	230a      	movs	r3, #10
 8003ee4:	e011      	b.n	8003f0a <_printf_i+0xfa>
 8003ee6:	6821      	ldr	r1, [r4, #0]
 8003ee8:	6833      	ldr	r3, [r6, #0]
 8003eea:	0608      	lsls	r0, r1, #24
 8003eec:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ef0:	d402      	bmi.n	8003ef8 <_printf_i+0xe8>
 8003ef2:	0649      	lsls	r1, r1, #25
 8003ef4:	bf48      	it	mi
 8003ef6:	b2ad      	uxthmi	r5, r5
 8003ef8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003efa:	4852      	ldr	r0, [pc, #328]	@ (8004044 <_printf_i+0x234>)
 8003efc:	6033      	str	r3, [r6, #0]
 8003efe:	bf14      	ite	ne
 8003f00:	230a      	movne	r3, #10
 8003f02:	2308      	moveq	r3, #8
 8003f04:	2100      	movs	r1, #0
 8003f06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f0a:	6866      	ldr	r6, [r4, #4]
 8003f0c:	60a6      	str	r6, [r4, #8]
 8003f0e:	2e00      	cmp	r6, #0
 8003f10:	db05      	blt.n	8003f1e <_printf_i+0x10e>
 8003f12:	6821      	ldr	r1, [r4, #0]
 8003f14:	432e      	orrs	r6, r5
 8003f16:	f021 0104 	bic.w	r1, r1, #4
 8003f1a:	6021      	str	r1, [r4, #0]
 8003f1c:	d04b      	beq.n	8003fb6 <_printf_i+0x1a6>
 8003f1e:	4616      	mov	r6, r2
 8003f20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f24:	fb03 5711 	mls	r7, r3, r1, r5
 8003f28:	5dc7      	ldrb	r7, [r0, r7]
 8003f2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f2e:	462f      	mov	r7, r5
 8003f30:	42bb      	cmp	r3, r7
 8003f32:	460d      	mov	r5, r1
 8003f34:	d9f4      	bls.n	8003f20 <_printf_i+0x110>
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d10b      	bne.n	8003f52 <_printf_i+0x142>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	07df      	lsls	r7, r3, #31
 8003f3e:	d508      	bpl.n	8003f52 <_printf_i+0x142>
 8003f40:	6923      	ldr	r3, [r4, #16]
 8003f42:	6861      	ldr	r1, [r4, #4]
 8003f44:	4299      	cmp	r1, r3
 8003f46:	bfde      	ittt	le
 8003f48:	2330      	movle	r3, #48	@ 0x30
 8003f4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f52:	1b92      	subs	r2, r2, r6
 8003f54:	6122      	str	r2, [r4, #16]
 8003f56:	f8cd a000 	str.w	sl, [sp]
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	aa03      	add	r2, sp, #12
 8003f5e:	4621      	mov	r1, r4
 8003f60:	4640      	mov	r0, r8
 8003f62:	f7ff fee7 	bl	8003d34 <_printf_common>
 8003f66:	3001      	adds	r0, #1
 8003f68:	d14a      	bne.n	8004000 <_printf_i+0x1f0>
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	b004      	add	sp, #16
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	f043 0320 	orr.w	r3, r3, #32
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	4832      	ldr	r0, [pc, #200]	@ (8004048 <_printf_i+0x238>)
 8003f7e:	2778      	movs	r7, #120	@ 0x78
 8003f80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	6831      	ldr	r1, [r6, #0]
 8003f88:	061f      	lsls	r7, r3, #24
 8003f8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f8e:	d402      	bmi.n	8003f96 <_printf_i+0x186>
 8003f90:	065f      	lsls	r7, r3, #25
 8003f92:	bf48      	it	mi
 8003f94:	b2ad      	uxthmi	r5, r5
 8003f96:	6031      	str	r1, [r6, #0]
 8003f98:	07d9      	lsls	r1, r3, #31
 8003f9a:	bf44      	itt	mi
 8003f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003fa0:	6023      	strmi	r3, [r4, #0]
 8003fa2:	b11d      	cbz	r5, 8003fac <_printf_i+0x19c>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	e7ad      	b.n	8003f04 <_printf_i+0xf4>
 8003fa8:	4826      	ldr	r0, [pc, #152]	@ (8004044 <_printf_i+0x234>)
 8003faa:	e7e9      	b.n	8003f80 <_printf_i+0x170>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	f023 0320 	bic.w	r3, r3, #32
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	e7f6      	b.n	8003fa4 <_printf_i+0x194>
 8003fb6:	4616      	mov	r6, r2
 8003fb8:	e7bd      	b.n	8003f36 <_printf_i+0x126>
 8003fba:	6833      	ldr	r3, [r6, #0]
 8003fbc:	6825      	ldr	r5, [r4, #0]
 8003fbe:	6961      	ldr	r1, [r4, #20]
 8003fc0:	1d18      	adds	r0, r3, #4
 8003fc2:	6030      	str	r0, [r6, #0]
 8003fc4:	062e      	lsls	r6, r5, #24
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	d501      	bpl.n	8003fce <_printf_i+0x1be>
 8003fca:	6019      	str	r1, [r3, #0]
 8003fcc:	e002      	b.n	8003fd4 <_printf_i+0x1c4>
 8003fce:	0668      	lsls	r0, r5, #25
 8003fd0:	d5fb      	bpl.n	8003fca <_printf_i+0x1ba>
 8003fd2:	8019      	strh	r1, [r3, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	6123      	str	r3, [r4, #16]
 8003fd8:	4616      	mov	r6, r2
 8003fda:	e7bc      	b.n	8003f56 <_printf_i+0x146>
 8003fdc:	6833      	ldr	r3, [r6, #0]
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	6032      	str	r2, [r6, #0]
 8003fe2:	681e      	ldr	r6, [r3, #0]
 8003fe4:	6862      	ldr	r2, [r4, #4]
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f7fc f8f9 	bl	80001e0 <memchr>
 8003fee:	b108      	cbz	r0, 8003ff4 <_printf_i+0x1e4>
 8003ff0:	1b80      	subs	r0, r0, r6
 8003ff2:	6060      	str	r0, [r4, #4]
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	6123      	str	r3, [r4, #16]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ffe:	e7aa      	b.n	8003f56 <_printf_i+0x146>
 8004000:	6923      	ldr	r3, [r4, #16]
 8004002:	4632      	mov	r2, r6
 8004004:	4649      	mov	r1, r9
 8004006:	4640      	mov	r0, r8
 8004008:	47d0      	blx	sl
 800400a:	3001      	adds	r0, #1
 800400c:	d0ad      	beq.n	8003f6a <_printf_i+0x15a>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	079b      	lsls	r3, r3, #30
 8004012:	d413      	bmi.n	800403c <_printf_i+0x22c>
 8004014:	68e0      	ldr	r0, [r4, #12]
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	4298      	cmp	r0, r3
 800401a:	bfb8      	it	lt
 800401c:	4618      	movlt	r0, r3
 800401e:	e7a6      	b.n	8003f6e <_printf_i+0x15e>
 8004020:	2301      	movs	r3, #1
 8004022:	4632      	mov	r2, r6
 8004024:	4649      	mov	r1, r9
 8004026:	4640      	mov	r0, r8
 8004028:	47d0      	blx	sl
 800402a:	3001      	adds	r0, #1
 800402c:	d09d      	beq.n	8003f6a <_printf_i+0x15a>
 800402e:	3501      	adds	r5, #1
 8004030:	68e3      	ldr	r3, [r4, #12]
 8004032:	9903      	ldr	r1, [sp, #12]
 8004034:	1a5b      	subs	r3, r3, r1
 8004036:	42ab      	cmp	r3, r5
 8004038:	dcf2      	bgt.n	8004020 <_printf_i+0x210>
 800403a:	e7eb      	b.n	8004014 <_printf_i+0x204>
 800403c:	2500      	movs	r5, #0
 800403e:	f104 0619 	add.w	r6, r4, #25
 8004042:	e7f5      	b.n	8004030 <_printf_i+0x220>
 8004044:	080041b5 	.word	0x080041b5
 8004048:	080041c6 	.word	0x080041c6

0800404c <memmove>:
 800404c:	4288      	cmp	r0, r1
 800404e:	b510      	push	{r4, lr}
 8004050:	eb01 0402 	add.w	r4, r1, r2
 8004054:	d902      	bls.n	800405c <memmove+0x10>
 8004056:	4284      	cmp	r4, r0
 8004058:	4623      	mov	r3, r4
 800405a:	d807      	bhi.n	800406c <memmove+0x20>
 800405c:	1e43      	subs	r3, r0, #1
 800405e:	42a1      	cmp	r1, r4
 8004060:	d008      	beq.n	8004074 <memmove+0x28>
 8004062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800406a:	e7f8      	b.n	800405e <memmove+0x12>
 800406c:	4402      	add	r2, r0
 800406e:	4601      	mov	r1, r0
 8004070:	428a      	cmp	r2, r1
 8004072:	d100      	bne.n	8004076 <memmove+0x2a>
 8004074:	bd10      	pop	{r4, pc}
 8004076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800407a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800407e:	e7f7      	b.n	8004070 <memmove+0x24>

08004080 <_sbrk_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d06      	ldr	r5, [pc, #24]	@ (800409c <_sbrk_r+0x1c>)
 8004084:	2300      	movs	r3, #0
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fc fc96 	bl	80009bc <_sbrk>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_sbrk_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_sbrk_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000260 	.word	0x20000260

080040a0 <memcpy>:
 80040a0:	440a      	add	r2, r1
 80040a2:	4291      	cmp	r1, r2
 80040a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80040a8:	d100      	bne.n	80040ac <memcpy+0xc>
 80040aa:	4770      	bx	lr
 80040ac:	b510      	push	{r4, lr}
 80040ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b6:	4291      	cmp	r1, r2
 80040b8:	d1f9      	bne.n	80040ae <memcpy+0xe>
 80040ba:	bd10      	pop	{r4, pc}

080040bc <_realloc_r>:
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	4607      	mov	r7, r0
 80040c2:	4614      	mov	r4, r2
 80040c4:	460d      	mov	r5, r1
 80040c6:	b921      	cbnz	r1, 80040d2 <_realloc_r+0x16>
 80040c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040cc:	4611      	mov	r1, r2
 80040ce:	f7ff bc4d 	b.w	800396c <_malloc_r>
 80040d2:	b92a      	cbnz	r2, 80040e0 <_realloc_r+0x24>
 80040d4:	f7ff fbde 	bl	8003894 <_free_r>
 80040d8:	4625      	mov	r5, r4
 80040da:	4628      	mov	r0, r5
 80040dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e0:	f000 f81a 	bl	8004118 <_malloc_usable_size_r>
 80040e4:	4284      	cmp	r4, r0
 80040e6:	4606      	mov	r6, r0
 80040e8:	d802      	bhi.n	80040f0 <_realloc_r+0x34>
 80040ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040ee:	d8f4      	bhi.n	80040da <_realloc_r+0x1e>
 80040f0:	4621      	mov	r1, r4
 80040f2:	4638      	mov	r0, r7
 80040f4:	f7ff fc3a 	bl	800396c <_malloc_r>
 80040f8:	4680      	mov	r8, r0
 80040fa:	b908      	cbnz	r0, 8004100 <_realloc_r+0x44>
 80040fc:	4645      	mov	r5, r8
 80040fe:	e7ec      	b.n	80040da <_realloc_r+0x1e>
 8004100:	42b4      	cmp	r4, r6
 8004102:	4622      	mov	r2, r4
 8004104:	4629      	mov	r1, r5
 8004106:	bf28      	it	cs
 8004108:	4632      	movcs	r2, r6
 800410a:	f7ff ffc9 	bl	80040a0 <memcpy>
 800410e:	4629      	mov	r1, r5
 8004110:	4638      	mov	r0, r7
 8004112:	f7ff fbbf 	bl	8003894 <_free_r>
 8004116:	e7f1      	b.n	80040fc <_realloc_r+0x40>

08004118 <_malloc_usable_size_r>:
 8004118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800411c:	1f18      	subs	r0, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	bfbc      	itt	lt
 8004122:	580b      	ldrlt	r3, [r1, r0]
 8004124:	18c0      	addlt	r0, r0, r3
 8004126:	4770      	bx	lr

08004128 <_init>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	bf00      	nop
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr

08004134 <_fini>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr


SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f18  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080020a0  080020a0  000030a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020e0  080020e0  00004018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080020e0  080020e0  00004018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080020e0  080020e0  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020e0  080020e0  000030e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020e4  080020e4  000030e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080020e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000018  08002100  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002100  000040a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007317  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001417  00000000  00000000  0000b35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000c778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b6  00000000  00000000  0000cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e25  00000000  00000000  0000d4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008234  00000000  00000000  000322fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e526a  00000000  00000000  0003a52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f799  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dec  00000000  00000000  0011f7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001215c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002088 	.word	0x08002088

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08002088 	.word	0x08002088

080001c8 <main>:
void SystemClock_Config(void);     // Configures system clock source and speed
static void MX_GPIO_Init(void);    // Initializes all required GPIO pins
static void MX_SPI1_Init(void);    // Initializes SPI1 for master mode operation

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  HAL_Init();                 // Initialize HAL library
 80001ce:	f000 f9b9 	bl	8000544 <HAL_Init>
  SystemClock_Config();       // Configure system clock
 80001d2:	f000 f815 	bl	8000200 <SystemClock_Config>
  MX_GPIO_Init();             // Initialize GPIO pins
 80001d6:	f000 f88d 	bl	80002f4 <MX_GPIO_Init>
  MX_SPI1_Init();             // Initialize SPI1
 80001da:	f000 f853 	bl	8000284 <MX_SPI1_Init>

  // Send tx_buffer and receive into rx_buffer using SPI1
  HAL_SPI_TransmitReceive(&hspi1, tx_buffer, rx_buffer, 10, 100);
 80001de:	2364      	movs	r3, #100	@ 0x64
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	230a      	movs	r3, #10
 80001e4:	4a03      	ldr	r2, [pc, #12]	@ (80001f4 <main+0x2c>)
 80001e6:	4904      	ldr	r1, [pc, #16]	@ (80001f8 <main+0x30>)
 80001e8:	4804      	ldr	r0, [pc, #16]	@ (80001fc <main+0x34>)
 80001ea:	f001 fb9e 	bl	800192a <HAL_SPI_TransmitReceive>

  while (1)
 80001ee:	bf00      	nop
 80001f0:	e7fd      	b.n	80001ee <main+0x26>
 80001f2:	bf00      	nop
 80001f4:	20000098 	.word	0x20000098
 80001f8:	20000000 	.word	0x20000000
 80001fc:	20000034 	.word	0x20000034

08000200 <SystemClock_Config>:
    // Infinite loop - no repeated actions here
  }
}

void SystemClock_Config(void) // Sets up HSI oscillator, PLL, and bus clocks
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b096      	sub	sp, #88	@ 0x58
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0314 	add.w	r3, r7, #20
 800020a:	2244      	movs	r2, #68	@ 0x44
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f001 ff0e 	bl	8002030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	463b      	mov	r3, r7
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000222:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000226:	f000 fcbf 	bl	8000ba8 <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000234:	2310      	movs	r3, #16
 8000236:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000238:	2302      	movs	r3, #2
 800023a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023c:	2302      	movs	r3, #2
 800023e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000240:	2301      	movs	r3, #1
 8000242:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000244:	230a      	movs	r3, #10
 8000246:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000248:	2307      	movs	r3, #7
 800024a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800024c:	2302      	movs	r3, #2
 800024e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000250:	2302      	movs	r3, #2
 8000252:	657b      	str	r3, [r7, #84]	@ 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fcfb 	bl	8000c54 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	603b      	str	r3, [r7, #0]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	2303      	movs	r3, #3
 8000264:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000272:	463b      	mov	r3, r7
 8000274:	2104      	movs	r1, #4
 8000276:	4618      	mov	r0, r3
 8000278:	f001 f8c8 	bl	800140c <HAL_RCC_ClockConfig>
}
 800027c:	bf00      	nop
 800027e:	3758      	adds	r7, #88	@ 0x58
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) // Configures SPI1 in master mode, 8-bit, full-duplex
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000288:	4b18      	ldr	r3, [pc, #96]	@ (80002ec <MX_SPI1_Init+0x68>)
 800028a:	4a19      	ldr	r2, [pc, #100]	@ (80002f0 <MX_SPI1_Init+0x6c>)
 800028c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800028e:	4b17      	ldr	r3, [pc, #92]	@ (80002ec <MX_SPI1_Init+0x68>)
 8000290:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000296:	4b15      	ldr	r3, [pc, #84]	@ (80002ec <MX_SPI1_Init+0x68>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800029c:	4b13      	ldr	r3, [pc, #76]	@ (80002ec <MX_SPI1_Init+0x68>)
 800029e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80002a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002a4:	4b11      	ldr	r3, [pc, #68]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002aa:	4b10      	ldr	r3, [pc, #64]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002b0:	4b0e      	ldr	r3, [pc, #56]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002ba:	2228      	movs	r2, #40	@ 0x28
 80002bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002be:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002c4:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002ca:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002d2:	2207      	movs	r2, #7
 80002d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002d6:	4b05      	ldr	r3, [pc, #20]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002d8:	2200      	movs	r2, #0
 80002da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002dc:	4b03      	ldr	r3, [pc, #12]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002de:	2208      	movs	r2, #8
 80002e0:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_SPI_Init(&hspi1);
 80002e2:	4802      	ldr	r0, [pc, #8]	@ (80002ec <MX_SPI1_Init+0x68>)
 80002e4:	f001 fa7e 	bl	80017e4 <HAL_SPI_Init>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000034 	.word	0x20000034
 80002f0:	40013000 	.word	0x40013000

080002f4 <MX_GPIO_Init>:



static void MX_GPIO_Init(void) // Configures GPIO clocks and sets PB6 as output
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08a      	sub	sp, #40	@ 0x28
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030a:	4b23      	ldr	r3, [pc, #140]	@ (8000398 <MX_GPIO_Init+0xa4>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	4a22      	ldr	r2, [pc, #136]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000316:	4b20      	ldr	r3, [pc, #128]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	f003 0304 	and.w	r3, r3, #4
 800031e:	613b      	str	r3, [r7, #16]
 8000320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000322:	4b1d      	ldr	r3, [pc, #116]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	4a1c      	ldr	r2, [pc, #112]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800032c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800032e:	4b1a      	ldr	r3, [pc, #104]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <MX_GPIO_Init+0xa4>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033e:	4a16      	ldr	r2, [pc, #88]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000346:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000352:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000356:	4a10      	ldr	r2, [pc, #64]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000362:	f003 0302 	and.w	r3, r3, #2
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2140      	movs	r1, #64	@ 0x40
 800036e:	480b      	ldr	r0, [pc, #44]	@ (800039c <MX_GPIO_Init+0xa8>)
 8000370:	f000 fbf4 	bl	8000b5c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000374:	2340      	movs	r3, #64	@ 0x40
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000378:	2301      	movs	r3, #1
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000380:	2300      	movs	r3, #0
 8000382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000384:	f107 0314 	add.w	r3, r7, #20
 8000388:	4619      	mov	r1, r3
 800038a:	4804      	ldr	r0, [pc, #16]	@ (800039c <MX_GPIO_Init+0xa8>)
 800038c:	f000 fa3c 	bl	8000808 <HAL_GPIO_Init>
}
 8000390:	bf00      	nop
 8000392:	3728      	adds	r7, #40	@ 0x28
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40021000 	.word	0x40021000
 800039c:	48000400 	.word	0x48000400

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a6:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <HAL_MspInit+0x44>)
 80003a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003aa:	4a0e      	ldr	r2, [pc, #56]	@ (80003e4 <HAL_MspInit+0x44>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80003b2:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <HAL_MspInit+0x44>)
 80003b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <HAL_MspInit+0x44>)
 80003c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003c2:	4a08      	ldr	r2, [pc, #32]	@ (80003e4 <HAL_MspInit+0x44>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80003ca:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <HAL_MspInit+0x44>)
 80003cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	@ 0x28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a17      	ldr	r2, [pc, #92]	@ (8000464 <HAL_SPI_MspInit+0x7c>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d128      	bne.n	800045c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800040a:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 800040c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800040e:	4a16      	ldr	r2, [pc, #88]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000410:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000414:	6613      	str	r3, [r2, #96]	@ 0x60
 8000416:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800041a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800041e:	613b      	str	r3, [r7, #16]
 8000420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000426:	4a10      	ldr	r2, [pc, #64]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800043a:	23e0      	movs	r3, #224	@ 0xe0
 800043c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043e:	2302      	movs	r3, #2
 8000440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000446:	2303      	movs	r3, #3
 8000448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800044a:	2305      	movs	r3, #5
 800044c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000458:	f000 f9d6 	bl	8000808 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	@ 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40013000 	.word	0x40013000
 8000468:	40021000 	.word	0x40021000

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <NMI_Handler+0x4>

08000474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <HardFault_Handler+0x4>

0800047c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <MemManage_Handler+0x4>

08000484 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <BusFault_Handler+0x4>

0800048c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <UsageFault_Handler+0x4>

08000494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c2:	f000 f89b 	bl	80005fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <SystemInit+0x20>)
 80004d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004d6:	4a05      	ldr	r2, [pc, #20]	@ (80004ec <SystemInit+0x20>)
 80004d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000528 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f4:	f7ff ffea 	bl	80004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480c      	ldr	r0, [pc, #48]	@ (800052c <LoopForever+0x6>)
  ldr r1, =_edata
 80004fa:	490d      	ldr	r1, [pc, #52]	@ (8000530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000534 <LoopForever+0xe>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000510:	4c0a      	ldr	r4, [pc, #40]	@ (800053c <LoopForever+0x16>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051e:	f001 fd8f 	bl	8002040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000522:	f7ff fe51 	bl	80001c8 <main>

08000526 <LoopForever>:

LoopForever:
    b LoopForever
 8000526:	e7fe      	b.n	8000526 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000534:	080020e8 	.word	0x080020e8
  ldr r2, =_sbss
 8000538:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800053c:	200000a8 	.word	0x200000a8

08000540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_2_IRQHandler>
	...

08000544 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800054a:	2300      	movs	r3, #0
 800054c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800054e:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <HAL_Init+0x3c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <HAL_Init+0x3c>)
 8000554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000558:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055a:	2003      	movs	r0, #3
 800055c:	f000 f920 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000560:	2000      	movs	r0, #0
 8000562:	f000 f80f 	bl	8000584 <HAL_InitTick>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d002      	beq.n	8000572 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	e001      	b.n	8000576 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000572:	f7ff ff15 	bl	80003a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000576:	79fb      	ldrb	r3, [r7, #7]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40022000 	.word	0x40022000

08000584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000590:	4b17      	ldr	r3, [pc, #92]	@ (80005f0 <HAL_InitTick+0x6c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d023      	beq.n	80005e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000598:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <HAL_InitTick+0x70>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <HAL_InitTick+0x6c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f91d 	bl	80007ee <HAL_SYSTICK_Config>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10f      	bne.n	80005da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d809      	bhi.n	80005d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c0:	2200      	movs	r2, #0
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	f04f 30ff 	mov.w	r0, #4294967295
 80005c8:	f000 f8f5 	bl	80007b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005cc:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <HAL_InitTick+0x74>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	e007      	b.n	80005e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005d4:	2301      	movs	r3, #1
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	e004      	b.n	80005e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	73fb      	strb	r3, [r7, #15]
 80005de:	e001      	b.n	80005e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000014 	.word	0x20000014
 80005f4:	2000000c 	.word	0x2000000c
 80005f8:	20000010 	.word	0x20000010

080005fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <HAL_IncTick+0x20>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <HAL_IncTick+0x24>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <HAL_IncTick+0x24>)
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000014 	.word	0x20000014
 8000620:	200000a4 	.word	0x200000a4

08000624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b03      	ldr	r3, [pc, #12]	@ (8000638 <HAL_GetTick+0x14>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200000a4 	.word	0x200000a4

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	@ (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	@ (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	@ 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	@ 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff8e 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	@ (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff47 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff5c 	bl	8000684 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff8e 	bl	80006f4 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffb0 	bl	800075c <SysTick_Config>
 80007fc:	4603      	mov	r3, r0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000808:	b480      	push	{r7}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000816:	e17f      	b.n	8000b18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	2101      	movs	r1, #1
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	4013      	ands	r3, r2
 8000826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b00      	cmp	r3, #0
 800082c:	f000 8171 	beq.w	8000b12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f003 0303 	and.w	r3, r3, #3
 8000838:	2b01      	cmp	r3, #1
 800083a:	d005      	beq.n	8000848 <HAL_GPIO_Init+0x40>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 0303 	and.w	r3, r3, #3
 8000844:	2b02      	cmp	r3, #2
 8000846:	d130      	bne.n	80008aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	2203      	movs	r2, #3
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	68da      	ldr	r2, [r3, #12]
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800087e:	2201      	movs	r2, #1
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43db      	mvns	r3, r3
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	4013      	ands	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	091b      	lsrs	r3, r3, #4
 8000894:	f003 0201 	and.w	r2, r3, #1
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f003 0303 	and.w	r3, r3, #3
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d118      	bne.n	80008e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008bc:	2201      	movs	r2, #1
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	08db      	lsrs	r3, r3, #3
 80008d2:	f003 0201 	and.w	r2, r3, #1
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4313      	orrs	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d017      	beq.n	8000924 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	2203      	movs	r2, #3
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4313      	orrs	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	2b02      	cmp	r3, #2
 800092e:	d123      	bne.n	8000978 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	08da      	lsrs	r2, r3, #3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3208      	adds	r2, #8
 8000938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	220f      	movs	r2, #15
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	691a      	ldr	r2, [r3, #16]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	08da      	lsrs	r2, r3, #3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3208      	adds	r2, #8
 8000972:	6939      	ldr	r1, [r7, #16]
 8000974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0203 	and.w	r2, r3, #3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f000 80ac 	beq.w	8000b12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b5f      	ldr	r3, [pc, #380]	@ (8000b38 <HAL_GPIO_Init+0x330>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009be:	4a5e      	ldr	r2, [pc, #376]	@ (8000b38 <HAL_GPIO_Init+0x330>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009c6:	4b5c      	ldr	r3, [pc, #368]	@ (8000b38 <HAL_GPIO_Init+0x330>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009d2:	4a5a      	ldr	r2, [pc, #360]	@ (8000b3c <HAL_GPIO_Init+0x334>)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	3302      	adds	r3, #2
 80009da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	f003 0303 	and.w	r3, r3, #3
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009fc:	d025      	beq.n	8000a4a <HAL_GPIO_Init+0x242>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4f      	ldr	r2, [pc, #316]	@ (8000b40 <HAL_GPIO_Init+0x338>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d01f      	beq.n	8000a46 <HAL_GPIO_Init+0x23e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4e      	ldr	r2, [pc, #312]	@ (8000b44 <HAL_GPIO_Init+0x33c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d019      	beq.n	8000a42 <HAL_GPIO_Init+0x23a>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4d      	ldr	r2, [pc, #308]	@ (8000b48 <HAL_GPIO_Init+0x340>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d013      	beq.n	8000a3e <HAL_GPIO_Init+0x236>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4c      	ldr	r2, [pc, #304]	@ (8000b4c <HAL_GPIO_Init+0x344>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d00d      	beq.n	8000a3a <HAL_GPIO_Init+0x232>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4b      	ldr	r2, [pc, #300]	@ (8000b50 <HAL_GPIO_Init+0x348>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d007      	beq.n	8000a36 <HAL_GPIO_Init+0x22e>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4a      	ldr	r2, [pc, #296]	@ (8000b54 <HAL_GPIO_Init+0x34c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <HAL_GPIO_Init+0x22a>
 8000a2e:	2306      	movs	r3, #6
 8000a30:	e00c      	b.n	8000a4c <HAL_GPIO_Init+0x244>
 8000a32:	2307      	movs	r3, #7
 8000a34:	e00a      	b.n	8000a4c <HAL_GPIO_Init+0x244>
 8000a36:	2305      	movs	r3, #5
 8000a38:	e008      	b.n	8000a4c <HAL_GPIO_Init+0x244>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x244>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e004      	b.n	8000a4c <HAL_GPIO_Init+0x244>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <HAL_GPIO_Init+0x244>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x244>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	f002 0203 	and.w	r2, r2, #3
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	4093      	lsls	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a5c:	4937      	ldr	r1, [pc, #220]	@ (8000b3c <HAL_GPIO_Init+0x334>)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b58 <HAL_GPIO_Init+0x350>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a8e:	4a32      	ldr	r2, [pc, #200]	@ (8000b58 <HAL_GPIO_Init+0x350>)
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a94:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <HAL_GPIO_Init+0x350>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ab8:	4a27      	ldr	r2, [pc, #156]	@ (8000b58 <HAL_GPIO_Init+0x350>)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000abe:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <HAL_GPIO_Init+0x350>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b58 <HAL_GPIO_Init+0x350>)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <HAL_GPIO_Init+0x350>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b0c:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <HAL_GPIO_Init+0x350>)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f47f ae78 	bne.w	8000818 <HAL_GPIO_Init+0x10>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	371c      	adds	r7, #28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	48000400 	.word	0x48000400
 8000b44:	48000800 	.word	0x48000800
 8000b48:	48000c00 	.word	0x48000c00
 8000b4c:	48001000 	.word	0x48001000
 8000b50:	48001400 	.word	0x48001400
 8000b54:	48001800 	.word	0x48001800
 8000b58:	40010400 	.word	0x40010400

08000b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b6c:	787b      	ldrb	r3, [r7, #1]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b90:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bb6:	d130      	bne.n	8000c1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bb8:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bc4:	d038      	beq.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc6:	4b20      	ldr	r3, [pc, #128]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bce:	4a1e      	ldr	r2, [pc, #120]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2232      	movs	r2, #50	@ 0x32
 8000bdc:	fb02 f303 	mul.w	r3, r2, r3
 8000be0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	0c9b      	lsrs	r3, r3, #18
 8000be8:	3301      	adds	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bec:	e002      	b.n	8000bf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c00:	d102      	bne.n	8000c08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f2      	bne.n	8000bee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c14:	d110      	bne.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e00f      	b.n	8000c3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c26:	d007      	beq.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c30:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40007000 	.word	0x40007000
 8000c4c:	2000000c 	.word	0x2000000c
 8000c50:	431bde83 	.word	0x431bde83

08000c54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e3ca      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c66:	4b97      	ldr	r3, [pc, #604]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c70:	4b94      	ldr	r3, [pc, #592]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 80e4 	beq.w	8000e50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <HAL_RCC_OscConfig+0x4a>
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	2b0c      	cmp	r3, #12
 8000c92:	f040 808b 	bne.w	8000dac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	f040 8087 	bne.w	8000dac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c9e:	4b89      	ldr	r3, [pc, #548]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d005      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x62>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e3a2      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a1a      	ldr	r2, [r3, #32]
 8000cba:	4b82      	ldr	r3, [pc, #520]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x7c>
 8000cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cce:	e005      	b.n	8000cdc <HAL_RCC_OscConfig+0x88>
 8000cd0:	4b7c      	ldr	r3, [pc, #496]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d223      	bcs.n	8000d28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fd1d 	bl	8001724 <RCC_SetFlashLatencyFromMSIRange>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e383      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cf4:	4b73      	ldr	r3, [pc, #460]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a72      	ldr	r2, [pc, #456]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b70      	ldr	r3, [pc, #448]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	496d      	ldr	r1, [pc, #436]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d12:	4b6c      	ldr	r3, [pc, #432]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	4968      	ldr	r1, [pc, #416]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	604b      	str	r3, [r1, #4]
 8000d26:	e025      	b.n	8000d74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d28:	4b66      	ldr	r3, [pc, #408]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a65      	ldr	r2, [pc, #404]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b63      	ldr	r3, [pc, #396]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	4960      	ldr	r1, [pc, #384]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d46:	4b5f      	ldr	r3, [pc, #380]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	495b      	ldr	r1, [pc, #364]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d109      	bne.n	8000d74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fcdd 	bl	8001724 <RCC_SetFlashLatencyFromMSIRange>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e343      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d74:	f000 fc4a 	bl	800160c <HAL_RCC_GetSysClockFreq>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	4b52      	ldr	r3, [pc, #328]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	4950      	ldr	r1, [pc, #320]	@ (8000ec8 <HAL_RCC_OscConfig+0x274>)
 8000d86:	5ccb      	ldrb	r3, [r1, r3]
 8000d88:	f003 031f 	and.w	r3, r3, #31
 8000d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d90:	4a4e      	ldr	r2, [pc, #312]	@ (8000ecc <HAL_RCC_OscConfig+0x278>)
 8000d92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d94:	4b4e      	ldr	r3, [pc, #312]	@ (8000ed0 <HAL_RCC_OscConfig+0x27c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fbf3 	bl	8000584 <HAL_InitTick>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d052      	beq.n	8000e4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	e327      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d032      	beq.n	8000e1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000db4:	4b43      	ldr	r3, [pc, #268]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a42      	ldr	r2, [pc, #264]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fc30 	bl	8000624 <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dc8:	f7ff fc2c 	bl	8000624 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e310      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dda:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f0      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000de6:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a36      	ldr	r2, [pc, #216]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b34      	ldr	r3, [pc, #208]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	4931      	ldr	r1, [pc, #196]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	492c      	ldr	r1, [pc, #176]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e14:	4313      	orrs	r3, r2
 8000e16:	604b      	str	r3, [r1, #4]
 8000e18:	e01a      	b.n	8000e50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a29      	ldr	r2, [pc, #164]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e20:	f023 0301 	bic.w	r3, r3, #1
 8000e24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e26:	f7ff fbfd 	bl	8000624 <HAL_GetTick>
 8000e2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e2c:	e008      	b.n	8000e40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e2e:	f7ff fbf9 	bl	8000624 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e2dd      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e40:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1f0      	bne.n	8000e2e <HAL_RCC_OscConfig+0x1da>
 8000e4c:	e000      	b.n	8000e50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d074      	beq.n	8000f46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d005      	beq.n	8000e6e <HAL_RCC_OscConfig+0x21a>
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	2b0c      	cmp	r3, #12
 8000e66:	d10e      	bne.n	8000e86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d10b      	bne.n	8000e86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d064      	beq.n	8000f44 <HAL_RCC_OscConfig+0x2f0>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d160      	bne.n	8000f44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e2ba      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e8e:	d106      	bne.n	8000e9e <HAL_RCC_OscConfig+0x24a>
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	e026      	b.n	8000eec <HAL_RCC_OscConfig+0x298>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ea6:	d115      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x280>
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000eae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a02      	ldr	r2, [pc, #8]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e014      	b.n	8000eec <HAL_RCC_OscConfig+0x298>
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	080020a0 	.word	0x080020a0
 8000ecc:	2000000c 	.word	0x2000000c
 8000ed0:	20000010 	.word	0x20000010
 8000ed4:	4ba0      	ldr	r3, [pc, #640]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a9f      	ldr	r2, [pc, #636]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b9d      	ldr	r3, [pc, #628]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a9c      	ldr	r2, [pc, #624]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d013      	beq.n	8000f1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fb96 	bl	8000624 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fb92 	bl	8000624 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	@ 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e276      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f0e:	4b92      	ldr	r3, [pc, #584]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0x2a8>
 8000f1a:	e014      	b.n	8000f46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fb82 	bl	8000624 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fb7e 	bl	8000624 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	@ 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e262      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f36:	4b88      	ldr	r3, [pc, #544]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x2d0>
 8000f42:	e000      	b.n	8000f46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d060      	beq.n	8001014 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_OscConfig+0x310>
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2b0c      	cmp	r3, #12
 8000f5c:	d119      	bne.n	8000f92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d116      	bne.n	8000f92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f64:	4b7c      	ldr	r3, [pc, #496]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_OscConfig+0x328>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e23f      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b76      	ldr	r3, [pc, #472]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	061b      	lsls	r3, r3, #24
 8000f8a:	4973      	ldr	r1, [pc, #460]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f90:	e040      	b.n	8001014 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d023      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fb3d 	bl	8000624 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fb39 	bl	8000624 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e21d      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc0:	4b65      	ldr	r3, [pc, #404]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b62      	ldr	r3, [pc, #392]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	495f      	ldr	r1, [pc, #380]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
 8000fe0:	e018      	b.n	8001014 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fee:	f7ff fb19 	bl	8000624 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fb15 	bl	8000624 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e1f9      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001008:	4b53      	ldr	r3, [pc, #332]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f0      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d03c      	beq.n	800109a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d01c      	beq.n	8001062 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001028:	4b4b      	ldr	r3, [pc, #300]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800102a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800102e:	4a4a      	ldr	r2, [pc, #296]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001038:	f7ff faf4 	bl	8000624 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff faf0 	bl	8000624 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e1d4      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001052:	4b41      	ldr	r3, [pc, #260]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0ef      	beq.n	8001040 <HAL_RCC_OscConfig+0x3ec>
 8001060:	e01b      	b.n	800109a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001062:	4b3d      	ldr	r3, [pc, #244]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001068:	4a3b      	ldr	r2, [pc, #236]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001072:	f7ff fad7 	bl	8000624 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800107a:	f7ff fad3 	bl	8000624 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e1b7      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800108c:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800108e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1ef      	bne.n	800107a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80a6 	beq.w	80011f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10d      	bne.n	80010d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 80010ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010bc:	4a26      	ldr	r2, [pc, #152]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010d0:	2301      	movs	r3, #1
 80010d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_RCC_OscConfig+0x508>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d118      	bne.n	8001112 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010e0:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <HAL_RCC_OscConfig+0x508>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <HAL_RCC_OscConfig+0x508>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ec:	f7ff fa9a 	bl	8000624 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f4:	f7ff fa96 	bl	8000624 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e17a      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_RCC_OscConfig+0x508>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_RCC_OscConfig+0x4d8>
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800111c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001120:	4a0d      	ldr	r2, [pc, #52]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800112a:	e029      	b.n	8001180 <HAL_RCC_OscConfig+0x52c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b05      	cmp	r3, #5
 8001132:	d115      	bne.n	8001160 <HAL_RCC_OscConfig+0x50c>
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800113a:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800114a:	4a03      	ldr	r2, [pc, #12]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001154:	e014      	b.n	8001180 <HAL_RCC_OscConfig+0x52c>
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	40007000 	.word	0x40007000
 8001160:	4b9c      	ldr	r3, [pc, #624]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 8001162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001166:	4a9b      	ldr	r2, [pc, #620]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001170:	4b98      	ldr	r3, [pc, #608]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 8001172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001176:	4a97      	ldr	r2, [pc, #604]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d016      	beq.n	80011b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff fa4c 	bl	8000624 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001190:	f7ff fa48 	bl	8000624 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e12a      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011a6:	4b8b      	ldr	r3, [pc, #556]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 80011a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0ed      	beq.n	8001190 <HAL_RCC_OscConfig+0x53c>
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b6:	f7ff fa35 	bl	8000624 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff fa31 	bl	8000624 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e113      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d4:	4b7f      	ldr	r3, [pc, #508]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 80011d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ed      	bne.n	80011be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e8:	4b7a      	ldr	r3, [pc, #488]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ec:	4a79      	ldr	r2, [pc, #484]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 80011ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80fe 	beq.w	80013fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001202:	2b02      	cmp	r3, #2
 8001204:	f040 80d0 	bne.w	80013a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001208:	4b72      	ldr	r3, [pc, #456]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001218:	429a      	cmp	r2, r3
 800121a:	d130      	bne.n	800127e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	3b01      	subs	r3, #1
 8001228:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800122a:	429a      	cmp	r2, r3
 800122c:	d127      	bne.n	800127e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001238:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800123a:	429a      	cmp	r2, r3
 800123c:	d11f      	bne.n	800127e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001248:	2a07      	cmp	r2, #7
 800124a:	bf14      	ite	ne
 800124c:	2201      	movne	r2, #1
 800124e:	2200      	moveq	r2, #0
 8001250:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001252:	4293      	cmp	r3, r2
 8001254:	d113      	bne.n	800127e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	3b01      	subs	r3, #1
 8001264:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001266:	429a      	cmp	r2, r3
 8001268:	d109      	bne.n	800127e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	085b      	lsrs	r3, r3, #1
 8001276:	3b01      	subs	r3, #1
 8001278:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800127a:	429a      	cmp	r2, r3
 800127c:	d06e      	beq.n	800135c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	2b0c      	cmp	r3, #12
 8001282:	d069      	beq.n	8001358 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001284:	4b53      	ldr	r3, [pc, #332]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001290:	4b50      	ldr	r3, [pc, #320]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0ad      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012a0:	4b4c      	ldr	r3, [pc, #304]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a4b      	ldr	r2, [pc, #300]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 80012a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012ac:	f7ff f9ba 	bl	8000624 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b4:	f7ff f9b6 	bl	8000624 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e09a      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012c6:	4b43      	ldr	r3, [pc, #268]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d2:	4b40      	ldr	r3, [pc, #256]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	4b40      	ldr	r3, [pc, #256]	@ (80013d8 <HAL_RCC_OscConfig+0x784>)
 80012d8:	4013      	ands	r3, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80012e2:	3a01      	subs	r2, #1
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	4311      	orrs	r1, r2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012ec:	0212      	lsls	r2, r2, #8
 80012ee:	4311      	orrs	r1, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80012f4:	0852      	lsrs	r2, r2, #1
 80012f6:	3a01      	subs	r2, #1
 80012f8:	0552      	lsls	r2, r2, #21
 80012fa:	4311      	orrs	r1, r2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001300:	0852      	lsrs	r2, r2, #1
 8001302:	3a01      	subs	r2, #1
 8001304:	0652      	lsls	r2, r2, #25
 8001306:	4311      	orrs	r1, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800130c:	0912      	lsrs	r2, r2, #4
 800130e:	0452      	lsls	r2, r2, #17
 8001310:	430a      	orrs	r2, r1
 8001312:	4930      	ldr	r1, [pc, #192]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 8001314:	4313      	orrs	r3, r2
 8001316:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001318:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a2d      	ldr	r2, [pc, #180]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 800131e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001322:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001324:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4a2a      	ldr	r2, [pc, #168]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 800132a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800132e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001330:	f7ff f978 	bl	8000624 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001338:	f7ff f974 	bl	8000624 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e058      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134a:	4b22      	ldr	r3, [pc, #136]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001356:	e050      	b.n	80013fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e04f      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d148      	bne.n	80013fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001368:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001372:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001374:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a16      	ldr	r2, [pc, #88]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 800137a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800137e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001380:	f7ff f950 	bl	8000624 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff f94c 	bl	8000624 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e030      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x734>
 80013a6:	e028      	b.n	80013fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d023      	beq.n	80013f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <HAL_RCC_OscConfig+0x780>)
 80013b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff f933 	bl	8000624 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c0:	e00c      	b.n	80013dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff f92f 	bl	8000624 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d905      	bls.n	80013dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e013      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
 80013d4:	40021000 	.word	0x40021000
 80013d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_RCC_OscConfig+0x7b0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ec      	bne.n	80013c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_RCC_OscConfig+0x7b0>)
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	4905      	ldr	r1, [pc, #20]	@ (8001404 <HAL_RCC_OscConfig+0x7b0>)
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_RCC_OscConfig+0x7b4>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	60cb      	str	r3, [r1, #12]
 80013f4:	e001      	b.n	80013fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000
 8001408:	feeefffc 	.word	0xfeeefffc

0800140c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0e7      	b.n	80015f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b75      	ldr	r3, [pc, #468]	@ (80015f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d910      	bls.n	8001450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b72      	ldr	r3, [pc, #456]	@ (80015f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 0207 	bic.w	r2, r3, #7
 8001436:	4970      	ldr	r1, [pc, #448]	@ (80015f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800143e:	4b6e      	ldr	r3, [pc, #440]	@ (80015f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0cf      	b.n	80015f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d010      	beq.n	800147e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	4b66      	ldr	r3, [pc, #408]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001468:	429a      	cmp	r2, r3
 800146a:	d908      	bls.n	800147e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146c:	4b63      	ldr	r3, [pc, #396]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4960      	ldr	r1, [pc, #384]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 800147a:	4313      	orrs	r3, r2
 800147c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d04c      	beq.n	8001524 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001492:	4b5a      	ldr	r3, [pc, #360]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d121      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0a6      	b.n	80015f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d107      	bne.n	80014ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014aa:	4b54      	ldr	r3, [pc, #336]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d115      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e09a      	b.n	80015f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014c2:	4b4e      	ldr	r3, [pc, #312]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e08e      	b.n	80015f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d2:	4b4a      	ldr	r3, [pc, #296]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e086      	b.n	80015f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014e2:	4b46      	ldr	r3, [pc, #280]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f023 0203 	bic.w	r2, r3, #3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4943      	ldr	r1, [pc, #268]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014f4:	f7ff f896 	bl	8000624 <HAL_GetTick>
 80014f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fa:	e00a      	b.n	8001512 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014fc:	f7ff f892 	bl	8000624 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e06e      	b.n	80015f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	4b3a      	ldr	r3, [pc, #232]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 020c 	and.w	r2, r3, #12
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	429a      	cmp	r2, r3
 8001522:	d1eb      	bne.n	80014fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d010      	beq.n	8001552 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800153c:	429a      	cmp	r2, r3
 800153e:	d208      	bcs.n	8001552 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	492b      	ldr	r1, [pc, #172]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001552:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d210      	bcs.n	8001582 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 0207 	bic.w	r2, r3, #7
 8001568:	4923      	ldr	r1, [pc, #140]	@ (80015f8 <HAL_RCC_ClockConfig+0x1ec>)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001570:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d001      	beq.n	8001582 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e036      	b.n	80015f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	2b00      	cmp	r3, #0
 800158c:	d008      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800158e:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	4918      	ldr	r1, [pc, #96]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 800159c:	4313      	orrs	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d009      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ac:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4910      	ldr	r1, [pc, #64]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015c0:	f000 f824 	bl	800160c <HAL_RCC_GetSysClockFreq>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	490b      	ldr	r1, [pc, #44]	@ (8001600 <HAL_RCC_ClockConfig+0x1f4>)
 80015d2:	5ccb      	ldrb	r3, [r1, r3]
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	4a09      	ldr	r2, [pc, #36]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 80015de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_RCC_ClockConfig+0x1fc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffcd 	bl	8000584 <HAL_InitTick>
 80015ea:	4603      	mov	r3, r0
 80015ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80015ee:	7afb      	ldrb	r3, [r7, #11]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40022000 	.word	0x40022000
 80015fc:	40021000 	.word	0x40021000
 8001600:	080020a0 	.word	0x080020a0
 8001604:	2000000c 	.word	0x2000000c
 8001608:	20000010 	.word	0x20000010

0800160c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	@ 0x24
 8001610:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161a:	4b3e      	ldr	r3, [pc, #248]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x108>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001624:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x108>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0x34>
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d121      	bne.n	800167e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d11e      	bne.n	800167e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001640:	4b34      	ldr	r3, [pc, #208]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x108>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d107      	bne.n	800165c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800164c:	4b31      	ldr	r3, [pc, #196]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x108>)
 800164e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e005      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800165c:	4b2d      	ldr	r3, [pc, #180]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x108>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001668:	4a2b      	ldr	r2, [pc, #172]	@ (8001718 <HAL_RCC_GetSysClockFreq+0x10c>)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10d      	bne.n	8001694 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d102      	bne.n	800168a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <HAL_RCC_GetSysClockFreq+0x110>)
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	e004      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b08      	cmp	r3, #8
 800168e:	d101      	bne.n	8001694 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001690:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x114>)
 8001692:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d134      	bne.n	8001704 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800169a:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x108>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d003      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0xac>
 80016b0:	e005      	b.n	80016be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <HAL_RCC_GetSysClockFreq+0x110>)
 80016b4:	617b      	str	r3, [r7, #20]
      break;
 80016b6:	e005      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016b8:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x114>)
 80016ba:	617b      	str	r3, [r7, #20]
      break;
 80016bc:	e002      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	617b      	str	r3, [r7, #20]
      break;
 80016c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016c4:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x108>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	3301      	adds	r3, #1
 80016d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	fb03 f202 	mul.w	r2, r3, r2
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	0e5b      	lsrs	r3, r3, #25
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	3301      	adds	r3, #1
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001704:	69bb      	ldr	r3, [r7, #24]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	@ 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	080020b0 	.word	0x080020b0
 800171c:	00f42400 	.word	0x00f42400
 8001720:	007a1200 	.word	0x007a1200

08001724 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001730:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800173c:	f7ff fa26 	bl	8000b8c <HAL_PWREx_GetVoltageRange>
 8001740:	6178      	str	r0, [r7, #20]
 8001742:	e014      	b.n	800176e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001744:	4b25      	ldr	r3, [pc, #148]	@ (80017dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	4a24      	ldr	r2, [pc, #144]	@ (80017dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800174a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001750:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800175c:	f7ff fa16 	bl	8000b8c <HAL_PWREx_GetVoltageRange>
 8001760:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001762:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	4a1d      	ldr	r2, [pc, #116]	@ (80017dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800176c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001774:	d10b      	bne.n	800178e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b80      	cmp	r3, #128	@ 0x80
 800177a:	d919      	bls.n	80017b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001780:	d902      	bls.n	8001788 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001782:	2302      	movs	r3, #2
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	e013      	b.n	80017b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001788:	2301      	movs	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	e010      	b.n	80017b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b80      	cmp	r3, #128	@ 0x80
 8001792:	d902      	bls.n	800179a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001794:	2303      	movs	r3, #3
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	e00a      	b.n	80017b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b80      	cmp	r3, #128	@ 0x80
 800179e:	d102      	bne.n	80017a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017a0:	2302      	movs	r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	e004      	b.n	80017b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b70      	cmp	r3, #112	@ 0x70
 80017aa:	d101      	bne.n	80017b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017ac:	2301      	movs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 0207 	bic.w	r2, r3, #7
 80017b8:	4909      	ldr	r1, [pc, #36]	@ (80017e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d001      	beq.n	80017d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40022000 	.word	0x40022000

080017e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e095      	b.n	8001922 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d108      	bne.n	8001810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001806:	d009      	beq.n	800181c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
 800180e:	e005      	b.n	800181c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7fe fdd6 	bl	80003e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001852:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800185c:	d902      	bls.n	8001864 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e002      	b.n	800186a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001868:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001872:	d007      	beq.n	8001884 <HAL_SPI_Init+0xa0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800187c:	d002      	beq.n	8001884 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c6:	ea42 0103 	orr.w	r1, r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	f003 0204 	and.w	r2, r3, #4
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001900:	ea42 0103 	orr.w	r1, r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b08a      	sub	sp, #40	@ 0x28
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001938:	2301      	movs	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800193c:	f7fe fe72 	bl	8000624 <HAL_GetTick>
 8001940:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001948:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001958:	7ffb      	ldrb	r3, [r7, #31]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d00c      	beq.n	8001978 <HAL_SPI_TransmitReceive+0x4e>
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001964:	d106      	bne.n	8001974 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <HAL_SPI_TransmitReceive+0x4a>
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d001      	beq.n	8001978 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001974:	2302      	movs	r3, #2
 8001976:	e1f3      	b.n	8001d60 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_SPI_TransmitReceive+0x60>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <HAL_SPI_TransmitReceive+0x60>
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e1e8      	b.n	8001d60 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_SPI_TransmitReceive+0x72>
 8001998:	2302      	movs	r3, #2
 800199a:	e1e1      	b.n	8001d60 <HAL_SPI_TransmitReceive+0x436>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d003      	beq.n	80019b8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2205      	movs	r2, #5
 80019b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80019fa:	d802      	bhi.n	8001a02 <HAL_SPI_TransmitReceive+0xd8>
 80019fc:	8abb      	ldrh	r3, [r7, #20]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d908      	bls.n	8001a14 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	e007      	b.n	8001a24 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a22:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a2e:	2b40      	cmp	r3, #64	@ 0x40
 8001a30:	d007      	beq.n	8001a42 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a4a:	f240 8083 	bls.w	8001b54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <HAL_SPI_TransmitReceive+0x132>
 8001a56:	8afb      	ldrh	r3, [r7, #22]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d16f      	bne.n	8001b3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a6c:	1c9a      	adds	r2, r3, #2
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a80:	e05c      	b.n	8001b3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d11b      	bne.n	8001ac8 <HAL_SPI_TransmitReceive+0x19e>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d016      	beq.n	8001ac8 <HAL_SPI_TransmitReceive+0x19e>
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d113      	bne.n	8001ac8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa4:	881a      	ldrh	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab0:	1c9a      	adds	r2, r3, #2
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d11c      	bne.n	8001b10 <HAL_SPI_TransmitReceive+0x1e6>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d016      	beq.n	8001b10 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	b292      	uxth	r2, r2
 8001aee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	1c9a      	adds	r2, r3, #2
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b10:	f7fe fd88 	bl	8000624 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d80d      	bhi.n	8001b3c <HAL_SPI_TransmitReceive+0x212>
 8001b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b26:	d009      	beq.n	8001b3c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e111      	b.n	8001d60 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d19d      	bne.n	8001a82 <HAL_SPI_TransmitReceive+0x158>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d197      	bne.n	8001a82 <HAL_SPI_TransmitReceive+0x158>
 8001b52:	e0e5      	b.n	8001d20 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_SPI_TransmitReceive+0x23a>
 8001b5c:	8afb      	ldrh	r3, [r7, #22]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	f040 80d1 	bne.w	8001d06 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d912      	bls.n	8001b94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	881a      	ldrh	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7e:	1c9a      	adds	r2, r3, #2
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b02      	subs	r3, #2
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001b92:	e0b8      	b.n	8001d06 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	330c      	adds	r3, #12
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bba:	e0a4      	b.n	8001d06 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d134      	bne.n	8001c34 <HAL_SPI_TransmitReceive+0x30a>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d02f      	beq.n	8001c34 <HAL_SPI_TransmitReceive+0x30a>
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d12c      	bne.n	8001c34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d912      	bls.n	8001c0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be8:	881a      	ldrh	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf4:	1c9a      	adds	r2, r3, #2
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b02      	subs	r3, #2
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c08:	e012      	b.n	8001c30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	330c      	adds	r3, #12
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d148      	bne.n	8001cd4 <HAL_SPI_TransmitReceive+0x3aa>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d042      	beq.n	8001cd4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d923      	bls.n	8001ca2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	b292      	uxth	r2, r2
 8001c66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	1c9a      	adds	r2, r3, #2
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b02      	subs	r3, #2
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d81f      	bhi.n	8001cd0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	e016      	b.n	8001cd0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f103 020c 	add.w	r2, r3, #12
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	7812      	ldrb	r2, [r2, #0]
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cd4:	f7fe fca6 	bl	8000624 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d803      	bhi.n	8001cec <HAL_SPI_TransmitReceive+0x3c2>
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cea:	d102      	bne.n	8001cf2 <HAL_SPI_TransmitReceive+0x3c8>
 8001cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e02c      	b.n	8001d60 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f af55 	bne.w	8001bbc <HAL_SPI_TransmitReceive+0x292>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f47f af4e 	bne.w	8001bbc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d20:	6a3a      	ldr	r2, [r7, #32]
 8001d22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f93d 	bl	8001fa4 <SPI_EndRxTxTransaction>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2220      	movs	r2, #32
 8001d34:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00e      	b.n	8001d60 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	4613      	mov	r3, r2
 8001d76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d78:	f7fe fc54 	bl	8000624 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d88:	f7fe fc4c 	bl	8000624 <HAL_GetTick>
 8001d8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d8e:	4b39      	ldr	r3, [pc, #228]	@ (8001e74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	015b      	lsls	r3, r3, #5
 8001d94:	0d1b      	lsrs	r3, r3, #20
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d9e:	e054      	b.n	8001e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da6:	d050      	beq.n	8001e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001da8:	f7fe fc3c 	bl	8000624 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d902      	bls.n	8001dbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d13d      	bne.n	8001e3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dd6:	d111      	bne.n	8001dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001de0:	d004      	beq.n	8001dec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dea:	d107      	bne.n	8001dfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e04:	d10f      	bne.n	8001e26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e017      	b.n	8001e6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4013      	ands	r3, r2
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d19b      	bne.n	8001da0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000000c 	.word	0x2000000c

08001e78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	@ 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001e8a:	f7fe fbcb 	bl	8000624 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001e9a:	f7fe fbc3 	bl	8000624 <HAL_GetTick>
 8001e9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001ea8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00da      	lsls	r2, r3, #3
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	0d1b      	lsrs	r3, r3, #20
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001ec0:	e060      	b.n	8001f84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001ec8:	d107      	bne.n	8001eda <SPI_WaitFifoStateUntilTimeout+0x62>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d104      	bne.n	8001eda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d050      	beq.n	8001f84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ee2:	f7fe fb9f 	bl	8000624 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d902      	bls.n	8001ef8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d13d      	bne.n	8001f74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001f06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f10:	d111      	bne.n	8001f36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f1a:	d004      	beq.n	8001f26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f24:	d107      	bne.n	8001f36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f3e:	d10f      	bne.n	8001f60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e010      	b.n	8001f96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d196      	bne.n	8001ec2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3728      	adds	r7, #40	@ 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000000c 	.word	0x2000000c

08001fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff ff5b 	bl	8001e78 <SPI_WaitFifoStateUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e027      	b.n	8002028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2180      	movs	r1, #128	@ 0x80
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7ff fec0 	bl	8001d68 <SPI_WaitFlagStateUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff2:	f043 0220 	orr.w	r2, r3, #32
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e014      	b.n	8002028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2200      	movs	r2, #0
 8002006:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff ff34 	bl	8001e78 <SPI_WaitFifoStateUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	f043 0220 	orr.w	r2, r3, #32
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e000      	b.n	8002028 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <memset>:
 8002030:	4402      	add	r2, r0
 8002032:	4603      	mov	r3, r0
 8002034:	4293      	cmp	r3, r2
 8002036:	d100      	bne.n	800203a <memset+0xa>
 8002038:	4770      	bx	lr
 800203a:	f803 1b01 	strb.w	r1, [r3], #1
 800203e:	e7f9      	b.n	8002034 <memset+0x4>

08002040 <__libc_init_array>:
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	4d0d      	ldr	r5, [pc, #52]	@ (8002078 <__libc_init_array+0x38>)
 8002044:	4c0d      	ldr	r4, [pc, #52]	@ (800207c <__libc_init_array+0x3c>)
 8002046:	1b64      	subs	r4, r4, r5
 8002048:	10a4      	asrs	r4, r4, #2
 800204a:	2600      	movs	r6, #0
 800204c:	42a6      	cmp	r6, r4
 800204e:	d109      	bne.n	8002064 <__libc_init_array+0x24>
 8002050:	4d0b      	ldr	r5, [pc, #44]	@ (8002080 <__libc_init_array+0x40>)
 8002052:	4c0c      	ldr	r4, [pc, #48]	@ (8002084 <__libc_init_array+0x44>)
 8002054:	f000 f818 	bl	8002088 <_init>
 8002058:	1b64      	subs	r4, r4, r5
 800205a:	10a4      	asrs	r4, r4, #2
 800205c:	2600      	movs	r6, #0
 800205e:	42a6      	cmp	r6, r4
 8002060:	d105      	bne.n	800206e <__libc_init_array+0x2e>
 8002062:	bd70      	pop	{r4, r5, r6, pc}
 8002064:	f855 3b04 	ldr.w	r3, [r5], #4
 8002068:	4798      	blx	r3
 800206a:	3601      	adds	r6, #1
 800206c:	e7ee      	b.n	800204c <__libc_init_array+0xc>
 800206e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002072:	4798      	blx	r3
 8002074:	3601      	adds	r6, #1
 8002076:	e7f2      	b.n	800205e <__libc_init_array+0x1e>
 8002078:	080020e0 	.word	0x080020e0
 800207c:	080020e0 	.word	0x080020e0
 8002080:	080020e0 	.word	0x080020e0
 8002084:	080020e4 	.word	0x080020e4

08002088 <_init>:
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208a:	bf00      	nop
 800208c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208e:	bc08      	pop	{r3}
 8002090:	469e      	mov	lr, r3
 8002092:	4770      	bx	lr

08002094 <_fini>:
 8002094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002096:	bf00      	nop
 8002098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209a:	bc08      	pop	{r3}
 800209c:	469e      	mov	lr, r3
 800209e:	4770      	bx	lr
